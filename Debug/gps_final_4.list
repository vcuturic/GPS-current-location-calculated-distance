
gps_final_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005964  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08005a78  08005a78  00015a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f00  08005f00  0002024c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f00  08005f00  0002024c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f00  08005f00  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08005f08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000250  08006154  00020250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08006154  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ecb  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b4  00000000  00000000  00028140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  000297f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  00029ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cb9  00000000  00000000  0002a570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008755  00000000  00000000  00041229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824ca  00000000  00000000  0004997e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cbe48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022cc  00000000  00000000  000cbe98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000250 	.word	0x20000250
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a5c 	.word	0x08005a5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000254 	.word	0x20000254
 800014c:	08005a5c 	.word	0x08005a5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2iz>:
 8000d44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d4c:	d30f      	bcc.n	8000d6e <__aeabi_f2iz+0x2a>
 8000d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d90d      	bls.n	8000d74 <__aeabi_f2iz+0x30>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d64:	fa23 f002 	lsr.w	r0, r3, r2
 8000d68:	bf18      	it	ne
 8000d6a:	4240      	negne	r0, r0
 8000d6c:	4770      	bx	lr
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	4770      	bx	lr
 8000d74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d78:	d101      	bne.n	8000d7e <__aeabi_f2iz+0x3a>
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	d105      	bne.n	8000d8a <__aeabi_f2iz+0x46>
 8000d7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	bf08      	it	eq
 8000d84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr

08000d90 <haversineDistance>:
#include "stdlib.h"

#define EARTH_RADIUS_KM 6371.0
#define TO_RADIANS(deg) ((deg) * M_PI / 180.0)

double haversineDistance(double lat_1, double lon_1, double lat_2, double lon_2) {
 8000d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d94:	b08e      	sub	sp, #56	; 0x38
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000d9c:	e9c7 2300 	strd	r2, r3, [r7]
    // Convert latitude and longitude from degrees to radians
    lat_1 = TO_RADIANS(lat_1);
 8000da0:	a385      	add	r3, pc, #532	; (adr r3, 8000fb8 <haversineDistance+0x228>)
 8000da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000daa:	f7ff fb95 	bl	80004d8 <__aeabi_dmul>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	4b83      	ldr	r3, [pc, #524]	; (8000fc8 <haversineDistance+0x238>)
 8000dbc:	f7ff fcb6 	bl	800072c <__aeabi_ddiv>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    lon_1 = TO_RADIANS(lon_1);
 8000dc8:	a37b      	add	r3, pc, #492	; (adr r3, 8000fb8 <haversineDistance+0x228>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000dd2:	f7ff fb81 	bl	80004d8 <__aeabi_dmul>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	4b79      	ldr	r3, [pc, #484]	; (8000fc8 <haversineDistance+0x238>)
 8000de4:	f7ff fca2 	bl	800072c <__aeabi_ddiv>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	e9c7 2300 	strd	r2, r3, [r7]
    lat_2 = TO_RADIANS(lat_2);
 8000df0:	a371      	add	r3, pc, #452	; (adr r3, 8000fb8 <haversineDistance+0x228>)
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000dfa:	f7ff fb6d 	bl	80004d8 <__aeabi_dmul>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4610      	mov	r0, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	4b6f      	ldr	r3, [pc, #444]	; (8000fc8 <haversineDistance+0x238>)
 8000e0c:	f7ff fc8e 	bl	800072c <__aeabi_ddiv>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    lon_2 = TO_RADIANS(lon_2);
 8000e18:	a367      	add	r3, pc, #412	; (adr r3, 8000fb8 <haversineDistance+0x228>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000e22:	f7ff fb59 	bl	80004d8 <__aeabi_dmul>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4b65      	ldr	r3, [pc, #404]	; (8000fc8 <haversineDistance+0x238>)
 8000e34:	f7ff fc7a 	bl	800072c <__aeabi_ddiv>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    // Calculate the haversine distance
    double dlat = lat_2 - lat_1;
 8000e40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e44:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000e48:	f7ff f98e 	bl	8000168 <__aeabi_dsub>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double dlon = lon_2 - lon_1;
 8000e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e58:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000e5c:	f7ff f984 	bl	8000168 <__aeabi_dsub>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double a = sin(dlat / 2.0) * sin(dlat / 2.0) +
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000e74:	f7ff fc5a 	bl	800072c <__aeabi_ddiv>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f002 fd0c 	bl	800389c <sin>
 8000e84:	4604      	mov	r4, r0
 8000e86:	460d      	mov	r5, r1
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000e94:	f7ff fc4a 	bl	800072c <__aeabi_ddiv>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f002 fcfc 	bl	800389c <sin>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	4629      	mov	r1, r5
 8000eac:	f7ff fb14 	bl	80004d8 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4690      	mov	r8, r2
 8000eb6:	4699      	mov	r9, r3
               cos(lat_1) * cos(lat_2) * sin(dlon / 2.0) * sin(dlon / 2.0);
 8000eb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ebc:	f002 fca8 	bl	8003810 <cos>
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	460d      	mov	r5, r1
 8000ec4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000ec8:	f002 fca2 	bl	8003810 <cos>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	4629      	mov	r1, r5
 8000ed4:	f7ff fb00 	bl	80004d8 <__aeabi_dmul>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4614      	mov	r4, r2
 8000ede:	461d      	mov	r5, r3
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000eec:	f7ff fc1e 	bl	800072c <__aeabi_ddiv>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f002 fcd0 	bl	800389c <sin>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4620      	mov	r0, r4
 8000f02:	4629      	mov	r1, r5
 8000f04:	f7ff fae8 	bl	80004d8 <__aeabi_dmul>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4614      	mov	r4, r2
 8000f0e:	461d      	mov	r5, r3
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f1c:	f7ff fc06 	bl	800072c <__aeabi_ddiv>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4610      	mov	r0, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	f002 fcb8 	bl	800389c <sin>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4620      	mov	r0, r4
 8000f32:	4629      	mov	r1, r5
 8000f34:	f7ff fad0 	bl	80004d8 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
    double a = sin(dlat / 2.0) * sin(dlat / 2.0) +
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	4649      	mov	r1, r9
 8000f40:	f7ff f914 	bl	800016c <__adddf3>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	e9c7 2308 	strd	r2, r3, [r7, #32]

    double c = 2.0 * atan2(sqrt(a), sqrt(1 - a));
 8000f4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f50:	f002 fd54 	bl	80039fc <sqrt>
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f5c:	f04f 0000 	mov.w	r0, #0
 8000f60:	491a      	ldr	r1, [pc, #104]	; (8000fcc <haversineDistance+0x23c>)
 8000f62:	f7ff f901 	bl	8000168 <__aeabi_dsub>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f002 fd45 	bl	80039fc <sqrt>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4620      	mov	r0, r4
 8000f78:	4629      	mov	r1, r5
 8000f7a:	f002 fcd5 	bl	8003928 <atan2>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	f7ff f8f3 	bl	800016c <__adddf3>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double distance = EARTH_RADIUS_KM * c;
 8000f8e:	a30c      	add	r3, pc, #48	; (adr r3, 8000fc0 <haversineDistance+0x230>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f98:	f7ff fa9e 	bl	80004d8 <__aeabi_dmul>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return distance;
 8000fa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	3738      	adds	r7, #56	; 0x38
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	54442d18 	.word	0x54442d18
 8000fbc:	400921fb 	.word	0x400921fb
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	40b8e300 	.word	0x40b8e300
 8000fc8:	40668000 	.word	0x40668000
 8000fcc:	3ff00000 	.word	0x3ff00000

08000fd0 <mystrcat>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void mystrcat(char *string, char c) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
	int len = strlen(string);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff f8b7 	bl	8000150 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60fb      	str	r3, [r7, #12]

	string[len] = c;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	78fa      	ldrb	r2, [r7, #3]
 8000fee:	701a      	strb	r2, [r3, #0]

	string[len+1] = '\0';
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <removeCharacter>:
		str[length - i - 1] = ('0' + num % 10);
		num /= 10;
	}
}

void removeCharacter(char *str, int i) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
    if (str == NULL || i < 0 || i >= strlen(str)) {
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d01d      	beq.n	8001050 <removeCharacter+0x4c>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db1a      	blt.n	8001050 <removeCharacter+0x4c>
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff f898 	bl	8000150 <strlen>
 8001020:	4602      	mov	r2, r0
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d913      	bls.n	8001050 <removeCharacter+0x4c>
        return;
    }

    for (; str[i] != '\0'; i++) {
 8001028:	e00b      	b.n	8001042 <removeCharacter+0x3e>
        str[i] = str[i + 1];
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	441a      	add	r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	440b      	add	r3, r1
 8001038:	7812      	ldrb	r2, [r2, #0]
 800103a:	701a      	strb	r2, [r3, #0]
    for (; str[i] != '\0'; i++) {
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1ed      	bne.n	800102a <removeCharacter+0x26>
 800104e:	e000      	b.n	8001052 <removeCharacter+0x4e>
        return;
 8001050:	bf00      	nop
    }
}
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <fixInput>:

void fixInput(char *receivedCoords) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

	for(int i=0; i<strlen(receivedCoords); i++) {
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e01a      	b.n	800109c <fixInput+0x44>
		char c = receivedCoords[i];
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	72fb      	strb	r3, [r7, #11]
		if(!isdigit(c) && c != '.' && c != ' ') {
 8001070:	7afb      	ldrb	r3, [r7, #11]
 8001072:	3301      	adds	r3, #1
 8001074:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <fixInput+0x5c>)
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	2b00      	cmp	r3, #0
 8001080:	d109      	bne.n	8001096 <fixInput+0x3e>
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	2b2e      	cmp	r3, #46	; 0x2e
 8001086:	d006      	beq.n	8001096 <fixInput+0x3e>
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	2b20      	cmp	r3, #32
 800108c:	d003      	beq.n	8001096 <fixInput+0x3e>
			removeCharacter(receivedCoords, i);
 800108e:	68f9      	ldr	r1, [r7, #12]
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ffb7 	bl	8001004 <removeCharacter>
	for(int i=0; i<strlen(receivedCoords); i++) {
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3301      	adds	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff f857 	bl	8000150 <strlen>
 80010a2:	4602      	mov	r2, r0
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d8dd      	bhi.n	8001066 <fixInput+0xe>
		}
	}
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	08005b82 	.word	0x08005b82

080010b8 <UART_SEND>:

void UART_SEND(char *message) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 100);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff f845 	bl	8000150 <strlen>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	2364      	movs	r3, #100	; 0x64
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4803      	ldr	r0, [pc, #12]	; (80010dc <UART_SEND+0x24>)
 80010d0:	f001 fd44 	bl	8002b5c <HAL_UART_Transmit>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000026c 	.word	0x2000026c

080010e0 <validCoordinates>:

int validCoordinates(char *receivedCoords) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	int countPoints = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
	for(int i=0; i<strlen(receivedCoords); i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	e00d      	b.n	800110e <validCoordinates+0x2e>
		char c = receivedCoords[i];
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	73fb      	strb	r3, [r7, #15]
		if(c == '.')
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b2e      	cmp	r3, #46	; 0x2e
 8001100:	d102      	bne.n	8001108 <validCoordinates+0x28>
			countPoints++;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
	for(int i=0; i<strlen(receivedCoords); i++) {
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	3301      	adds	r3, #1
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff f81e 	bl	8000150 <strlen>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8ea      	bhi.n	80010f2 <validCoordinates+0x12>
	}

	if(countPoints > 2)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b02      	cmp	r3, #2
 8001120:	dd01      	ble.n	8001126 <validCoordinates+0x46>
		return 0;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <validCoordinates+0x48>

	return 1;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <charToNumber>:

int charToNumber(char c) {
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	if(c == '0') return 0;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b30      	cmp	r3, #48	; 0x30
 800113e:	d101      	bne.n	8001144 <charToNumber+0x14>
 8001140:	2300      	movs	r3, #0
 8001142:	e02e      	b.n	80011a2 <charToNumber+0x72>
	if(c == '1') return 1;
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b31      	cmp	r3, #49	; 0x31
 8001148:	d101      	bne.n	800114e <charToNumber+0x1e>
 800114a:	2301      	movs	r3, #1
 800114c:	e029      	b.n	80011a2 <charToNumber+0x72>
	if(c == '2') return 2;
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b32      	cmp	r3, #50	; 0x32
 8001152:	d101      	bne.n	8001158 <charToNumber+0x28>
 8001154:	2302      	movs	r3, #2
 8001156:	e024      	b.n	80011a2 <charToNumber+0x72>
	if(c == '3') return 3;
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2b33      	cmp	r3, #51	; 0x33
 800115c:	d101      	bne.n	8001162 <charToNumber+0x32>
 800115e:	2303      	movs	r3, #3
 8001160:	e01f      	b.n	80011a2 <charToNumber+0x72>
	if(c == '4') return 4;
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b34      	cmp	r3, #52	; 0x34
 8001166:	d101      	bne.n	800116c <charToNumber+0x3c>
 8001168:	2304      	movs	r3, #4
 800116a:	e01a      	b.n	80011a2 <charToNumber+0x72>
	if(c == '5') return 5;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b35      	cmp	r3, #53	; 0x35
 8001170:	d101      	bne.n	8001176 <charToNumber+0x46>
 8001172:	2305      	movs	r3, #5
 8001174:	e015      	b.n	80011a2 <charToNumber+0x72>
	if(c == '6') return 6;
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b36      	cmp	r3, #54	; 0x36
 800117a:	d101      	bne.n	8001180 <charToNumber+0x50>
 800117c:	2306      	movs	r3, #6
 800117e:	e010      	b.n	80011a2 <charToNumber+0x72>
	if(c == '7') return 7;
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b37      	cmp	r3, #55	; 0x37
 8001184:	d101      	bne.n	800118a <charToNumber+0x5a>
 8001186:	2307      	movs	r3, #7
 8001188:	e00b      	b.n	80011a2 <charToNumber+0x72>
	if(c == '8') return 8;
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b38      	cmp	r3, #56	; 0x38
 800118e:	d101      	bne.n	8001194 <charToNumber+0x64>
 8001190:	2308      	movs	r3, #8
 8001192:	e006      	b.n	80011a2 <charToNumber+0x72>
	if(c == '9') return 9;
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b39      	cmp	r3, #57	; 0x39
 8001198:	d101      	bne.n	800119e <charToNumber+0x6e>
 800119a:	2309      	movs	r3, #9
 800119c:	e001      	b.n	80011a2 <charToNumber+0x72>
	return -1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <strToFloat>:

double strToFloat(char *str) {
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b08c      	sub	sp, #48	; 0x30
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	int counter;
	int startOfDecimals = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
	double number = 0;
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int lenBeforeDecimals = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
	int lenAfterDecimals = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]

	for(int i=0; i<strlen(str); i++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	e015      	b.n	80011fe <strToFloat+0x52>
		if(str[i] == '.') {
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b2e      	cmp	r3, #46	; 0x2e
 80011dc:	d102      	bne.n	80011e4 <strToFloat+0x38>
			startOfDecimals = 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
			continue;
 80011e2:	e009      	b.n	80011f8 <strToFloat+0x4c>
		}
		if(!startOfDecimals)
 80011e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d103      	bne.n	80011f2 <strToFloat+0x46>
			lenBeforeDecimals++;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3301      	adds	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	e002      	b.n	80011f8 <strToFloat+0x4c>
		else
			lenAfterDecimals++;
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
	for(int i=0; i<strlen(str); i++) {
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3301      	adds	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7fe ffa6 	bl	8000150 <strlen>
 8001204:	4602      	mov	r2, r0
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8e2      	bhi.n	80011d2 <strToFloat+0x26>
	}

	counter = lenAfterDecimals;
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int temp_lenBeforeDecimals = lenBeforeDecimals;
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	613b      	str	r3, [r7, #16]
	int temp_lenAfterDecimals = lenAfterDecimals;
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<strlen(str); i++) {
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e066      	b.n	80012ec <strToFloat+0x140>
		// 878.2324, lenBefore = 3 => 8 * 10^2 +7 *10^1 + 8*10^0
		if(str[i] == '.')
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b2e      	cmp	r3, #46	; 0x2e
 8001228:	d05c      	beq.n	80012e4 <strToFloat+0x138>
			continue;
		if(i<lenBeforeDecimals)
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	429a      	cmp	r2, r3
 8001230:	da2a      	bge.n	8001288 <strToFloat+0xdc>
			number += charToNumber(str[i]) * pow(10, --temp_lenBeforeDecimals);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff78 	bl	8001130 <charToNumber>
 8001240:	4603      	mov	r3, r0
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f8de 	bl	8000404 <__aeabi_i2d>
 8001248:	4604      	mov	r4, r0
 800124a:	460d      	mov	r5, r1
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	3b01      	subs	r3, #1
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	6938      	ldr	r0, [r7, #16]
 8001254:	f7ff f8d6 	bl	8000404 <__aeabi_i2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	f04f 0000 	mov.w	r0, #0
 8001260:	4929      	ldr	r1, [pc, #164]	; (8001308 <strToFloat+0x15c>)
 8001262:	f002 fb63 	bl	800392c <pow>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f933 	bl	80004d8 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800127a:	f7fe ff77 	bl	800016c <__adddf3>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001286:	e02e      	b.n	80012e6 <strToFloat+0x13a>
		else {
			// 2 => lenAfterDecimals = 4 => 2 / 10^1 == 0.2
			// 3 => lenAfterDecimals = 4 => 3 / 10^2 == 0.03
			number += charToNumber(str[i]) / pow(10, temp_lenAfterDecimals-(--counter));
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff4d 	bl	8001130 <charToNumber>
 8001296:	4603      	mov	r3, r0
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f8b3 	bl	8000404 <__aeabi_i2d>
 800129e:	4604      	mov	r4, r0
 80012a0:	460d      	mov	r5, r1
 80012a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a4:	3b01      	subs	r3, #1
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f8a8 	bl	8000404 <__aeabi_i2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	f04f 0000 	mov.w	r0, #0
 80012bc:	4912      	ldr	r1, [pc, #72]	; (8001308 <strToFloat+0x15c>)
 80012be:	f002 fb35 	bl	800392c <pow>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4620      	mov	r0, r4
 80012c8:	4629      	mov	r1, r5
 80012ca:	f7ff fa2f 	bl	800072c <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012d6:	f7fe ff49 	bl	800016c <__adddf3>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80012e2:	e000      	b.n	80012e6 <strToFloat+0x13a>
			continue;
 80012e4:	bf00      	nop
	for(int i=0; i<strlen(str); i++) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7fe ff2f 	bl	8000150 <strlen>
 80012f2:	4602      	mov	r2, r0
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d891      	bhi.n	800121e <strToFloat+0x72>
		}
	}

	return number;
 80012fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	3730      	adds	r7, #48	; 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bdb0      	pop	{r4, r5, r7, pc}
 8001308:	40240000 	.word	0x40240000

0800130c <extractCoordinates>:

void extractCoordinates(char *receivedCoords) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b08e      	sub	sp, #56	; 0x38
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	char latitude[16], longitude[16];
	int idx = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
	int longitudeInput = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	633b      	str	r3, [r7, #48]	; 0x30

	receivedCoords[strlen(receivedCoords)-1] = '\0'; // drop *
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7fe ff17 	bl	8000150 <strlen>
 8001322:	4603      	mov	r3, r0
 8001324:	3b01      	subs	r3, #1
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<strlen(receivedCoords); i++) {
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001332:	e02d      	b.n	8001390 <extractCoordinates+0x84>
		if(receivedCoords[i] != ' ') {
 8001334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b20      	cmp	r3, #32
 800133e:	d01a      	beq.n	8001376 <extractCoordinates+0x6a>
			if(!longitudeInput)
 8001340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10b      	bne.n	800135e <extractCoordinates+0x52>
				latitude[idx++] = receivedCoords[i];
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	441a      	add	r2, r3
 800134c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134e:	1c59      	adds	r1, r3, #1
 8001350:	6379      	str	r1, [r7, #52]	; 0x34
 8001352:	7812      	ldrb	r2, [r2, #0]
 8001354:	3338      	adds	r3, #56	; 0x38
 8001356:	443b      	add	r3, r7
 8001358:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800135c:	e015      	b.n	800138a <extractCoordinates+0x7e>
			else
				longitude[idx++] = receivedCoords[i];
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	441a      	add	r2, r3
 8001364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001366:	1c59      	adds	r1, r3, #1
 8001368:	6379      	str	r1, [r7, #52]	; 0x34
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	3338      	adds	r3, #56	; 0x38
 800136e:	443b      	add	r3, r7
 8001370:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8001374:	e009      	b.n	800138a <extractCoordinates+0x7e>
		}
		else {
			latitude[idx] = '\0';
 8001376:	f107 021c 	add.w	r2, r7, #28
 800137a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137c:	4413      	add	r3, r2
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
			longitudeInput = 1;
 8001382:	2301      	movs	r3, #1
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
			idx = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=0; i<strlen(receivedCoords); i++) {
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	3301      	adds	r3, #1
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7fe fedd 	bl	8000150 <strlen>
 8001396:	4602      	mov	r2, r0
 8001398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139a:	429a      	cmp	r2, r3
 800139c:	d8ca      	bhi.n	8001334 <extractCoordinates+0x28>
		}
	}

	longitude[idx] = '\0';
 800139e:	f107 020c 	add.w	r2, r7, #12
 80013a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a4:	4413      	add	r3, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]

	lat_2 = strToFloat(latitude);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fefc 	bl	80011ac <strToFloat>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4908      	ldr	r1, [pc, #32]	; (80013dc <extractCoordinates+0xd0>)
 80013ba:	e9c1 2300 	strd	r2, r3, [r1]
	lon_2 = strToFloat(longitude);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fef2 	bl	80011ac <strToFloat>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4904      	ldr	r1, [pc, #16]	; (80013e0 <extractCoordinates+0xd4>)
 80013ce:	e9c1 2300 	strd	r2, r3, [r1]
}
 80013d2:	bf00      	nop
 80013d4:	3738      	adds	r7, #56	; 0x38
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000010 	.word	0x20000010
 80013e0:	20000018 	.word	0x20000018

080013e4 <reverse>:

void reverse(char* str, int len)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80013f8:	e018      	b.n	800142c <reverse+0x48>
        temp = str[i];
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	441a      	add	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	440b      	add	r3, r1
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
        i++;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
        j--;
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	3b01      	subs	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbe2      	blt.n	80013fa <reverse+0x16>
    }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <intToStr2>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr2(int x, char str[], int d)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
    while (x) {
 8001450:	e01d      	b.n	800148e <intToStr2+0x4e>
        str[i++] = (x % 10) + '0';
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <intToStr2+0x8c>)
 8001456:	fb83 1302 	smull	r1, r3, r3, r2
 800145a:	1099      	asrs	r1, r3, #2
 800145c:	17d3      	asrs	r3, r2, #31
 800145e:	1ac9      	subs	r1, r1, r3
 8001460:	460b      	mov	r3, r1
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	1ad1      	subs	r1, r2, r3
 800146a:	b2ca      	uxtb	r2, r1
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	1c59      	adds	r1, r3, #1
 8001470:	6179      	str	r1, [r7, #20]
 8001472:	4619      	mov	r1, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	440b      	add	r3, r1
 8001478:	3230      	adds	r2, #48	; 0x30
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <intToStr2+0x8c>)
 8001482:	fb82 1203 	smull	r1, r2, r2, r3
 8001486:	1092      	asrs	r2, r2, #2
 8001488:	17db      	asrs	r3, r3, #31
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	60fb      	str	r3, [r7, #12]
    while (x) {
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1de      	bne.n	8001452 <intToStr2+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001494:	e007      	b.n	80014a6 <intToStr2+0x66>
        str[i++] = '0';
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	617a      	str	r2, [r7, #20]
 800149c:	461a      	mov	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	4413      	add	r3, r2
 80014a2:	2230      	movs	r2, #48	; 0x30
 80014a4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dbf3      	blt.n	8001496 <intToStr2+0x56>

    reverse(str, i);
 80014ae:	6979      	ldr	r1, [r7, #20]
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f7ff ff97 	bl	80013e4 <reverse>
    str[i] = '\0';
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	4413      	add	r3, r2
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
    return i;
 80014c0:	697b      	ldr	r3, [r7, #20]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	66666667 	.word	0x66666667

080014d0 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff fc31 	bl	8000d44 <__aeabi_f2iz>
 80014e2:	4603      	mov	r3, r0
 80014e4:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 80014e6:	69f8      	ldr	r0, [r7, #28]
 80014e8:	f7ff fbd8 	bl	8000c9c <__aeabi_i2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff fb1d 	bl	8000b30 <__aeabi_fsub>
 80014f6:	4603      	mov	r3, r0
 80014f8:	61bb      	str	r3, [r7, #24]

    // convert integer part to string
    int i = intToStr2(ipart, res, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	69f8      	ldr	r0, [r7, #28]
 8001500:	f7ff ff9e 	bl	8001440 <intToStr2>
 8001504:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d02c      	beq.n	8001566 <ftoa+0x96>
        res[i] = '.'; // add dot
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	4413      	add	r3, r2
 8001512:	222e      	movs	r2, #46	; 0x2e
 8001514:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8001516:	69b8      	ldr	r0, [r7, #24]
 8001518:	f7fe ff86 	bl	8000428 <__aeabi_f2d>
 800151c:	4604      	mov	r4, r0
 800151e:	460d      	mov	r5, r1
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7fe ff6f 	bl	8000404 <__aeabi_i2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	f04f 0000 	mov.w	r0, #0
 800152e:	4910      	ldr	r1, [pc, #64]	; (8001570 <ftoa+0xa0>)
 8001530:	f002 f9fc 	bl	800392c <pow>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe ffcc 	bl	80004d8 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fa9e 	bl	8000a88 <__aeabi_d2f>
 800154c:	4603      	mov	r3, r0
 800154e:	61bb      	str	r3, [r7, #24]

        intToStr2((int)fpart, res + i + 1, afterpoint);
 8001550:	69b8      	ldr	r0, [r7, #24]
 8001552:	f7ff fbf7 	bl	8000d44 <__aeabi_f2iz>
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4413      	add	r3, r2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff ff6d 	bl	8001440 <intToStr2>
    }
}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bdb0      	pop	{r4, r5, r7, pc}
 800156e:	bf00      	nop
 8001570:	40240000 	.word	0x40240000

08001574 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001574:	b598      	push	{r3, r4, r7, lr}
 8001576:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001578:	f000 faae 	bl	8001ad8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800157c:	f000 f85e 	bl	800163c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001580:	f000 f8c2 	bl	8001708 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001584:	f000 f896 	bl	80016b4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	4925      	ldr	r1, [pc, #148]	; (8001620 <main+0xac>)
 800158c:	4825      	ldr	r0, [pc, #148]	; (8001624 <main+0xb0>)
 800158e:	f001 fb68 	bl	8002c62 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if(!writeOn) {
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <main+0xb4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d130      	bne.n	80015fc <main+0x88>
			HAL_UART_Transmit(&huart1, (uint8_t*)listOfGpsData[0], strlen(listOfGpsData[0]), 100);
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <main+0xb8>)
 800159c:	681c      	ldr	r4, [r3, #0]
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <main+0xb8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe fdd4 	bl	8000150 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	2364      	movs	r3, #100	; 0x64
 80015ae:	4621      	mov	r1, r4
 80015b0:	481c      	ldr	r0, [pc, #112]	; (8001624 <main+0xb0>)
 80015b2:	f001 fad3 	bl	8002b5c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)listOfGpsData[1], strlen(listOfGpsData[1]), 100);
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <main+0xb8>)
 80015b8:	685c      	ldr	r4, [r3, #4]
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <main+0xb8>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe fdc6 	bl	8000150 <strlen>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	4621      	mov	r1, r4
 80015cc:	4815      	ldr	r0, [pc, #84]	; (8001624 <main+0xb0>)
 80015ce:	f001 fac5 	bl	8002b5c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)listOfGpsData[2], strlen(listOfGpsData[2]), 100);
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <main+0xb8>)
 80015d4:	689c      	ldr	r4, [r3, #8]
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <main+0xb8>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe fdb8 	bl	8000150 <strlen>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	4621      	mov	r1, r4
 80015e8:	480e      	ldr	r0, [pc, #56]	; (8001624 <main+0xb0>)
 80015ea:	f001 fab7 	bl	8002b5c <HAL_UART_Transmit>
			HAL_Delay(1000);
 80015ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015f2:	f000 fad3 	bl	8001b9c <HAL_Delay>
			writeOn = 1;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <main+0xb4>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
		}
		if(writeOn == 1) {
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <main+0xb4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d1c6      	bne.n	8001592 <main+0x1e>
			UART_SEND(msg_CoordinateInputText);
 8001604:	480a      	ldr	r0, [pc, #40]	; (8001630 <main+0xbc>)
 8001606:	f7ff fd57 	bl	80010b8 <UART_SEND>
			UART_SEND(msg_CoordinateInputTextFormat);
 800160a:	480a      	ldr	r0, [pc, #40]	; (8001634 <main+0xc0>)
 800160c:	f7ff fd54 	bl	80010b8 <UART_SEND>
			UART_SEND(msg_Hint);
 8001610:	4809      	ldr	r0, [pc, #36]	; (8001638 <main+0xc4>)
 8001612:	f7ff fd51 	bl	80010b8 <UART_SEND>
			writeOn = 2;
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <main+0xb4>)
 8001618:	2202      	movs	r2, #2
 800161a:	601a      	str	r2, [r3, #0]
		if(!writeOn) {
 800161c:	e7b9      	b.n	8001592 <main+0x1e>
 800161e:	bf00      	nop
 8001620:	200002e8 	.word	0x200002e8
 8001624:	2000026c 	.word	0x2000026c
 8001628:	200002b4 	.word	0x200002b4
 800162c:	20000020 	.word	0x20000020
 8001630:	2000005c 	.word	0x2000005c
 8001634:	20000088 	.word	0x20000088
 8001638:	200000ac 	.word	0x200000ac

0800163c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b090      	sub	sp, #64	; 0x40
 8001640:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001642:	f107 0318 	add.w	r3, r7, #24
 8001646:	2228      	movs	r2, #40	; 0x28
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f002 f8d8 	bl	8003800 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001662:	2301      	movs	r3, #1
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001666:	2310      	movs	r3, #16
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800166a:	2300      	movs	r3, #0
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800166e:	f107 0318 	add.w	r3, r7, #24
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fe12 	bl	800229c <HAL_RCC_OscConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x46>
		Error_Handler();
 800167e:	f000 f951 	bl	8001924 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001682:	230f      	movs	r3, #15
 8001684:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f001 f880 	bl	80027a0 <HAL_RCC_ClockConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x6e>
		Error_Handler();
 80016a6:	f000 f93d 	bl	8001924 <Error_Handler>
	}
}
 80016aa:	bf00      	nop
 80016ac:	3740      	adds	r7, #64	; 0x40
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_USART1_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016ec:	f001 f9e6 	bl	8002abc <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80016f6:	f000 f915 	bl	8001924 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000026c 	.word	0x2000026c
 8001704:	40013800 	.word	0x40013800

08001708 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800170e:	f107 0310 	add.w	r3, r7, #16
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <MX_GPIO_Init+0x90>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <MX_GPIO_Init+0x90>)
 8001722:	f043 0310 	orr.w	r3, r3, #16
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_GPIO_Init+0x90>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_GPIO_Init+0x90>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <MX_GPIO_Init+0x90>)
 800173a:	f043 0320 	orr.w	r3, r3, #32
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <MX_GPIO_Init+0x90>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_GPIO_Init+0x90>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a11      	ldr	r2, [pc, #68]	; (8001798 <MX_GPIO_Init+0x90>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_GPIO_Init+0x90>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176a:	480c      	ldr	r0, [pc, #48]	; (800179c <MX_GPIO_Init+0x94>)
 800176c:	f000 fd7e 	bl	800226c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OUTPUT_Pin */
	GPIO_InitStruct.Pin = OUTPUT_Pin;
 8001770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001774:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2302      	movs	r3, #2
 8001780:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	4619      	mov	r1, r3
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <MX_GPIO_Init+0x94>)
 800178a:	f000 fbeb 	bl	8001f64 <HAL_GPIO_Init>

}
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	40011000 	.word	0x40011000

080017a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017a4:	b08c      	sub	sp, #48	; 0x30
 80017a6:	af04      	add	r7, sp, #16
 80017a8:	6078      	str	r0, [r7, #4]

	if(confirmationInput) {
 80017aa:	4b4e      	ldr	r3, [pc, #312]	; (80018e4 <HAL_UART_RxCpltCallback+0x144>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d058      	beq.n	8001864 <HAL_UART_RxCpltCallback+0xc4>
		if((char)UART1_rxBuffer[0] == '1') {
 80017b2:	4b4d      	ldr	r3, [pc, #308]	; (80018e8 <HAL_UART_RxCpltCallback+0x148>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b31      	cmp	r3, #49	; 0x31
 80017b8:	d142      	bne.n	8001840 <HAL_UART_RxCpltCallback+0xa0>
			char buffer[20];
			UART_SEND(msg_Success);
 80017ba:	484c      	ldr	r0, [pc, #304]	; (80018ec <HAL_UART_RxCpltCallback+0x14c>)
 80017bc:	f7ff fc7c 	bl	80010b8 <UART_SEND>
			extractCoordinates(receivedCoordinates);
 80017c0:	484b      	ldr	r0, [pc, #300]	; (80018f0 <HAL_UART_RxCpltCallback+0x150>)
 80017c2:	f7ff fda3 	bl	800130c <extractCoordinates>
			distance = haversineDistance(lat_1, lon_1, lat_2, lon_2);
 80017c6:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <HAL_UART_RxCpltCallback+0x154>)
 80017c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80017cc:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <HAL_UART_RxCpltCallback+0x158>)
 80017ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80017d2:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <HAL_UART_RxCpltCallback+0x15c>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	4949      	ldr	r1, [pc, #292]	; (8001900 <HAL_UART_RxCpltCallback+0x160>)
 80017da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80017e2:	e9cd 2300 	strd	r2, r3, [sp]
 80017e6:	4642      	mov	r2, r8
 80017e8:	464b      	mov	r3, r9
 80017ea:	4620      	mov	r0, r4
 80017ec:	4629      	mov	r1, r5
 80017ee:	f7ff facf 	bl	8000d90 <haversineDistance>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4943      	ldr	r1, [pc, #268]	; (8001904 <HAL_UART_RxCpltCallback+0x164>)
 80017f8:	e9c1 2300 	strd	r2, r3, [r1]
			ftoa(distance, buffer, 2);
 80017fc:	4b41      	ldr	r3, [pc, #260]	; (8001904 <HAL_UART_RxCpltCallback+0x164>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f93f 	bl	8000a88 <__aeabi_d2f>
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	2202      	movs	r2, #2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff fe5d 	bl	80014d0 <ftoa>
			UART_SEND(NEW_LINE);
 8001816:	483c      	ldr	r0, [pc, #240]	; (8001908 <HAL_UART_RxCpltCallback+0x168>)
 8001818:	f7ff fc4e 	bl	80010b8 <UART_SEND>
			UART_SEND(msg_DistanceInfo);
 800181c:	483b      	ldr	r0, [pc, #236]	; (800190c <HAL_UART_RxCpltCallback+0x16c>)
 800181e:	f7ff fc4b 	bl	80010b8 <UART_SEND>
			UART_SEND(NEW_LINE);
 8001822:	4839      	ldr	r0, [pc, #228]	; (8001908 <HAL_UART_RxCpltCallback+0x168>)
 8001824:	f7ff fc48 	bl	80010b8 <UART_SEND>
			UART_SEND(buffer);
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fc43 	bl	80010b8 <UART_SEND>
			UART_SEND("km");
 8001832:	4837      	ldr	r0, [pc, #220]	; (8001910 <HAL_UART_RxCpltCallback+0x170>)
 8001834:	f7ff fc40 	bl	80010b8 <UART_SEND>
			UART_SEND(NEW_LINE);
 8001838:	4833      	ldr	r0, [pc, #204]	; (8001908 <HAL_UART_RxCpltCallback+0x168>)
 800183a:	f7ff fc3d 	bl	80010b8 <UART_SEND>
				HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
				HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, GPIO_PIN_RESET);
			}
		}
	}
}
 800183e:	e04b      	b.n	80018d8 <HAL_UART_RxCpltCallback+0x138>
			UART_SEND(NEW_LINE);
 8001840:	4831      	ldr	r0, [pc, #196]	; (8001908 <HAL_UART_RxCpltCallback+0x168>)
 8001842:	f7ff fc39 	bl	80010b8 <UART_SEND>
			UART_SEND(msg_InvalidCoordinates);
 8001846:	4833      	ldr	r0, [pc, #204]	; (8001914 <HAL_UART_RxCpltCallback+0x174>)
 8001848:	f7ff fc36 	bl	80010b8 <UART_SEND>
			receivedCoordinates[0] = '\0';
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_UART_RxCpltCallback+0x150>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
			confirmationInput = 0;
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <HAL_UART_RxCpltCallback+0x144>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 8001858:	2201      	movs	r2, #1
 800185a:	4923      	ldr	r1, [pc, #140]	; (80018e8 <HAL_UART_RxCpltCallback+0x148>)
 800185c:	482e      	ldr	r0, [pc, #184]	; (8001918 <HAL_UART_RxCpltCallback+0x178>)
 800185e:	f001 fa00 	bl	8002c62 <HAL_UART_Receive_IT>
}
 8001862:	e039      	b.n	80018d8 <HAL_UART_RxCpltCallback+0x138>
		if((char)UART1_rxBuffer[0] != '*') {
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_UART_RxCpltCallback+0x148>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b2a      	cmp	r3, #42	; 0x2a
 800186a:	d00b      	beq.n	8001884 <HAL_UART_RxCpltCallback+0xe4>
			mystrcat(receivedCoordinates, (char)UART1_rxBuffer[0]);
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <HAL_UART_RxCpltCallback+0x148>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	481f      	ldr	r0, [pc, #124]	; (80018f0 <HAL_UART_RxCpltCallback+0x150>)
 8001874:	f7ff fbac 	bl	8000fd0 <mystrcat>
			HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 8001878:	2201      	movs	r2, #1
 800187a:	491b      	ldr	r1, [pc, #108]	; (80018e8 <HAL_UART_RxCpltCallback+0x148>)
 800187c:	4826      	ldr	r0, [pc, #152]	; (8001918 <HAL_UART_RxCpltCallback+0x178>)
 800187e:	f001 f9f0 	bl	8002c62 <HAL_UART_Receive_IT>
}
 8001882:	e029      	b.n	80018d8 <HAL_UART_RxCpltCallback+0x138>
			if(!validCoordinates(receivedCoordinates)) {
 8001884:	481a      	ldr	r0, [pc, #104]	; (80018f0 <HAL_UART_RxCpltCallback+0x150>)
 8001886:	f7ff fc2b 	bl	80010e0 <validCoordinates>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d106      	bne.n	800189e <HAL_UART_RxCpltCallback+0xfe>
				UART_SEND(NEW_LINE);
 8001890:	481d      	ldr	r0, [pc, #116]	; (8001908 <HAL_UART_RxCpltCallback+0x168>)
 8001892:	f7ff fc11 	bl	80010b8 <UART_SEND>
				UART_SEND(msg_InvalidCoordinates);
 8001896:	481f      	ldr	r0, [pc, #124]	; (8001914 <HAL_UART_RxCpltCallback+0x174>)
 8001898:	f7ff fc0e 	bl	80010b8 <UART_SEND>
}
 800189c:	e01c      	b.n	80018d8 <HAL_UART_RxCpltCallback+0x138>
				fixInput(receivedCoordinates);
 800189e:	4814      	ldr	r0, [pc, #80]	; (80018f0 <HAL_UART_RxCpltCallback+0x150>)
 80018a0:	f7ff fbda 	bl	8001058 <fixInput>
				UART_SEND(msg_KindQuestion);
 80018a4:	481d      	ldr	r0, [pc, #116]	; (800191c <HAL_UART_RxCpltCallback+0x17c>)
 80018a6:	f7ff fc07 	bl	80010b8 <UART_SEND>
				UART_SEND(NEW_LINE);
 80018aa:	4817      	ldr	r0, [pc, #92]	; (8001908 <HAL_UART_RxCpltCallback+0x168>)
 80018ac:	f7ff fc04 	bl	80010b8 <UART_SEND>
				UART_SEND(receivedCoordinates);
 80018b0:	480f      	ldr	r0, [pc, #60]	; (80018f0 <HAL_UART_RxCpltCallback+0x150>)
 80018b2:	f7ff fc01 	bl	80010b8 <UART_SEND>
				UART_SEND(NEW_LINE);
 80018b6:	4814      	ldr	r0, [pc, #80]	; (8001908 <HAL_UART_RxCpltCallback+0x168>)
 80018b8:	f7ff fbfe 	bl	80010b8 <UART_SEND>
				confirmationInput = 1;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_UART_RxCpltCallback+0x144>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 80018c2:	2201      	movs	r2, #1
 80018c4:	4908      	ldr	r1, [pc, #32]	; (80018e8 <HAL_UART_RxCpltCallback+0x148>)
 80018c6:	4814      	ldr	r0, [pc, #80]	; (8001918 <HAL_UART_RxCpltCallback+0x178>)
 80018c8:	f001 f9cb 	bl	8002c62 <HAL_UART_Receive_IT>
				HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d2:	4813      	ldr	r0, [pc, #76]	; (8001920 <HAL_UART_RxCpltCallback+0x180>)
 80018d4:	f000 fcca 	bl	800226c <HAL_GPIO_WritePin>
}
 80018d8:	bf00      	nop
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018e2:	bf00      	nop
 80018e4:	200002b8 	.word	0x200002b8
 80018e8:	200002e8 	.word	0x200002e8
 80018ec:	20000154 	.word	0x20000154
 80018f0:	200002c8 	.word	0x200002c8
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000010 	.word	0x20000010
 8001900:	20000018 	.word	0x20000018
 8001904:	200002c0 	.word	0x200002c0
 8001908:	08005b50 	.word	0x08005b50
 800190c:	200001a4 	.word	0x200001a4
 8001910:	08005b54 	.word	0x08005b54
 8001914:	2000002c 	.word	0x2000002c
 8001918:	2000026c 	.word	0x2000026c
 800191c:	20000108 	.word	0x20000108
 8001920:	40011000 	.word	0x40011000

08001924 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800192c:	e7fe      	b.n	800192c <Error_Handler+0x8>
	...

08001930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_MspInit+0x40>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <HAL_MspInit+0x40>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6193      	str	r3, [r2, #24]
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_MspInit+0x40>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_MspInit+0x40>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_MspInit+0x40>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	61d3      	str	r3, [r2, #28]
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_MspInit+0x40>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	40021000 	.word	0x40021000

08001974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a20      	ldr	r2, [pc, #128]	; (8001a10 <HAL_UART_MspInit+0x9c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d139      	bne.n	8001a08 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <HAL_UART_MspInit+0xa0>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a1e      	ldr	r2, [pc, #120]	; (8001a14 <HAL_UART_MspInit+0xa0>)
 800199a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <HAL_UART_MspInit+0xa0>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_UART_MspInit+0xa0>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <HAL_UART_MspInit+0xa0>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <HAL_UART_MspInit+0xa0>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	4619      	mov	r1, r3
 80019d8:	480f      	ldr	r0, [pc, #60]	; (8001a18 <HAL_UART_MspInit+0xa4>)
 80019da:	f000 fac3 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4619      	mov	r1, r3
 80019f2:	4809      	ldr	r0, [pc, #36]	; (8001a18 <HAL_UART_MspInit+0xa4>)
 80019f4:	f000 fab6 	bl	8001f64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	2025      	movs	r0, #37	; 0x25
 80019fe:	f000 f9c8 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a02:	2025      	movs	r0, #37	; 0x25
 8001a04:	f000 f9e1 	bl	8001dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a08:	bf00      	nop
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40013800 	.word	0x40013800
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010800 	.word	0x40010800

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <NMI_Handler+0x4>

08001a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <MemManage_Handler+0x4>

08001a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a62:	f000 f87f 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <USART1_IRQHandler+0x10>)
 8001a72:	f001 f91b 	bl	8002cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000026c 	.word	0x2000026c

08001a80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a8c:	f7ff fff8 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a90:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a92:	490c      	ldr	r1, [pc, #48]	; (8001ac4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a94:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aa8:	4c09      	ldr	r4, [pc, #36]	; (8001ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f001 fe7f 	bl	80037b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aba:	f7ff fd5b 	bl	8001574 <main>
  bx lr
 8001abe:	4770      	bx	lr
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8001ac8:	08005f08 	.word	0x08005f08
  ldr r2, =_sbss
 8001acc:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8001ad0:	2000030c 	.word	0x2000030c

08001ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC1_2_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_Init+0x28>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_Init+0x28>)
 8001ae2:	f043 0310 	orr.w	r3, r3, #16
 8001ae6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae8:	2003      	movs	r0, #3
 8001aea:	f000 f947 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aee:	200f      	movs	r0, #15
 8001af0:	f000 f808 	bl	8001b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af4:	f7ff ff1c 	bl	8001930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40022000 	.word	0x40022000

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_InitTick+0x54>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x58>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f95f 	bl	8001de6 <HAL_SYSTICK_Config>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00e      	b.n	8001b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b0f      	cmp	r3, #15
 8001b36:	d80a      	bhi.n	8001b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f000 f927 	bl	8001d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b44:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <HAL_InitTick+0x5c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e000      	b.n	8001b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200001dc 	.word	0x200001dc
 8001b5c:	200001e4 	.word	0x200001e4
 8001b60:	200001e0 	.word	0x200001e0

08001b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_IncTick+0x1c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_IncTick+0x20>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <HAL_IncTick+0x20>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	200001e4 	.word	0x200001e4
 8001b84:	20000308 	.word	0x20000308

08001b88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b02      	ldr	r3, [pc, #8]	; (8001b98 <HAL_GetTick+0x10>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	20000308 	.word	0x20000308

08001b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba4:	f7ff fff0 	bl	8001b88 <HAL_GetTick>
 8001ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d005      	beq.n	8001bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_Delay+0x44>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc2:	bf00      	nop
 8001bc4:	f7ff ffe0 	bl	8001b88 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d8f7      	bhi.n	8001bc4 <HAL_Delay+0x28>
  {
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200001e4 	.word	0x200001e4

08001be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0b      	blt.n	8001c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4906      	ldr	r1, [pc, #24]	; (8001c7c <__NVIC_EnableIRQ+0x34>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100

08001c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	db0a      	blt.n	8001caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	490c      	ldr	r1, [pc, #48]	; (8001ccc <__NVIC_SetPriority+0x4c>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca8:	e00a      	b.n	8001cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4908      	ldr	r1, [pc, #32]	; (8001cd0 <__NVIC_SetPriority+0x50>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	761a      	strb	r2, [r3, #24]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f1c3 0307 	rsb	r3, r3, #7
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	bf28      	it	cs
 8001cf2:	2304      	movcs	r3, #4
 8001cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d902      	bls.n	8001d04 <NVIC_EncodePriority+0x30>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3b03      	subs	r3, #3
 8001d02:	e000      	b.n	8001d06 <NVIC_EncodePriority+0x32>
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	401a      	ands	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	4313      	orrs	r3, r2
         );
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d48:	d301      	bcc.n	8001d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00f      	b.n	8001d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <SysTick_Config+0x40>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d56:	210f      	movs	r1, #15
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f7ff ff90 	bl	8001c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <SysTick_Config+0x40>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <SysTick_Config+0x40>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff2d 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da4:	f7ff ff42 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	6978      	ldr	r0, [r7, #20]
 8001db0:	f7ff ff90 	bl	8001cd4 <NVIC_EncodePriority>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff5f 	bl	8001c80 <__NVIC_SetPriority>
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff35 	bl	8001c48 <__NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffa2 	bl	8001d38 <SysTick_Config>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d008      	beq.n	8001e28 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2204      	movs	r2, #4
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e020      	b.n	8001e6a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 020e 	bic.w	r2, r2, #14
 8001e36:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d005      	beq.n	8001e98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2204      	movs	r2, #4
 8001e90:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
 8001e96:	e051      	b.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 020e 	bic.w	r2, r2, #14
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <HAL_DMA_Abort_IT+0xd4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d029      	beq.n	8001f16 <HAL_DMA_Abort_IT+0xa2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <HAL_DMA_Abort_IT+0xd8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d022      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x9e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <HAL_DMA_Abort_IT+0xdc>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01a      	beq.n	8001f0c <HAL_DMA_Abort_IT+0x98>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <HAL_DMA_Abort_IT+0xe0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d012      	beq.n	8001f06 <HAL_DMA_Abort_IT+0x92>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <HAL_DMA_Abort_IT+0xe4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00a      	beq.n	8001f00 <HAL_DMA_Abort_IT+0x8c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1b      	ldr	r2, [pc, #108]	; (8001f5c <HAL_DMA_Abort_IT+0xe8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d102      	bne.n	8001efa <HAL_DMA_Abort_IT+0x86>
 8001ef4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ef8:	e00e      	b.n	8001f18 <HAL_DMA_Abort_IT+0xa4>
 8001efa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001efe:	e00b      	b.n	8001f18 <HAL_DMA_Abort_IT+0xa4>
 8001f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f04:	e008      	b.n	8001f18 <HAL_DMA_Abort_IT+0xa4>
 8001f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0a:	e005      	b.n	8001f18 <HAL_DMA_Abort_IT+0xa4>
 8001f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f10:	e002      	b.n	8001f18 <HAL_DMA_Abort_IT+0xa4>
 8001f12:	2310      	movs	r3, #16
 8001f14:	e000      	b.n	8001f18 <HAL_DMA_Abort_IT+0xa4>
 8001f16:	2301      	movs	r3, #1
 8001f18:	4a11      	ldr	r2, [pc, #68]	; (8001f60 <HAL_DMA_Abort_IT+0xec>)
 8001f1a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
    } 
  }
  return status;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40020008 	.word	0x40020008
 8001f4c:	4002001c 	.word	0x4002001c
 8001f50:	40020030 	.word	0x40020030
 8001f54:	40020044 	.word	0x40020044
 8001f58:	40020058 	.word	0x40020058
 8001f5c:	4002006c 	.word	0x4002006c
 8001f60:	40020000 	.word	0x40020000

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f76:	e169      	b.n	800224c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	f040 8158 	bne.w	8002246 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4a9a      	ldr	r2, [pc, #616]	; (8002204 <HAL_GPIO_Init+0x2a0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d05e      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fa0:	4a98      	ldr	r2, [pc, #608]	; (8002204 <HAL_GPIO_Init+0x2a0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d875      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fa6:	4a98      	ldr	r2, [pc, #608]	; (8002208 <HAL_GPIO_Init+0x2a4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d058      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fac:	4a96      	ldr	r2, [pc, #600]	; (8002208 <HAL_GPIO_Init+0x2a4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d86f      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fb2:	4a96      	ldr	r2, [pc, #600]	; (800220c <HAL_GPIO_Init+0x2a8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d052      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fb8:	4a94      	ldr	r2, [pc, #592]	; (800220c <HAL_GPIO_Init+0x2a8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d869      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fbe:	4a94      	ldr	r2, [pc, #592]	; (8002210 <HAL_GPIO_Init+0x2ac>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d04c      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fc4:	4a92      	ldr	r2, [pc, #584]	; (8002210 <HAL_GPIO_Init+0x2ac>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d863      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fca:	4a92      	ldr	r2, [pc, #584]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d046      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fd0:	4a90      	ldr	r2, [pc, #576]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d85d      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fd6:	2b12      	cmp	r3, #18
 8001fd8:	d82a      	bhi.n	8002030 <HAL_GPIO_Init+0xcc>
 8001fda:	2b12      	cmp	r3, #18
 8001fdc:	d859      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <HAL_GPIO_Init+0x80>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	0800205f 	.word	0x0800205f
 8001fe8:	08002039 	.word	0x08002039
 8001fec:	0800204b 	.word	0x0800204b
 8001ff0:	0800208d 	.word	0x0800208d
 8001ff4:	08002093 	.word	0x08002093
 8001ff8:	08002093 	.word	0x08002093
 8001ffc:	08002093 	.word	0x08002093
 8002000:	08002093 	.word	0x08002093
 8002004:	08002093 	.word	0x08002093
 8002008:	08002093 	.word	0x08002093
 800200c:	08002093 	.word	0x08002093
 8002010:	08002093 	.word	0x08002093
 8002014:	08002093 	.word	0x08002093
 8002018:	08002093 	.word	0x08002093
 800201c:	08002093 	.word	0x08002093
 8002020:	08002093 	.word	0x08002093
 8002024:	08002093 	.word	0x08002093
 8002028:	08002041 	.word	0x08002041
 800202c:	08002055 	.word	0x08002055
 8002030:	4a79      	ldr	r2, [pc, #484]	; (8002218 <HAL_GPIO_Init+0x2b4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002036:	e02c      	b.n	8002092 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	623b      	str	r3, [r7, #32]
          break;
 800203e:	e029      	b.n	8002094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	3304      	adds	r3, #4
 8002046:	623b      	str	r3, [r7, #32]
          break;
 8002048:	e024      	b.n	8002094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	3308      	adds	r3, #8
 8002050:	623b      	str	r3, [r7, #32]
          break;
 8002052:	e01f      	b.n	8002094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	330c      	adds	r3, #12
 800205a:	623b      	str	r3, [r7, #32]
          break;
 800205c:	e01a      	b.n	8002094 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002066:	2304      	movs	r3, #4
 8002068:	623b      	str	r3, [r7, #32]
          break;
 800206a:	e013      	b.n	8002094 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002074:	2308      	movs	r3, #8
 8002076:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	611a      	str	r2, [r3, #16]
          break;
 800207e:	e009      	b.n	8002094 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002080:	2308      	movs	r3, #8
 8002082:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	615a      	str	r2, [r3, #20]
          break;
 800208a:	e003      	b.n	8002094 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
          break;
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x130>
          break;
 8002092:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2bff      	cmp	r3, #255	; 0xff
 8002098:	d801      	bhi.n	800209e <HAL_GPIO_Init+0x13a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	e001      	b.n	80020a2 <HAL_GPIO_Init+0x13e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d802      	bhi.n	80020b0 <HAL_GPIO_Init+0x14c>
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	e002      	b.n	80020b6 <HAL_GPIO_Init+0x152>
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	3b08      	subs	r3, #8
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	210f      	movs	r1, #15
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	401a      	ands	r2, r3
 80020c8:	6a39      	ldr	r1, [r7, #32]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	431a      	orrs	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80b1 	beq.w	8002246 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020e4:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_GPIO_Init+0x2b8>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a4c      	ldr	r2, [pc, #304]	; (800221c <HAL_GPIO_Init+0x2b8>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_GPIO_Init+0x2b8>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020fc:	4a48      	ldr	r2, [pc, #288]	; (8002220 <HAL_GPIO_Init+0x2bc>)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3302      	adds	r3, #2
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_GPIO_Init+0x2c0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d013      	beq.n	8002150 <HAL_GPIO_Init+0x1ec>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3f      	ldr	r2, [pc, #252]	; (8002228 <HAL_GPIO_Init+0x2c4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00d      	beq.n	800214c <HAL_GPIO_Init+0x1e8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3e      	ldr	r2, [pc, #248]	; (800222c <HAL_GPIO_Init+0x2c8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d007      	beq.n	8002148 <HAL_GPIO_Init+0x1e4>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3d      	ldr	r2, [pc, #244]	; (8002230 <HAL_GPIO_Init+0x2cc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d101      	bne.n	8002144 <HAL_GPIO_Init+0x1e0>
 8002140:	2303      	movs	r3, #3
 8002142:	e006      	b.n	8002152 <HAL_GPIO_Init+0x1ee>
 8002144:	2304      	movs	r3, #4
 8002146:	e004      	b.n	8002152 <HAL_GPIO_Init+0x1ee>
 8002148:	2302      	movs	r3, #2
 800214a:	e002      	b.n	8002152 <HAL_GPIO_Init+0x1ee>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_GPIO_Init+0x1ee>
 8002150:	2300      	movs	r3, #0
 8002152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002154:	f002 0203 	and.w	r2, r2, #3
 8002158:	0092      	lsls	r2, r2, #2
 800215a:	4093      	lsls	r3, r2
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002162:	492f      	ldr	r1, [pc, #188]	; (8002220 <HAL_GPIO_Init+0x2bc>)
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800217c:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	492c      	ldr	r1, [pc, #176]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	43db      	mvns	r3, r3
 8002192:	4928      	ldr	r1, [pc, #160]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 8002194:	4013      	ands	r3, r2
 8002196:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	4922      	ldr	r1, [pc, #136]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60cb      	str	r3, [r1, #12]
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	491e      	ldr	r1, [pc, #120]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021bc:	4013      	ands	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	4918      	ldr	r1, [pc, #96]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4914      	ldr	r1, [pc, #80]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d021      	beq.n	8002238 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	490e      	ldr	r1, [pc, #56]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e021      	b.n	8002246 <HAL_GPIO_Init+0x2e2>
 8002202:	bf00      	nop
 8002204:	10320000 	.word	0x10320000
 8002208:	10310000 	.word	0x10310000
 800220c:	10220000 	.word	0x10220000
 8002210:	10210000 	.word	0x10210000
 8002214:	10120000 	.word	0x10120000
 8002218:	10110000 	.word	0x10110000
 800221c:	40021000 	.word	0x40021000
 8002220:	40010000 	.word	0x40010000
 8002224:	40010800 	.word	0x40010800
 8002228:	40010c00 	.word	0x40010c00
 800222c:	40011000 	.word	0x40011000
 8002230:	40011400 	.word	0x40011400
 8002234:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_GPIO_Init+0x304>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	43db      	mvns	r3, r3
 8002240:	4909      	ldr	r1, [pc, #36]	; (8002268 <HAL_GPIO_Init+0x304>)
 8002242:	4013      	ands	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	3301      	adds	r3, #1
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	f47f ae8e 	bne.w	8001f78 <HAL_GPIO_Init+0x14>
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	372c      	adds	r7, #44	; 0x2c
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	40010400 	.word	0x40010400

0800226c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]
 8002278:	4613      	mov	r3, r2
 800227a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800227c:	787b      	ldrb	r3, [r7, #1]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002288:	e003      	b.n	8002292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	041a      	lsls	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	611a      	str	r2, [r3, #16]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e272      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8087 	beq.w	80023ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022bc:	4b92      	ldr	r3, [pc, #584]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d00c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022c8:	4b8f      	ldr	r3, [pc, #572]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d112      	bne.n	80022fa <HAL_RCC_OscConfig+0x5e>
 80022d4:	4b8c      	ldr	r3, [pc, #560]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e0:	d10b      	bne.n	80022fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e2:	4b89      	ldr	r3, [pc, #548]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d06c      	beq.n	80023c8 <HAL_RCC_OscConfig+0x12c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d168      	bne.n	80023c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e24c      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x76>
 8002304:	4b80      	ldr	r3, [pc, #512]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a7f      	ldr	r2, [pc, #508]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e02e      	b.n	8002370 <HAL_RCC_OscConfig+0xd4>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x98>
 800231a:	4b7b      	ldr	r3, [pc, #492]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7a      	ldr	r2, [pc, #488]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b78      	ldr	r3, [pc, #480]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a77      	ldr	r2, [pc, #476]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800232c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e01d      	b.n	8002370 <HAL_RCC_OscConfig+0xd4>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0xbc>
 800233e:	4b72      	ldr	r3, [pc, #456]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a71      	ldr	r2, [pc, #452]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a6e      	ldr	r2, [pc, #440]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0xd4>
 8002358:	4b6b      	ldr	r3, [pc, #428]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a6a      	ldr	r2, [pc, #424]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b68      	ldr	r3, [pc, #416]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a67      	ldr	r2, [pc, #412]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff fc06 	bl	8001b88 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7ff fc02 	bl	8001b88 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e200      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b5d      	ldr	r3, [pc, #372]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0xe4>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7ff fbf2 	bl	8001b88 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7ff fbee 	bl	8001b88 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1ec      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	4b53      	ldr	r3, [pc, #332]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x10c>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d063      	beq.n	800249e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d6:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023e2:	4b49      	ldr	r3, [pc, #292]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d11c      	bne.n	8002428 <HAL_RCC_OscConfig+0x18c>
 80023ee:	4b46      	ldr	r3, [pc, #280]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	4b43      	ldr	r3, [pc, #268]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x176>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e1c0      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4939      	ldr	r1, [pc, #228]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	e03a      	b.n	800249e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002430:	4b36      	ldr	r3, [pc, #216]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7ff fba7 	bl	8001b88 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243e:	f7ff fba3 	bl	8001b88 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e1a1      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4927      	ldr	r1, [pc, #156]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002472:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_RCC_OscConfig+0x270>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fb86 	bl	8001b88 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002480:	f7ff fb82 	bl	8001b88 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e180      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d03a      	beq.n	8002520 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d019      	beq.n	80024e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_RCC_OscConfig+0x274>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b8:	f7ff fb66 	bl	8001b88 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c0:	f7ff fb62 	bl	8001b88 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e160      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024de:	2001      	movs	r0, #1
 80024e0:	f000 face 	bl	8002a80 <RCC_Delay>
 80024e4:	e01c      	b.n	8002520 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_RCC_OscConfig+0x274>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ec:	f7ff fb4c 	bl	8001b88 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f2:	e00f      	b.n	8002514 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f4:	f7ff fb48 	bl	8001b88 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d908      	bls.n	8002514 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e146      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	42420000 	.word	0x42420000
 8002510:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	4b92      	ldr	r3, [pc, #584]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e9      	bne.n	80024f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80a6 	beq.w	800267a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002532:	4b8b      	ldr	r3, [pc, #556]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10d      	bne.n	800255a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	4b88      	ldr	r3, [pc, #544]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a87      	ldr	r2, [pc, #540]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002548:	61d3      	str	r3, [r2, #28]
 800254a:	4b85      	ldr	r3, [pc, #532]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002556:	2301      	movs	r3, #1
 8002558:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255a:	4b82      	ldr	r3, [pc, #520]	; (8002764 <HAL_RCC_OscConfig+0x4c8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d118      	bne.n	8002598 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002566:	4b7f      	ldr	r3, [pc, #508]	; (8002764 <HAL_RCC_OscConfig+0x4c8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7e      	ldr	r2, [pc, #504]	; (8002764 <HAL_RCC_OscConfig+0x4c8>)
 800256c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002572:	f7ff fb09 	bl	8001b88 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257a:	f7ff fb05 	bl	8001b88 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b64      	cmp	r3, #100	; 0x64
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e103      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	4b75      	ldr	r3, [pc, #468]	; (8002764 <HAL_RCC_OscConfig+0x4c8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x312>
 80025a0:	4b6f      	ldr	r3, [pc, #444]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a6e      	ldr	r2, [pc, #440]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6213      	str	r3, [r2, #32]
 80025ac:	e02d      	b.n	800260a <HAL_RCC_OscConfig+0x36e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x334>
 80025b6:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4a69      	ldr	r2, [pc, #420]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	6213      	str	r3, [r2, #32]
 80025c2:	4b67      	ldr	r3, [pc, #412]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4a66      	ldr	r2, [pc, #408]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	6213      	str	r3, [r2, #32]
 80025ce:	e01c      	b.n	800260a <HAL_RCC_OscConfig+0x36e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d10c      	bne.n	80025f2 <HAL_RCC_OscConfig+0x356>
 80025d8:	4b61      	ldr	r3, [pc, #388]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a60      	ldr	r2, [pc, #384]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6213      	str	r3, [r2, #32]
 80025e4:	4b5e      	ldr	r3, [pc, #376]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4a5d      	ldr	r2, [pc, #372]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6213      	str	r3, [r2, #32]
 80025f0:	e00b      	b.n	800260a <HAL_RCC_OscConfig+0x36e>
 80025f2:	4b5b      	ldr	r3, [pc, #364]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a5a      	ldr	r2, [pc, #360]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6213      	str	r3, [r2, #32]
 80025fe:	4b58      	ldr	r3, [pc, #352]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a57      	ldr	r2, [pc, #348]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d015      	beq.n	800263e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7ff fab9 	bl	8001b88 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7ff fab5 	bl	8001b88 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e0b1      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	4b4b      	ldr	r3, [pc, #300]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ee      	beq.n	800261a <HAL_RCC_OscConfig+0x37e>
 800263c:	e014      	b.n	8002668 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7ff faa3 	bl	8001b88 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7ff fa9f 	bl	8001b88 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e09b      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	4b40      	ldr	r3, [pc, #256]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ee      	bne.n	8002646 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d105      	bne.n	800267a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4a3b      	ldr	r2, [pc, #236]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002678:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8087 	beq.w	8002792 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002684:	4b36      	ldr	r3, [pc, #216]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d061      	beq.n	8002754 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d146      	bne.n	8002726 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002698:	4b33      	ldr	r3, [pc, #204]	; (8002768 <HAL_RCC_OscConfig+0x4cc>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7ff fa73 	bl	8001b88 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a6:	f7ff fa6f 	bl	8001b88 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e06d      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b8:	4b29      	ldr	r3, [pc, #164]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d108      	bne.n	80026e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	4921      	ldr	r1, [pc, #132]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e0:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a19      	ldr	r1, [r3, #32]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	430b      	orrs	r3, r1
 80026f2:	491b      	ldr	r1, [pc, #108]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_RCC_OscConfig+0x4cc>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7ff fa43 	bl	8001b88 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002706:	f7ff fa3f 	bl	8001b88 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e03d      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x46a>
 8002724:	e035      	b.n	8002792 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_RCC_OscConfig+0x4cc>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7ff fa2c 	bl	8001b88 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7ff fa28 	bl	8001b88 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e026      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x498>
 8002752:	e01e      	b.n	8002792 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d107      	bne.n	800276c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e019      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
 8002760:	40021000 	.word	0x40021000
 8002764:	40007000 	.word	0x40007000
 8002768:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x500>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	429a      	cmp	r2, r3
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000

080027a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0d0      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b4:	4b6a      	ldr	r3, [pc, #424]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d910      	bls.n	80027e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b67      	ldr	r3, [pc, #412]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 0207 	bic.w	r2, r3, #7
 80027ca:	4965      	ldr	r1, [pc, #404]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b63      	ldr	r3, [pc, #396]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0b8      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027fc:	4b59      	ldr	r3, [pc, #356]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a58      	ldr	r2, [pc, #352]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002814:	4b53      	ldr	r3, [pc, #332]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a52      	ldr	r2, [pc, #328]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800281e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002820:	4b50      	ldr	r3, [pc, #320]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	494d      	ldr	r1, [pc, #308]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d040      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b47      	ldr	r3, [pc, #284]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d115      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e07f      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285e:	4b41      	ldr	r3, [pc, #260]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e073      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286e:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e06b      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800287e:	4b39      	ldr	r3, [pc, #228]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f023 0203 	bic.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4936      	ldr	r1, [pc, #216]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002890:	f7ff f97a 	bl	8001b88 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	e00a      	b.n	80028ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002898:	f7ff f976 	bl	8001b88 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e053      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 020c 	and.w	r2, r3, #12
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	429a      	cmp	r2, r3
 80028be:	d1eb      	bne.n	8002898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c0:	4b27      	ldr	r3, [pc, #156]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d210      	bcs.n	80028f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 0207 	bic.w	r2, r3, #7
 80028d6:	4922      	ldr	r1, [pc, #136]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e032      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4916      	ldr	r1, [pc, #88]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	490e      	ldr	r1, [pc, #56]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800292e:	f000 f821 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8002932:	4602      	mov	r2, r0
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	490a      	ldr	r1, [pc, #40]	; (8002968 <HAL_RCC_ClockConfig+0x1c8>)
 8002940:	5ccb      	ldrb	r3, [r1, r3]
 8002942:	fa22 f303 	lsr.w	r3, r2, r3
 8002946:	4a09      	ldr	r2, [pc, #36]	; (800296c <HAL_RCC_ClockConfig+0x1cc>)
 8002948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_ClockConfig+0x1d0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff f8d8 	bl	8001b04 <HAL_InitTick>

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40022000 	.word	0x40022000
 8002964:	40021000 	.word	0x40021000
 8002968:	08005b58 	.word	0x08005b58
 800296c:	200001dc 	.word	0x200001dc
 8002970:	200001e0 	.word	0x200001e0

08002974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	2300      	movs	r3, #0
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800298e:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b04      	cmp	r3, #4
 800299c:	d002      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x30>
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d003      	beq.n	80029aa <HAL_RCC_GetSysClockFreq+0x36>
 80029a2:	e027      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80029a6:	613b      	str	r3, [r7, #16]
      break;
 80029a8:	e027      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	0c9b      	lsrs	r3, r3, #18
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029b4:	5cd3      	ldrb	r3, [r2, r3]
 80029b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d010      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x94>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	0c5b      	lsrs	r3, r3, #17
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	4a11      	ldr	r2, [pc, #68]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029ce:	5cd3      	ldrb	r3, [r2, r3]
 80029d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80029d6:	fb03 f202 	mul.w	r2, r3, r2
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	e004      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	613b      	str	r3, [r7, #16]
      break;
 80029f2:	e002      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80029f6:	613b      	str	r3, [r7, #16]
      break;
 80029f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029fa:	693b      	ldr	r3, [r7, #16]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	007a1200 	.word	0x007a1200
 8002a10:	08005b70 	.word	0x08005b70
 8002a14:	08005b80 	.word	0x08005b80
 8002a18:	003d0900 	.word	0x003d0900

08002a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a20:	4b02      	ldr	r3, [pc, #8]	; (8002a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	200001dc 	.word	0x200001dc

08002a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a34:	f7ff fff2 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4903      	ldr	r1, [pc, #12]	; (8002a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08005b68 	.word	0x08005b68

08002a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a5c:	f7ff ffde 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	0adb      	lsrs	r3, r3, #11
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4903      	ldr	r1, [pc, #12]	; (8002a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	08005b68 	.word	0x08005b68

08002a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <RCC_Delay+0x34>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <RCC_Delay+0x38>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	0a5b      	lsrs	r3, r3, #9
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a9c:	bf00      	nop
  }
  while (Delay --);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e5a      	subs	r2, r3, #1
 8002aa2:	60fa      	str	r2, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f9      	bne.n	8002a9c <RCC_Delay+0x1c>
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	200001dc 	.word	0x200001dc
 8002ab8:	10624dd3 	.word	0x10624dd3

08002abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e042      	b.n	8002b54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe ff46 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fdc5 	bl	8003690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d16d      	bne.n	8002c58 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_UART_Transmit+0x2c>
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e066      	b.n	8002c5a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2221      	movs	r2, #33	; 0x21
 8002b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b9a:	f7fe fff5 	bl	8001b88 <HAL_GetTick>
 8002b9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	88fa      	ldrh	r2, [r7, #6]
 8002ba4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	88fa      	ldrh	r2, [r7, #6]
 8002baa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb4:	d108      	bne.n	8002bc8 <HAL_UART_Transmit+0x6c>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d104      	bne.n	8002bc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	e003      	b.n	8002bd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bd0:	e02a      	b.n	8002c28 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fb14 	bl	800320a <UART_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e036      	b.n	8002c5a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10b      	bne.n	8002c0a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	3302      	adds	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	e007      	b.n	8002c1a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	3301      	adds	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1cf      	bne.n	8002bd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2140      	movs	r1, #64	; 0x40
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fae4 	bl	800320a <UART_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e006      	b.n	8002c5a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3720      	adds	r7, #32
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d112      	bne.n	8002ca2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_UART_Receive_IT+0x26>
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e00b      	b.n	8002ca4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	461a      	mov	r2, r3
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fb24 	bl	80032e6 <UART_Start_Receive_IT>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	e000      	b.n	8002ca4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b0ba      	sub	sp, #232	; 0xe8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <HAL_UART_IRQHandler+0x66>
 8002cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fc01 	bl	8003512 <UART_Receive_IT>
      return;
 8002d10:	e25b      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80de 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x22c>
 8002d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d106      	bne.n	8002d36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80d1 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_UART_IRQHandler+0xae>
 8002d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_UART_IRQHandler+0xd2>
 8002d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	f043 0202 	orr.w	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_UART_IRQHandler+0xf6>
 8002d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f043 0204 	orr.w	r2, r3, #4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d011      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x126>
 8002dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f043 0208 	orr.w	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 81f2 	beq.w	80031c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_UART_IRQHandler+0x14e>
 8002de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fb8c 	bl	8003512 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <HAL_UART_IRQHandler+0x17a>
 8002e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d04f      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa96 	bl	8003358 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d041      	beq.n	8002ebe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3314      	adds	r3, #20
 8002e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3314      	adds	r3, #20
 8002e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e76:	e841 2300 	strex	r3, r2, [r1]
 8002e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1d9      	bne.n	8002e3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d013      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	4a7e      	ldr	r2, [pc, #504]	; (800308c <HAL_UART_IRQHandler+0x3e0>)
 8002e94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe ffea 	bl	8001e74 <HAL_DMA_Abort_IT>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d016      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	e00e      	b.n	8002ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f993 	bl	80031e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebc:	e00a      	b.n	8002ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f98f 	bl	80031e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	e006      	b.n	8002ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f98b 	bl	80031e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002ed2:	e175      	b.n	80031c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed4:	bf00      	nop
    return;
 8002ed6:	e173      	b.n	80031c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	f040 814f 	bne.w	8003180 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8148 	beq.w	8003180 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8141 	beq.w	8003180 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80b6 	beq.w	8003090 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8145 	beq.w	80031c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f42:	429a      	cmp	r2, r3
 8002f44:	f080 813e 	bcs.w	80031c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	f000 8088 	beq.w	800306c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f6a:	e853 3f00 	ldrex	r3, [r3]
 8002f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f88:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f98:	e841 2300 	strex	r3, r2, [r1]
 8002f9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1d9      	bne.n	8002f5c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3314      	adds	r3, #20
 8002fae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb2:	e853 3f00 	ldrex	r3, [r3]
 8002fb6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fcc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fd8:	e841 2300 	strex	r3, r2, [r1]
 8002fdc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e1      	bne.n	8002fa8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3314      	adds	r3, #20
 8002fea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fee:	e853 3f00 	ldrex	r3, [r3]
 8002ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003008:	66fa      	str	r2, [r7, #108]	; 0x6c
 800300a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800300e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e3      	bne.n	8002fe4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	330c      	adds	r3, #12
 8003030:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003034:	e853 3f00 	ldrex	r3, [r3]
 8003038:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800303a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303c:	f023 0310 	bic.w	r3, r3, #16
 8003040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800304e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003050:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800305c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e3      	bne.n	800302a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fec9 	bl	8001dfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800307a:	b29b      	uxth	r3, r3
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	b29b      	uxth	r3, r3
 8003080:	4619      	mov	r1, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8b6 	bl	80031f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003088:	e09c      	b.n	80031c4 <HAL_UART_IRQHandler+0x518>
 800308a:	bf00      	nop
 800308c:	0800341d 	.word	0x0800341d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003098:	b29b      	uxth	r3, r3
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 808e 	beq.w	80031c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80030ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8089 	beq.w	80031c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80030da:	647a      	str	r2, [r7, #68]	; 0x44
 80030dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1e3      	bne.n	80030b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3314      	adds	r3, #20
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	623b      	str	r3, [r7, #32]
   return(result);
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3314      	adds	r3, #20
 800310e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003112:	633a      	str	r2, [r7, #48]	; 0x30
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e3      	bne.n	80030ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	60fb      	str	r3, [r7, #12]
   return(result);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0310 	bic.w	r3, r3, #16
 800314a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	330c      	adds	r3, #12
 8003154:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003158:	61fa      	str	r2, [r7, #28]
 800315a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315c:	69b9      	ldr	r1, [r7, #24]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	e841 2300 	strex	r3, r2, [r1]
 8003164:	617b      	str	r3, [r7, #20]
   return(result);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e3      	bne.n	8003134 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f83b 	bl	80031f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800317e:	e023      	b.n	80031c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HAL_UART_IRQHandler+0x4f4>
 800318c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f953 	bl	8003444 <UART_Transmit_IT>
    return;
 800319e:	e014      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <HAL_UART_IRQHandler+0x51e>
 80031ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f992 	bl	80034e2 <UART_EndTransmit_IT>
    return;
 80031be:	e004      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
    return;
 80031c0:	bf00      	nop
 80031c2:	e002      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
      return;
 80031c4:	bf00      	nop
 80031c6:	e000      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
      return;
 80031c8:	bf00      	nop
  }
}
 80031ca:	37e8      	adds	r7, #232	; 0xe8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b090      	sub	sp, #64	; 0x40
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	4613      	mov	r3, r2
 8003218:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800321a:	e050      	b.n	80032be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d04c      	beq.n	80032be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <UART_WaitOnFlagUntilTimeout+0x30>
 800322a:	f7fe fcad 	bl	8001b88 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003236:	429a      	cmp	r2, r3
 8003238:	d241      	bcs.n	80032be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003250:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800325a:	637a      	str	r2, [r7, #52]	; 0x34
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e5      	bne.n	800323a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3314      	adds	r3, #20
 8003274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	613b      	str	r3, [r7, #16]
   return(result);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	63bb      	str	r3, [r7, #56]	; 0x38
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3314      	adds	r3, #20
 800328c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800328e:	623a      	str	r2, [r7, #32]
 8003290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	69f9      	ldr	r1, [r7, #28]
 8003294:	6a3a      	ldr	r2, [r7, #32]
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	61bb      	str	r3, [r7, #24]
   return(result);
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e5      	bne.n	800326e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e00f      	b.n	80032de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4013      	ands	r3, r2
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d09f      	beq.n	800321c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3740      	adds	r7, #64	; 0x40
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	4613      	mov	r3, r2
 80032f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	88fa      	ldrh	r2, [r7, #6]
 80032fe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2222      	movs	r2, #34	; 0x22
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800332a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0220 	orr.w	r2, r2, #32
 800334a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b095      	sub	sp, #84	; 0x54
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003380:	643a      	str	r2, [r7, #64]	; 0x40
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e5      	bne.n	8003360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3314      	adds	r3, #20
 800339a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d119      	bne.n	8003404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	330c      	adds	r3, #12
 80033d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	e853 3f00 	ldrex	r3, [r3]
 80033de:	60bb      	str	r3, [r7, #8]
   return(result);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f023 0310 	bic.w	r3, r3, #16
 80033e6:	647b      	str	r3, [r7, #68]	; 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033f0:	61ba      	str	r2, [r7, #24]
 80033f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f4:	6979      	ldr	r1, [r7, #20]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	e841 2300 	strex	r3, r2, [r1]
 80033fc:	613b      	str	r3, [r7, #16]
   return(result);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e5      	bne.n	80033d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003412:	bf00      	nop
 8003414:	3754      	adds	r7, #84	; 0x54
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7ff fed3 	bl	80031e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b21      	cmp	r3, #33	; 0x21
 8003456:	d13e      	bne.n	80034d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003460:	d114      	bne.n	800348c <UART_Transmit_IT+0x48>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d110      	bne.n	800348c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800347e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	1c9a      	adds	r2, r3, #2
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	621a      	str	r2, [r3, #32]
 800348a:	e008      	b.n	800349e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	1c59      	adds	r1, r3, #1
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6211      	str	r1, [r2, #32]
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4619      	mov	r1, r3
 80034ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10f      	bne.n	80034d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e000      	b.n	80034d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fe64 	bl	80031d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b08c      	sub	sp, #48	; 0x30
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b22      	cmp	r3, #34	; 0x22
 8003524:	f040 80ae 	bne.w	8003684 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003530:	d117      	bne.n	8003562 <UART_Receive_IT+0x50>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d113      	bne.n	8003562 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003550:	b29a      	uxth	r2, r3
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	1c9a      	adds	r2, r3, #2
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	629a      	str	r2, [r3, #40]	; 0x28
 8003560:	e026      	b.n	80035b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003568:	2300      	movs	r3, #0
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003574:	d007      	beq.n	8003586 <UART_Receive_IT+0x74>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <UART_Receive_IT+0x82>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e008      	b.n	80035a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4619      	mov	r1, r3
 80035be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d15d      	bne.n	8003680 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0220 	bic.w	r2, r2, #32
 80035d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	2b01      	cmp	r3, #1
 8003608:	d135      	bne.n	8003676 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	613b      	str	r3, [r7, #16]
   return(result);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f023 0310 	bic.w	r3, r3, #16
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	623a      	str	r2, [r7, #32]
 8003632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	69f9      	ldr	r1, [r7, #28]
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	61bb      	str	r3, [r7, #24]
   return(result);
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e5      	bne.n	8003610 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b10      	cmp	r3, #16
 8003650:	d10a      	bne.n	8003668 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fdc0 	bl	80031f4 <HAL_UARTEx_RxEventCallback>
 8003674:	e002      	b.n	800367c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fe f892 	bl	80017a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e002      	b.n	8003686 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	3730      	adds	r7, #48	; 0x30
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036ca:	f023 030c 	bic.w	r3, r3, #12
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2c      	ldr	r2, [pc, #176]	; (80037a4 <UART_SetConfig+0x114>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d103      	bne.n	8003700 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036f8:	f7ff f9ae 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	e002      	b.n	8003706 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003700:	f7ff f996 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8003704:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009a      	lsls	r2, r3, #2
 8003710:	441a      	add	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <UART_SetConfig+0x118>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	0119      	lsls	r1, r3, #4
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	fbb2 f2f3 	udiv	r2, r2, r3
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <UART_SetConfig+0x118>)
 800373e:	fba3 0302 	umull	r0, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2064      	movs	r0, #100	; 0x64
 8003746:	fb00 f303 	mul.w	r3, r0, r3
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	3332      	adds	r3, #50	; 0x32
 8003750:	4a15      	ldr	r2, [pc, #84]	; (80037a8 <UART_SetConfig+0x118>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800375c:	4419      	add	r1, r3
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009a      	lsls	r2, r3, #2
 8003768:	441a      	add	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	fbb2 f2f3 	udiv	r2, r2, r3
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <UART_SetConfig+0x118>)
 8003776:	fba3 0302 	umull	r0, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2064      	movs	r0, #100	; 0x64
 800377e:	fb00 f303 	mul.w	r3, r0, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	3332      	adds	r3, #50	; 0x32
 8003788:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <UART_SetConfig+0x118>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	f003 020f 	and.w	r2, r3, #15
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	440a      	add	r2, r1
 800379a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40013800 	.word	0x40013800
 80037a8:	51eb851f 	.word	0x51eb851f

080037ac <__errno>:
 80037ac:	4b01      	ldr	r3, [pc, #4]	; (80037b4 <__errno+0x8>)
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	200001e8 	.word	0x200001e8

080037b8 <__libc_init_array>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	2600      	movs	r6, #0
 80037bc:	4d0c      	ldr	r5, [pc, #48]	; (80037f0 <__libc_init_array+0x38>)
 80037be:	4c0d      	ldr	r4, [pc, #52]	; (80037f4 <__libc_init_array+0x3c>)
 80037c0:	1b64      	subs	r4, r4, r5
 80037c2:	10a4      	asrs	r4, r4, #2
 80037c4:	42a6      	cmp	r6, r4
 80037c6:	d109      	bne.n	80037dc <__libc_init_array+0x24>
 80037c8:	f002 f948 	bl	8005a5c <_init>
 80037cc:	2600      	movs	r6, #0
 80037ce:	4d0a      	ldr	r5, [pc, #40]	; (80037f8 <__libc_init_array+0x40>)
 80037d0:	4c0a      	ldr	r4, [pc, #40]	; (80037fc <__libc_init_array+0x44>)
 80037d2:	1b64      	subs	r4, r4, r5
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	42a6      	cmp	r6, r4
 80037d8:	d105      	bne.n	80037e6 <__libc_init_array+0x2e>
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e0:	4798      	blx	r3
 80037e2:	3601      	adds	r6, #1
 80037e4:	e7ee      	b.n	80037c4 <__libc_init_array+0xc>
 80037e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ea:	4798      	blx	r3
 80037ec:	3601      	adds	r6, #1
 80037ee:	e7f2      	b.n	80037d6 <__libc_init_array+0x1e>
 80037f0:	08005f00 	.word	0x08005f00
 80037f4:	08005f00 	.word	0x08005f00
 80037f8:	08005f00 	.word	0x08005f00
 80037fc:	08005f04 	.word	0x08005f04

08003800 <memset>:
 8003800:	4603      	mov	r3, r0
 8003802:	4402      	add	r2, r0
 8003804:	4293      	cmp	r3, r2
 8003806:	d100      	bne.n	800380a <memset+0xa>
 8003808:	4770      	bx	lr
 800380a:	f803 1b01 	strb.w	r1, [r3], #1
 800380e:	e7f9      	b.n	8003804 <memset+0x4>

08003810 <cos>:
 8003810:	b530      	push	{r4, r5, lr}
 8003812:	4a20      	ldr	r2, [pc, #128]	; (8003894 <cos+0x84>)
 8003814:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003818:	4293      	cmp	r3, r2
 800381a:	b087      	sub	sp, #28
 800381c:	dc06      	bgt.n	800382c <cos+0x1c>
 800381e:	2200      	movs	r2, #0
 8003820:	2300      	movs	r3, #0
 8003822:	b007      	add	sp, #28
 8003824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003828:	f001 b9a2 	b.w	8004b70 <__kernel_cos>
 800382c:	4a1a      	ldr	r2, [pc, #104]	; (8003898 <cos+0x88>)
 800382e:	4293      	cmp	r3, r2
 8003830:	dd05      	ble.n	800383e <cos+0x2e>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	f7fc fc97 	bl	8000168 <__aeabi_dsub>
 800383a:	b007      	add	sp, #28
 800383c:	bd30      	pop	{r4, r5, pc}
 800383e:	aa02      	add	r2, sp, #8
 8003840:	f000 feee 	bl	8004620 <__ieee754_rem_pio2>
 8003844:	f000 0003 	and.w	r0, r0, #3
 8003848:	2801      	cmp	r0, #1
 800384a:	d009      	beq.n	8003860 <cos+0x50>
 800384c:	2802      	cmp	r0, #2
 800384e:	d011      	beq.n	8003874 <cos+0x64>
 8003850:	b9b8      	cbnz	r0, 8003882 <cos+0x72>
 8003852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800385a:	f001 f989 	bl	8004b70 <__kernel_cos>
 800385e:	e7ec      	b.n	800383a <cos+0x2a>
 8003860:	9000      	str	r0, [sp, #0]
 8003862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800386a:	f001 fd81 	bl	8005370 <__kernel_sin>
 800386e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003872:	e7e2      	b.n	800383a <cos+0x2a>
 8003874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800387c:	f001 f978 	bl	8004b70 <__kernel_cos>
 8003880:	e7f5      	b.n	800386e <cos+0x5e>
 8003882:	2301      	movs	r3, #1
 8003884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800388e:	f001 fd6f 	bl	8005370 <__kernel_sin>
 8003892:	e7d2      	b.n	800383a <cos+0x2a>
 8003894:	3fe921fb 	.word	0x3fe921fb
 8003898:	7fefffff 	.word	0x7fefffff

0800389c <sin>:
 800389c:	b530      	push	{r4, r5, lr}
 800389e:	4a20      	ldr	r2, [pc, #128]	; (8003920 <sin+0x84>)
 80038a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80038a4:	4293      	cmp	r3, r2
 80038a6:	b087      	sub	sp, #28
 80038a8:	dc06      	bgt.n	80038b8 <sin+0x1c>
 80038aa:	2300      	movs	r3, #0
 80038ac:	2200      	movs	r2, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	2300      	movs	r3, #0
 80038b2:	f001 fd5d 	bl	8005370 <__kernel_sin>
 80038b6:	e006      	b.n	80038c6 <sin+0x2a>
 80038b8:	4a1a      	ldr	r2, [pc, #104]	; (8003924 <sin+0x88>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	dd05      	ble.n	80038ca <sin+0x2e>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	f7fc fc51 	bl	8000168 <__aeabi_dsub>
 80038c6:	b007      	add	sp, #28
 80038c8:	bd30      	pop	{r4, r5, pc}
 80038ca:	aa02      	add	r2, sp, #8
 80038cc:	f000 fea8 	bl	8004620 <__ieee754_rem_pio2>
 80038d0:	f000 0003 	and.w	r0, r0, #3
 80038d4:	2801      	cmp	r0, #1
 80038d6:	d009      	beq.n	80038ec <sin+0x50>
 80038d8:	2802      	cmp	r0, #2
 80038da:	d00e      	beq.n	80038fa <sin+0x5e>
 80038dc:	b9c0      	cbnz	r0, 8003910 <sin+0x74>
 80038de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038e2:	2301      	movs	r3, #1
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038ea:	e7e2      	b.n	80038b2 <sin+0x16>
 80038ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038f4:	f001 f93c 	bl	8004b70 <__kernel_cos>
 80038f8:	e7e5      	b.n	80038c6 <sin+0x2a>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003906:	f001 fd33 	bl	8005370 <__kernel_sin>
 800390a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800390e:	e7da      	b.n	80038c6 <sin+0x2a>
 8003910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003918:	f001 f92a 	bl	8004b70 <__kernel_cos>
 800391c:	e7f5      	b.n	800390a <sin+0x6e>
 800391e:	bf00      	nop
 8003920:	3fe921fb 	.word	0x3fe921fb
 8003924:	7fefffff 	.word	0x7fefffff

08003928 <atan2>:
 8003928:	f000 b88e 	b.w	8003a48 <__ieee754_atan2>

0800392c <pow>:
 800392c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003930:	4614      	mov	r4, r2
 8003932:	461d      	mov	r5, r3
 8003934:	4680      	mov	r8, r0
 8003936:	4689      	mov	r9, r1
 8003938:	f000 f95a 	bl	8003bf0 <__ieee754_pow>
 800393c:	4622      	mov	r2, r4
 800393e:	4606      	mov	r6, r0
 8003940:	460f      	mov	r7, r1
 8003942:	462b      	mov	r3, r5
 8003944:	4620      	mov	r0, r4
 8003946:	4629      	mov	r1, r5
 8003948:	f7fd f860 	bl	8000a0c <__aeabi_dcmpun>
 800394c:	bbc8      	cbnz	r0, 80039c2 <pow+0x96>
 800394e:	2200      	movs	r2, #0
 8003950:	2300      	movs	r3, #0
 8003952:	4640      	mov	r0, r8
 8003954:	4649      	mov	r1, r9
 8003956:	f7fd f827 	bl	80009a8 <__aeabi_dcmpeq>
 800395a:	b1b8      	cbz	r0, 800398c <pow+0x60>
 800395c:	2200      	movs	r2, #0
 800395e:	2300      	movs	r3, #0
 8003960:	4620      	mov	r0, r4
 8003962:	4629      	mov	r1, r5
 8003964:	f7fd f820 	bl	80009a8 <__aeabi_dcmpeq>
 8003968:	2800      	cmp	r0, #0
 800396a:	d141      	bne.n	80039f0 <pow+0xc4>
 800396c:	4620      	mov	r0, r4
 800396e:	4629      	mov	r1, r5
 8003970:	f001 ff6f 	bl	8005852 <finite>
 8003974:	b328      	cbz	r0, 80039c2 <pow+0x96>
 8003976:	2200      	movs	r2, #0
 8003978:	2300      	movs	r3, #0
 800397a:	4620      	mov	r0, r4
 800397c:	4629      	mov	r1, r5
 800397e:	f7fd f81d 	bl	80009bc <__aeabi_dcmplt>
 8003982:	b1f0      	cbz	r0, 80039c2 <pow+0x96>
 8003984:	f7ff ff12 	bl	80037ac <__errno>
 8003988:	2322      	movs	r3, #34	; 0x22
 800398a:	e019      	b.n	80039c0 <pow+0x94>
 800398c:	4630      	mov	r0, r6
 800398e:	4639      	mov	r1, r7
 8003990:	f001 ff5f 	bl	8005852 <finite>
 8003994:	b9c8      	cbnz	r0, 80039ca <pow+0x9e>
 8003996:	4640      	mov	r0, r8
 8003998:	4649      	mov	r1, r9
 800399a:	f001 ff5a 	bl	8005852 <finite>
 800399e:	b1a0      	cbz	r0, 80039ca <pow+0x9e>
 80039a0:	4620      	mov	r0, r4
 80039a2:	4629      	mov	r1, r5
 80039a4:	f001 ff55 	bl	8005852 <finite>
 80039a8:	b178      	cbz	r0, 80039ca <pow+0x9e>
 80039aa:	4632      	mov	r2, r6
 80039ac:	463b      	mov	r3, r7
 80039ae:	4630      	mov	r0, r6
 80039b0:	4639      	mov	r1, r7
 80039b2:	f7fd f82b 	bl	8000a0c <__aeabi_dcmpun>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d0e4      	beq.n	8003984 <pow+0x58>
 80039ba:	f7ff fef7 	bl	80037ac <__errno>
 80039be:	2321      	movs	r3, #33	; 0x21
 80039c0:	6003      	str	r3, [r0, #0]
 80039c2:	4630      	mov	r0, r6
 80039c4:	4639      	mov	r1, r7
 80039c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ca:	2200      	movs	r2, #0
 80039cc:	2300      	movs	r3, #0
 80039ce:	4630      	mov	r0, r6
 80039d0:	4639      	mov	r1, r7
 80039d2:	f7fc ffe9 	bl	80009a8 <__aeabi_dcmpeq>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d0f3      	beq.n	80039c2 <pow+0x96>
 80039da:	4640      	mov	r0, r8
 80039dc:	4649      	mov	r1, r9
 80039de:	f001 ff38 	bl	8005852 <finite>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d0ed      	beq.n	80039c2 <pow+0x96>
 80039e6:	4620      	mov	r0, r4
 80039e8:	4629      	mov	r1, r5
 80039ea:	f001 ff32 	bl	8005852 <finite>
 80039ee:	e7c8      	b.n	8003982 <pow+0x56>
 80039f0:	2600      	movs	r6, #0
 80039f2:	4f01      	ldr	r7, [pc, #4]	; (80039f8 <pow+0xcc>)
 80039f4:	e7e5      	b.n	80039c2 <pow+0x96>
 80039f6:	bf00      	nop
 80039f8:	3ff00000 	.word	0x3ff00000

080039fc <sqrt>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	4606      	mov	r6, r0
 8003a00:	460f      	mov	r7, r1
 8003a02:	f001 f805 	bl	8004a10 <__ieee754_sqrt>
 8003a06:	4632      	mov	r2, r6
 8003a08:	4604      	mov	r4, r0
 8003a0a:	460d      	mov	r5, r1
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	4630      	mov	r0, r6
 8003a10:	4639      	mov	r1, r7
 8003a12:	f7fc fffb 	bl	8000a0c <__aeabi_dcmpun>
 8003a16:	b990      	cbnz	r0, 8003a3e <sqrt+0x42>
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	4639      	mov	r1, r7
 8003a20:	f7fc ffcc 	bl	80009bc <__aeabi_dcmplt>
 8003a24:	b158      	cbz	r0, 8003a3e <sqrt+0x42>
 8003a26:	f7ff fec1 	bl	80037ac <__errno>
 8003a2a:	2321      	movs	r3, #33	; 0x21
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	6003      	str	r3, [r0, #0]
 8003a30:	2300      	movs	r3, #0
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	f7fc fe79 	bl	800072c <__aeabi_ddiv>
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	460d      	mov	r5, r1
 8003a3e:	4620      	mov	r0, r4
 8003a40:	4629      	mov	r1, r5
 8003a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a44:	0000      	movs	r0, r0
	...

08003a48 <__ieee754_atan2>:
 8003a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	4692      	mov	sl, r2
 8003a4e:	4699      	mov	r9, r3
 8003a50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a54:	461f      	mov	r7, r3
 8003a56:	f1ca 0300 	rsb	r3, sl, #0
 8003a5a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8003be0 <__ieee754_atan2+0x198>
 8003a5e:	ea43 030a 	orr.w	r3, r3, sl
 8003a62:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8003a66:	4573      	cmp	r3, lr
 8003a68:	4604      	mov	r4, r0
 8003a6a:	460d      	mov	r5, r1
 8003a6c:	d808      	bhi.n	8003a80 <__ieee754_atan2+0x38>
 8003a6e:	4246      	negs	r6, r0
 8003a70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a74:	4306      	orrs	r6, r0
 8003a76:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8003a7a:	4576      	cmp	r6, lr
 8003a7c:	468c      	mov	ip, r1
 8003a7e:	d908      	bls.n	8003a92 <__ieee754_atan2+0x4a>
 8003a80:	4652      	mov	r2, sl
 8003a82:	464b      	mov	r3, r9
 8003a84:	4620      	mov	r0, r4
 8003a86:	4629      	mov	r1, r5
 8003a88:	f7fc fb70 	bl	800016c <__adddf3>
 8003a8c:	4604      	mov	r4, r0
 8003a8e:	460d      	mov	r5, r1
 8003a90:	e019      	b.n	8003ac6 <__ieee754_atan2+0x7e>
 8003a92:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8003a96:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8003a9a:	ea56 060a 	orrs.w	r6, r6, sl
 8003a9e:	d103      	bne.n	8003aa8 <__ieee754_atan2+0x60>
 8003aa0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa4:	f001 bd48 	b.w	8005538 <atan>
 8003aa8:	17be      	asrs	r6, r7, #30
 8003aaa:	f006 0602 	and.w	r6, r6, #2
 8003aae:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8003ab2:	ea53 0100 	orrs.w	r1, r3, r0
 8003ab6:	d10a      	bne.n	8003ace <__ieee754_atan2+0x86>
 8003ab8:	2e02      	cmp	r6, #2
 8003aba:	d067      	beq.n	8003b8c <__ieee754_atan2+0x144>
 8003abc:	2e03      	cmp	r6, #3
 8003abe:	d102      	bne.n	8003ac6 <__ieee754_atan2+0x7e>
 8003ac0:	a53b      	add	r5, pc, #236	; (adr r5, 8003bb0 <__ieee754_atan2+0x168>)
 8003ac2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	4629      	mov	r1, r5
 8003aca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ace:	ea52 010a 	orrs.w	r1, r2, sl
 8003ad2:	d106      	bne.n	8003ae2 <__ieee754_atan2+0x9a>
 8003ad4:	f1bc 0f00 	cmp.w	ip, #0
 8003ad8:	da63      	bge.n	8003ba2 <__ieee754_atan2+0x15a>
 8003ada:	a537      	add	r5, pc, #220	; (adr r5, 8003bb8 <__ieee754_atan2+0x170>)
 8003adc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ae0:	e7f1      	b.n	8003ac6 <__ieee754_atan2+0x7e>
 8003ae2:	4572      	cmp	r2, lr
 8003ae4:	d10f      	bne.n	8003b06 <__ieee754_atan2+0xbe>
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	f106 36ff 	add.w	r6, r6, #4294967295
 8003aec:	d107      	bne.n	8003afe <__ieee754_atan2+0xb6>
 8003aee:	2e02      	cmp	r6, #2
 8003af0:	d850      	bhi.n	8003b94 <__ieee754_atan2+0x14c>
 8003af2:	4b3c      	ldr	r3, [pc, #240]	; (8003be4 <__ieee754_atan2+0x19c>)
 8003af4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003af8:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003afc:	e7e3      	b.n	8003ac6 <__ieee754_atan2+0x7e>
 8003afe:	2e02      	cmp	r6, #2
 8003b00:	d84c      	bhi.n	8003b9c <__ieee754_atan2+0x154>
 8003b02:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <__ieee754_atan2+0x1a0>)
 8003b04:	e7f6      	b.n	8003af4 <__ieee754_atan2+0xac>
 8003b06:	4573      	cmp	r3, lr
 8003b08:	d0e4      	beq.n	8003ad4 <__ieee754_atan2+0x8c>
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8003b10:	ea4f 5223 	mov.w	r2, r3, asr #20
 8003b14:	da20      	bge.n	8003b58 <__ieee754_atan2+0x110>
 8003b16:	2f00      	cmp	r7, #0
 8003b18:	da01      	bge.n	8003b1e <__ieee754_atan2+0xd6>
 8003b1a:	323c      	adds	r2, #60	; 0x3c
 8003b1c:	db20      	blt.n	8003b60 <__ieee754_atan2+0x118>
 8003b1e:	4652      	mov	r2, sl
 8003b20:	464b      	mov	r3, r9
 8003b22:	4620      	mov	r0, r4
 8003b24:	4629      	mov	r1, r5
 8003b26:	f7fc fe01 	bl	800072c <__aeabi_ddiv>
 8003b2a:	f001 fe8f 	bl	800584c <fabs>
 8003b2e:	f001 fd03 	bl	8005538 <atan>
 8003b32:	4604      	mov	r4, r0
 8003b34:	460d      	mov	r5, r1
 8003b36:	2e01      	cmp	r6, #1
 8003b38:	d015      	beq.n	8003b66 <__ieee754_atan2+0x11e>
 8003b3a:	2e02      	cmp	r6, #2
 8003b3c:	d017      	beq.n	8003b6e <__ieee754_atan2+0x126>
 8003b3e:	2e00      	cmp	r6, #0
 8003b40:	d0c1      	beq.n	8003ac6 <__ieee754_atan2+0x7e>
 8003b42:	a31f      	add	r3, pc, #124	; (adr r3, 8003bc0 <__ieee754_atan2+0x178>)
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	4620      	mov	r0, r4
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	f7fc fb0c 	bl	8000168 <__aeabi_dsub>
 8003b50:	a31d      	add	r3, pc, #116	; (adr r3, 8003bc8 <__ieee754_atan2+0x180>)
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	e016      	b.n	8003b86 <__ieee754_atan2+0x13e>
 8003b58:	a51d      	add	r5, pc, #116	; (adr r5, 8003bd0 <__ieee754_atan2+0x188>)
 8003b5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003b5e:	e7ea      	b.n	8003b36 <__ieee754_atan2+0xee>
 8003b60:	2400      	movs	r4, #0
 8003b62:	2500      	movs	r5, #0
 8003b64:	e7e7      	b.n	8003b36 <__ieee754_atan2+0xee>
 8003b66:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	e7ab      	b.n	8003ac6 <__ieee754_atan2+0x7e>
 8003b6e:	a314      	add	r3, pc, #80	; (adr r3, 8003bc0 <__ieee754_atan2+0x178>)
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	4620      	mov	r0, r4
 8003b76:	4629      	mov	r1, r5
 8003b78:	f7fc faf6 	bl	8000168 <__aeabi_dsub>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	a111      	add	r1, pc, #68	; (adr r1, 8003bc8 <__ieee754_atan2+0x180>)
 8003b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b86:	f7fc faef 	bl	8000168 <__aeabi_dsub>
 8003b8a:	e77f      	b.n	8003a8c <__ieee754_atan2+0x44>
 8003b8c:	a50e      	add	r5, pc, #56	; (adr r5, 8003bc8 <__ieee754_atan2+0x180>)
 8003b8e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003b92:	e798      	b.n	8003ac6 <__ieee754_atan2+0x7e>
 8003b94:	a510      	add	r5, pc, #64	; (adr r5, 8003bd8 <__ieee754_atan2+0x190>)
 8003b96:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003b9a:	e794      	b.n	8003ac6 <__ieee754_atan2+0x7e>
 8003b9c:	2400      	movs	r4, #0
 8003b9e:	2500      	movs	r5, #0
 8003ba0:	e791      	b.n	8003ac6 <__ieee754_atan2+0x7e>
 8003ba2:	a50b      	add	r5, pc, #44	; (adr r5, 8003bd0 <__ieee754_atan2+0x188>)
 8003ba4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003ba8:	e78d      	b.n	8003ac6 <__ieee754_atan2+0x7e>
 8003baa:	bf00      	nop
 8003bac:	f3af 8000 	nop.w
 8003bb0:	54442d18 	.word	0x54442d18
 8003bb4:	c00921fb 	.word	0xc00921fb
 8003bb8:	54442d18 	.word	0x54442d18
 8003bbc:	bff921fb 	.word	0xbff921fb
 8003bc0:	33145c07 	.word	0x33145c07
 8003bc4:	3ca1a626 	.word	0x3ca1a626
 8003bc8:	54442d18 	.word	0x54442d18
 8003bcc:	400921fb 	.word	0x400921fb
 8003bd0:	54442d18 	.word	0x54442d18
 8003bd4:	3ff921fb 	.word	0x3ff921fb
 8003bd8:	54442d18 	.word	0x54442d18
 8003bdc:	3fe921fb 	.word	0x3fe921fb
 8003be0:	7ff00000 	.word	0x7ff00000
 8003be4:	08005c88 	.word	0x08005c88
 8003be8:	08005ca0 	.word	0x08005ca0
 8003bec:	00000000 	.word	0x00000000

08003bf0 <__ieee754_pow>:
 8003bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf4:	b093      	sub	sp, #76	; 0x4c
 8003bf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bfa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8003bfe:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003c02:	4689      	mov	r9, r1
 8003c04:	ea56 0102 	orrs.w	r1, r6, r2
 8003c08:	4680      	mov	r8, r0
 8003c0a:	d111      	bne.n	8003c30 <__ieee754_pow+0x40>
 8003c0c:	1803      	adds	r3, r0, r0
 8003c0e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8003c12:	4152      	adcs	r2, r2
 8003c14:	4299      	cmp	r1, r3
 8003c16:	4b82      	ldr	r3, [pc, #520]	; (8003e20 <__ieee754_pow+0x230>)
 8003c18:	4193      	sbcs	r3, r2
 8003c1a:	f080 84b9 	bcs.w	8004590 <__ieee754_pow+0x9a0>
 8003c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c22:	4640      	mov	r0, r8
 8003c24:	4649      	mov	r1, r9
 8003c26:	f7fc faa1 	bl	800016c <__adddf3>
 8003c2a:	4683      	mov	fp, r0
 8003c2c:	468c      	mov	ip, r1
 8003c2e:	e06f      	b.n	8003d10 <__ieee754_pow+0x120>
 8003c30:	4b7c      	ldr	r3, [pc, #496]	; (8003e24 <__ieee754_pow+0x234>)
 8003c32:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8003c36:	429c      	cmp	r4, r3
 8003c38:	464d      	mov	r5, r9
 8003c3a:	4682      	mov	sl, r0
 8003c3c:	dc06      	bgt.n	8003c4c <__ieee754_pow+0x5c>
 8003c3e:	d101      	bne.n	8003c44 <__ieee754_pow+0x54>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d1ec      	bne.n	8003c1e <__ieee754_pow+0x2e>
 8003c44:	429e      	cmp	r6, r3
 8003c46:	dc01      	bgt.n	8003c4c <__ieee754_pow+0x5c>
 8003c48:	d10f      	bne.n	8003c6a <__ieee754_pow+0x7a>
 8003c4a:	b172      	cbz	r2, 8003c6a <__ieee754_pow+0x7a>
 8003c4c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003c50:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003c54:	ea55 050a 	orrs.w	r5, r5, sl
 8003c58:	d1e1      	bne.n	8003c1e <__ieee754_pow+0x2e>
 8003c5a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003c5e:	18db      	adds	r3, r3, r3
 8003c60:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003c64:	4152      	adcs	r2, r2
 8003c66:	429d      	cmp	r5, r3
 8003c68:	e7d5      	b.n	8003c16 <__ieee754_pow+0x26>
 8003c6a:	2d00      	cmp	r5, #0
 8003c6c:	da39      	bge.n	8003ce2 <__ieee754_pow+0xf2>
 8003c6e:	4b6e      	ldr	r3, [pc, #440]	; (8003e28 <__ieee754_pow+0x238>)
 8003c70:	429e      	cmp	r6, r3
 8003c72:	dc52      	bgt.n	8003d1a <__ieee754_pow+0x12a>
 8003c74:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003c78:	429e      	cmp	r6, r3
 8003c7a:	f340 849c 	ble.w	80045b6 <__ieee754_pow+0x9c6>
 8003c7e:	1533      	asrs	r3, r6, #20
 8003c80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003c84:	2b14      	cmp	r3, #20
 8003c86:	dd0f      	ble.n	8003ca8 <__ieee754_pow+0xb8>
 8003c88:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003c8c:	fa22 f103 	lsr.w	r1, r2, r3
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	4293      	cmp	r3, r2
 8003c96:	f040 848e 	bne.w	80045b6 <__ieee754_pow+0x9c6>
 8003c9a:	f001 0101 	and.w	r1, r1, #1
 8003c9e:	f1c1 0302 	rsb	r3, r1, #2
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	b182      	cbz	r2, 8003cc8 <__ieee754_pow+0xd8>
 8003ca6:	e05d      	b.n	8003d64 <__ieee754_pow+0x174>
 8003ca8:	2a00      	cmp	r2, #0
 8003caa:	d159      	bne.n	8003d60 <__ieee754_pow+0x170>
 8003cac:	f1c3 0314 	rsb	r3, r3, #20
 8003cb0:	fa46 f103 	asr.w	r1, r6, r3
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	42b3      	cmp	r3, r6
 8003cba:	f040 8479 	bne.w	80045b0 <__ieee754_pow+0x9c0>
 8003cbe:	f001 0101 	and.w	r1, r1, #1
 8003cc2:	f1c1 0302 	rsb	r3, r1, #2
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	4b58      	ldr	r3, [pc, #352]	; (8003e2c <__ieee754_pow+0x23c>)
 8003cca:	429e      	cmp	r6, r3
 8003ccc:	d132      	bne.n	8003d34 <__ieee754_pow+0x144>
 8003cce:	2f00      	cmp	r7, #0
 8003cd0:	f280 846a 	bge.w	80045a8 <__ieee754_pow+0x9b8>
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	2000      	movs	r0, #0
 8003cda:	4954      	ldr	r1, [pc, #336]	; (8003e2c <__ieee754_pow+0x23c>)
 8003cdc:	f7fc fd26 	bl	800072c <__aeabi_ddiv>
 8003ce0:	e7a3      	b.n	8003c2a <__ieee754_pow+0x3a>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	2a00      	cmp	r2, #0
 8003ce8:	d13c      	bne.n	8003d64 <__ieee754_pow+0x174>
 8003cea:	4b4e      	ldr	r3, [pc, #312]	; (8003e24 <__ieee754_pow+0x234>)
 8003cec:	429e      	cmp	r6, r3
 8003cee:	d1eb      	bne.n	8003cc8 <__ieee754_pow+0xd8>
 8003cf0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003cf4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003cf8:	ea53 030a 	orrs.w	r3, r3, sl
 8003cfc:	f000 8448 	beq.w	8004590 <__ieee754_pow+0x9a0>
 8003d00:	4b4b      	ldr	r3, [pc, #300]	; (8003e30 <__ieee754_pow+0x240>)
 8003d02:	429c      	cmp	r4, r3
 8003d04:	dd0b      	ble.n	8003d1e <__ieee754_pow+0x12e>
 8003d06:	2f00      	cmp	r7, #0
 8003d08:	f2c0 8448 	blt.w	800459c <__ieee754_pow+0x9ac>
 8003d0c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003d10:	4658      	mov	r0, fp
 8003d12:	4661      	mov	r1, ip
 8003d14:	b013      	add	sp, #76	; 0x4c
 8003d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e7e2      	b.n	8003ce4 <__ieee754_pow+0xf4>
 8003d1e:	2f00      	cmp	r7, #0
 8003d20:	f04f 0b00 	mov.w	fp, #0
 8003d24:	f04f 0c00 	mov.w	ip, #0
 8003d28:	daf2      	bge.n	8003d10 <__ieee754_pow+0x120>
 8003d2a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003d2e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003d32:	e7ed      	b.n	8003d10 <__ieee754_pow+0x120>
 8003d34:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003d38:	d106      	bne.n	8003d48 <__ieee754_pow+0x158>
 8003d3a:	4642      	mov	r2, r8
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	4640      	mov	r0, r8
 8003d40:	4649      	mov	r1, r9
 8003d42:	f7fc fbc9 	bl	80004d8 <__aeabi_dmul>
 8003d46:	e770      	b.n	8003c2a <__ieee754_pow+0x3a>
 8003d48:	4b3a      	ldr	r3, [pc, #232]	; (8003e34 <__ieee754_pow+0x244>)
 8003d4a:	429f      	cmp	r7, r3
 8003d4c:	d10a      	bne.n	8003d64 <__ieee754_pow+0x174>
 8003d4e:	2d00      	cmp	r5, #0
 8003d50:	db08      	blt.n	8003d64 <__ieee754_pow+0x174>
 8003d52:	4640      	mov	r0, r8
 8003d54:	4649      	mov	r1, r9
 8003d56:	b013      	add	sp, #76	; 0x4c
 8003d58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5c:	f000 be58 	b.w	8004a10 <__ieee754_sqrt>
 8003d60:	2300      	movs	r3, #0
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4640      	mov	r0, r8
 8003d66:	4649      	mov	r1, r9
 8003d68:	f001 fd70 	bl	800584c <fabs>
 8003d6c:	4683      	mov	fp, r0
 8003d6e:	468c      	mov	ip, r1
 8003d70:	f1ba 0f00 	cmp.w	sl, #0
 8003d74:	d128      	bne.n	8003dc8 <__ieee754_pow+0x1d8>
 8003d76:	b124      	cbz	r4, 8003d82 <__ieee754_pow+0x192>
 8003d78:	4b2c      	ldr	r3, [pc, #176]	; (8003e2c <__ieee754_pow+0x23c>)
 8003d7a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d122      	bne.n	8003dc8 <__ieee754_pow+0x1d8>
 8003d82:	2f00      	cmp	r7, #0
 8003d84:	da07      	bge.n	8003d96 <__ieee754_pow+0x1a6>
 8003d86:	465a      	mov	r2, fp
 8003d88:	4663      	mov	r3, ip
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	4927      	ldr	r1, [pc, #156]	; (8003e2c <__ieee754_pow+0x23c>)
 8003d8e:	f7fc fccd 	bl	800072c <__aeabi_ddiv>
 8003d92:	4683      	mov	fp, r0
 8003d94:	468c      	mov	ip, r1
 8003d96:	2d00      	cmp	r5, #0
 8003d98:	daba      	bge.n	8003d10 <__ieee754_pow+0x120>
 8003d9a:	9b00      	ldr	r3, [sp, #0]
 8003d9c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003da0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003da4:	4323      	orrs	r3, r4
 8003da6:	d108      	bne.n	8003dba <__ieee754_pow+0x1ca>
 8003da8:	465a      	mov	r2, fp
 8003daa:	4663      	mov	r3, ip
 8003dac:	4658      	mov	r0, fp
 8003dae:	4661      	mov	r1, ip
 8003db0:	f7fc f9da 	bl	8000168 <__aeabi_dsub>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	e790      	b.n	8003cdc <__ieee754_pow+0xec>
 8003dba:	9b00      	ldr	r3, [sp, #0]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d1a7      	bne.n	8003d10 <__ieee754_pow+0x120>
 8003dc0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003dc4:	469c      	mov	ip, r3
 8003dc6:	e7a3      	b.n	8003d10 <__ieee754_pow+0x120>
 8003dc8:	0feb      	lsrs	r3, r5, #31
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	930c      	str	r3, [sp, #48]	; 0x30
 8003dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003dd0:	9b00      	ldr	r3, [sp, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	d104      	bne.n	8003de0 <__ieee754_pow+0x1f0>
 8003dd6:	4642      	mov	r2, r8
 8003dd8:	464b      	mov	r3, r9
 8003dda:	4640      	mov	r0, r8
 8003ddc:	4649      	mov	r1, r9
 8003dde:	e7e7      	b.n	8003db0 <__ieee754_pow+0x1c0>
 8003de0:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <__ieee754_pow+0x248>)
 8003de2:	429e      	cmp	r6, r3
 8003de4:	f340 80f6 	ble.w	8003fd4 <__ieee754_pow+0x3e4>
 8003de8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003dec:	429e      	cmp	r6, r3
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <__ieee754_pow+0x240>)
 8003df0:	dd09      	ble.n	8003e06 <__ieee754_pow+0x216>
 8003df2:	429c      	cmp	r4, r3
 8003df4:	dc0c      	bgt.n	8003e10 <__ieee754_pow+0x220>
 8003df6:	2f00      	cmp	r7, #0
 8003df8:	da0c      	bge.n	8003e14 <__ieee754_pow+0x224>
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	b013      	add	sp, #76	; 0x4c
 8003dfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e02:	f001 bb92 	b.w	800552a <__math_oflow>
 8003e06:	429c      	cmp	r4, r3
 8003e08:	dbf5      	blt.n	8003df6 <__ieee754_pow+0x206>
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <__ieee754_pow+0x23c>)
 8003e0c:	429c      	cmp	r4, r3
 8003e0e:	dd15      	ble.n	8003e3c <__ieee754_pow+0x24c>
 8003e10:	2f00      	cmp	r7, #0
 8003e12:	dcf2      	bgt.n	8003dfa <__ieee754_pow+0x20a>
 8003e14:	2000      	movs	r0, #0
 8003e16:	b013      	add	sp, #76	; 0x4c
 8003e18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e1c:	f001 bb80 	b.w	8005520 <__math_uflow>
 8003e20:	fff00000 	.word	0xfff00000
 8003e24:	7ff00000 	.word	0x7ff00000
 8003e28:	433fffff 	.word	0x433fffff
 8003e2c:	3ff00000 	.word	0x3ff00000
 8003e30:	3fefffff 	.word	0x3fefffff
 8003e34:	3fe00000 	.word	0x3fe00000
 8003e38:	41e00000 	.word	0x41e00000
 8003e3c:	4661      	mov	r1, ip
 8003e3e:	2200      	movs	r2, #0
 8003e40:	4658      	mov	r0, fp
 8003e42:	4b5f      	ldr	r3, [pc, #380]	; (8003fc0 <__ieee754_pow+0x3d0>)
 8003e44:	f7fc f990 	bl	8000168 <__aeabi_dsub>
 8003e48:	a355      	add	r3, pc, #340	; (adr r3, 8003fa0 <__ieee754_pow+0x3b0>)
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	4604      	mov	r4, r0
 8003e50:	460d      	mov	r5, r1
 8003e52:	f7fc fb41 	bl	80004d8 <__aeabi_dmul>
 8003e56:	a354      	add	r3, pc, #336	; (adr r3, 8003fa8 <__ieee754_pow+0x3b8>)
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	460f      	mov	r7, r1
 8003e60:	4620      	mov	r0, r4
 8003e62:	4629      	mov	r1, r5
 8003e64:	f7fc fb38 	bl	80004d8 <__aeabi_dmul>
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4682      	mov	sl, r0
 8003e6c:	468b      	mov	fp, r1
 8003e6e:	4620      	mov	r0, r4
 8003e70:	4629      	mov	r1, r5
 8003e72:	4b54      	ldr	r3, [pc, #336]	; (8003fc4 <__ieee754_pow+0x3d4>)
 8003e74:	f7fc fb30 	bl	80004d8 <__aeabi_dmul>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	a14c      	add	r1, pc, #304	; (adr r1, 8003fb0 <__ieee754_pow+0x3c0>)
 8003e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e82:	f7fc f971 	bl	8000168 <__aeabi_dsub>
 8003e86:	4622      	mov	r2, r4
 8003e88:	462b      	mov	r3, r5
 8003e8a:	f7fc fb25 	bl	80004d8 <__aeabi_dmul>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	2000      	movs	r0, #0
 8003e94:	494c      	ldr	r1, [pc, #304]	; (8003fc8 <__ieee754_pow+0x3d8>)
 8003e96:	f7fc f967 	bl	8000168 <__aeabi_dsub>
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	462b      	mov	r3, r5
 8003e9e:	4680      	mov	r8, r0
 8003ea0:	4689      	mov	r9, r1
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	f7fc fb17 	bl	80004d8 <__aeabi_dmul>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4640      	mov	r0, r8
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	f7fc fb11 	bl	80004d8 <__aeabi_dmul>
 8003eb6:	a340      	add	r3, pc, #256	; (adr r3, 8003fb8 <__ieee754_pow+0x3c8>)
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	f7fc fb0c 	bl	80004d8 <__aeabi_dmul>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4650      	mov	r0, sl
 8003ec6:	4659      	mov	r1, fp
 8003ec8:	f7fc f94e 	bl	8000168 <__aeabi_dsub>
 8003ecc:	f04f 0a00 	mov.w	sl, #0
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	460d      	mov	r5, r1
 8003ed8:	4630      	mov	r0, r6
 8003eda:	4639      	mov	r1, r7
 8003edc:	f7fc f946 	bl	800016c <__adddf3>
 8003ee0:	4632      	mov	r2, r6
 8003ee2:	463b      	mov	r3, r7
 8003ee4:	4650      	mov	r0, sl
 8003ee6:	468b      	mov	fp, r1
 8003ee8:	f7fc f93e 	bl	8000168 <__aeabi_dsub>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	f7fc f938 	bl	8000168 <__aeabi_dsub>
 8003ef8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003efc:	9b00      	ldr	r3, [sp, #0]
 8003efe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f00:	3b01      	subs	r3, #1
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f04f 0600 	mov.w	r6, #0
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	bf0c      	ite	eq
 8003f0e:	4b2f      	ldreq	r3, [pc, #188]	; (8003fcc <__ieee754_pow+0x3dc>)
 8003f10:	4b2b      	ldrne	r3, [pc, #172]	; (8003fc0 <__ieee754_pow+0x3d0>)
 8003f12:	4604      	mov	r4, r0
 8003f14:	460d      	mov	r5, r1
 8003f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f1a:	e9cd 2300 	strd	r2, r3, [sp]
 8003f1e:	4632      	mov	r2, r6
 8003f20:	463b      	mov	r3, r7
 8003f22:	f7fc f921 	bl	8000168 <__aeabi_dsub>
 8003f26:	4652      	mov	r2, sl
 8003f28:	465b      	mov	r3, fp
 8003f2a:	f7fc fad5 	bl	80004d8 <__aeabi_dmul>
 8003f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f32:	4680      	mov	r8, r0
 8003f34:	4689      	mov	r9, r1
 8003f36:	4620      	mov	r0, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f7fc facd 	bl	80004d8 <__aeabi_dmul>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4640      	mov	r0, r8
 8003f44:	4649      	mov	r1, r9
 8003f46:	f7fc f911 	bl	800016c <__adddf3>
 8003f4a:	4632      	mov	r2, r6
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	4680      	mov	r8, r0
 8003f50:	4689      	mov	r9, r1
 8003f52:	4650      	mov	r0, sl
 8003f54:	4659      	mov	r1, fp
 8003f56:	f7fc fabf 	bl	80004d8 <__aeabi_dmul>
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	460d      	mov	r5, r1
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4602      	mov	r2, r0
 8003f62:	4649      	mov	r1, r9
 8003f64:	4640      	mov	r0, r8
 8003f66:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003f6a:	f7fc f8ff 	bl	800016c <__adddf3>
 8003f6e:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <__ieee754_pow+0x3e0>)
 8003f70:	4682      	mov	sl, r0
 8003f72:	4299      	cmp	r1, r3
 8003f74:	460f      	mov	r7, r1
 8003f76:	460e      	mov	r6, r1
 8003f78:	f340 82e5 	ble.w	8004546 <__ieee754_pow+0x956>
 8003f7c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003f80:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003f84:	4303      	orrs	r3, r0
 8003f86:	f000 81df 	beq.w	8004348 <__ieee754_pow+0x758>
 8003f8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2300      	movs	r3, #0
 8003f92:	f7fc fd13 	bl	80009bc <__aeabi_dcmplt>
 8003f96:	3800      	subs	r0, #0
 8003f98:	bf18      	it	ne
 8003f9a:	2001      	movne	r0, #1
 8003f9c:	e72e      	b.n	8003dfc <__ieee754_pow+0x20c>
 8003f9e:	bf00      	nop
 8003fa0:	60000000 	.word	0x60000000
 8003fa4:	3ff71547 	.word	0x3ff71547
 8003fa8:	f85ddf44 	.word	0xf85ddf44
 8003fac:	3e54ae0b 	.word	0x3e54ae0b
 8003fb0:	55555555 	.word	0x55555555
 8003fb4:	3fd55555 	.word	0x3fd55555
 8003fb8:	652b82fe 	.word	0x652b82fe
 8003fbc:	3ff71547 	.word	0x3ff71547
 8003fc0:	3ff00000 	.word	0x3ff00000
 8003fc4:	3fd00000 	.word	0x3fd00000
 8003fc8:	3fe00000 	.word	0x3fe00000
 8003fcc:	bff00000 	.word	0xbff00000
 8003fd0:	408fffff 	.word	0x408fffff
 8003fd4:	4bd2      	ldr	r3, [pc, #840]	; (8004320 <__ieee754_pow+0x730>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	402b      	ands	r3, r5
 8003fda:	b943      	cbnz	r3, 8003fee <__ieee754_pow+0x3fe>
 8003fdc:	4658      	mov	r0, fp
 8003fde:	4661      	mov	r1, ip
 8003fe0:	4bd0      	ldr	r3, [pc, #832]	; (8004324 <__ieee754_pow+0x734>)
 8003fe2:	f7fc fa79 	bl	80004d8 <__aeabi_dmul>
 8003fe6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003fea:	4683      	mov	fp, r0
 8003fec:	460c      	mov	r4, r1
 8003fee:	1523      	asrs	r3, r4, #20
 8003ff0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003ff4:	4413      	add	r3, r2
 8003ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ff8:	4bcb      	ldr	r3, [pc, #812]	; (8004328 <__ieee754_pow+0x738>)
 8003ffa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003ffe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004002:	429c      	cmp	r4, r3
 8004004:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004008:	dd08      	ble.n	800401c <__ieee754_pow+0x42c>
 800400a:	4bc8      	ldr	r3, [pc, #800]	; (800432c <__ieee754_pow+0x73c>)
 800400c:	429c      	cmp	r4, r3
 800400e:	f340 8199 	ble.w	8004344 <__ieee754_pow+0x754>
 8004012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004014:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004018:	3301      	adds	r3, #1
 800401a:	930b      	str	r3, [sp, #44]	; 0x2c
 800401c:	2600      	movs	r6, #0
 800401e:	00f3      	lsls	r3, r6, #3
 8004020:	930d      	str	r3, [sp, #52]	; 0x34
 8004022:	4bc3      	ldr	r3, [pc, #780]	; (8004330 <__ieee754_pow+0x740>)
 8004024:	4658      	mov	r0, fp
 8004026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800402a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800402e:	4629      	mov	r1, r5
 8004030:	461a      	mov	r2, r3
 8004032:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004036:	4623      	mov	r3, r4
 8004038:	f7fc f896 	bl	8000168 <__aeabi_dsub>
 800403c:	46da      	mov	sl, fp
 800403e:	462b      	mov	r3, r5
 8004040:	4652      	mov	r2, sl
 8004042:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004046:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800404a:	f7fc f88f 	bl	800016c <__adddf3>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	2000      	movs	r0, #0
 8004054:	49b7      	ldr	r1, [pc, #732]	; (8004334 <__ieee754_pow+0x744>)
 8004056:	f7fc fb69 	bl	800072c <__aeabi_ddiv>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004062:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004066:	f7fc fa37 	bl	80004d8 <__aeabi_dmul>
 800406a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800406e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004072:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004076:	2300      	movs	r3, #0
 8004078:	2200      	movs	r2, #0
 800407a:	46ab      	mov	fp, r5
 800407c:	106d      	asrs	r5, r5, #1
 800407e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004082:	9304      	str	r3, [sp, #16]
 8004084:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004088:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800408c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004090:	4640      	mov	r0, r8
 8004092:	4649      	mov	r1, r9
 8004094:	4614      	mov	r4, r2
 8004096:	461d      	mov	r5, r3
 8004098:	f7fc fa1e 	bl	80004d8 <__aeabi_dmul>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80040a4:	f7fc f860 	bl	8000168 <__aeabi_dsub>
 80040a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040ac:	4606      	mov	r6, r0
 80040ae:	460f      	mov	r7, r1
 80040b0:	4620      	mov	r0, r4
 80040b2:	4629      	mov	r1, r5
 80040b4:	f7fc f858 	bl	8000168 <__aeabi_dsub>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4650      	mov	r0, sl
 80040be:	4659      	mov	r1, fp
 80040c0:	f7fc f852 	bl	8000168 <__aeabi_dsub>
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	f7fc fa06 	bl	80004d8 <__aeabi_dmul>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4630      	mov	r0, r6
 80040d2:	4639      	mov	r1, r7
 80040d4:	f7fc f848 	bl	8000168 <__aeabi_dsub>
 80040d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80040dc:	f7fc f9fc 	bl	80004d8 <__aeabi_dmul>
 80040e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	f7fc f9f4 	bl	80004d8 <__aeabi_dmul>
 80040f0:	a379      	add	r3, pc, #484	; (adr r3, 80042d8 <__ieee754_pow+0x6e8>)
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	4604      	mov	r4, r0
 80040f8:	460d      	mov	r5, r1
 80040fa:	f7fc f9ed 	bl	80004d8 <__aeabi_dmul>
 80040fe:	a378      	add	r3, pc, #480	; (adr r3, 80042e0 <__ieee754_pow+0x6f0>)
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f7fc f832 	bl	800016c <__adddf3>
 8004108:	4622      	mov	r2, r4
 800410a:	462b      	mov	r3, r5
 800410c:	f7fc f9e4 	bl	80004d8 <__aeabi_dmul>
 8004110:	a375      	add	r3, pc, #468	; (adr r3, 80042e8 <__ieee754_pow+0x6f8>)
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	f7fc f829 	bl	800016c <__adddf3>
 800411a:	4622      	mov	r2, r4
 800411c:	462b      	mov	r3, r5
 800411e:	f7fc f9db 	bl	80004d8 <__aeabi_dmul>
 8004122:	a373      	add	r3, pc, #460	; (adr r3, 80042f0 <__ieee754_pow+0x700>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f7fc f820 	bl	800016c <__adddf3>
 800412c:	4622      	mov	r2, r4
 800412e:	462b      	mov	r3, r5
 8004130:	f7fc f9d2 	bl	80004d8 <__aeabi_dmul>
 8004134:	a370      	add	r3, pc, #448	; (adr r3, 80042f8 <__ieee754_pow+0x708>)
 8004136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413a:	f7fc f817 	bl	800016c <__adddf3>
 800413e:	4622      	mov	r2, r4
 8004140:	462b      	mov	r3, r5
 8004142:	f7fc f9c9 	bl	80004d8 <__aeabi_dmul>
 8004146:	a36e      	add	r3, pc, #440	; (adr r3, 8004300 <__ieee754_pow+0x710>)
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f7fc f80e 	bl	800016c <__adddf3>
 8004150:	4622      	mov	r2, r4
 8004152:	4606      	mov	r6, r0
 8004154:	460f      	mov	r7, r1
 8004156:	462b      	mov	r3, r5
 8004158:	4620      	mov	r0, r4
 800415a:	4629      	mov	r1, r5
 800415c:	f7fc f9bc 	bl	80004d8 <__aeabi_dmul>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4630      	mov	r0, r6
 8004166:	4639      	mov	r1, r7
 8004168:	f7fc f9b6 	bl	80004d8 <__aeabi_dmul>
 800416c:	4604      	mov	r4, r0
 800416e:	460d      	mov	r5, r1
 8004170:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	f7fb fff8 	bl	800016c <__adddf3>
 800417c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004180:	f7fc f9aa 	bl	80004d8 <__aeabi_dmul>
 8004184:	4622      	mov	r2, r4
 8004186:	462b      	mov	r3, r5
 8004188:	f7fb fff0 	bl	800016c <__adddf3>
 800418c:	4642      	mov	r2, r8
 800418e:	4606      	mov	r6, r0
 8004190:	460f      	mov	r7, r1
 8004192:	464b      	mov	r3, r9
 8004194:	4640      	mov	r0, r8
 8004196:	4649      	mov	r1, r9
 8004198:	f7fc f99e 	bl	80004d8 <__aeabi_dmul>
 800419c:	2200      	movs	r2, #0
 800419e:	4b66      	ldr	r3, [pc, #408]	; (8004338 <__ieee754_pow+0x748>)
 80041a0:	4682      	mov	sl, r0
 80041a2:	468b      	mov	fp, r1
 80041a4:	f7fb ffe2 	bl	800016c <__adddf3>
 80041a8:	4632      	mov	r2, r6
 80041aa:	463b      	mov	r3, r7
 80041ac:	f7fb ffde 	bl	800016c <__adddf3>
 80041b0:	2400      	movs	r4, #0
 80041b2:	460d      	mov	r5, r1
 80041b4:	4622      	mov	r2, r4
 80041b6:	460b      	mov	r3, r1
 80041b8:	4640      	mov	r0, r8
 80041ba:	4649      	mov	r1, r9
 80041bc:	f7fc f98c 	bl	80004d8 <__aeabi_dmul>
 80041c0:	2200      	movs	r2, #0
 80041c2:	4680      	mov	r8, r0
 80041c4:	4689      	mov	r9, r1
 80041c6:	4620      	mov	r0, r4
 80041c8:	4629      	mov	r1, r5
 80041ca:	4b5b      	ldr	r3, [pc, #364]	; (8004338 <__ieee754_pow+0x748>)
 80041cc:	f7fb ffcc 	bl	8000168 <__aeabi_dsub>
 80041d0:	4652      	mov	r2, sl
 80041d2:	465b      	mov	r3, fp
 80041d4:	f7fb ffc8 	bl	8000168 <__aeabi_dsub>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4630      	mov	r0, r6
 80041de:	4639      	mov	r1, r7
 80041e0:	f7fb ffc2 	bl	8000168 <__aeabi_dsub>
 80041e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041e8:	f7fc f976 	bl	80004d8 <__aeabi_dmul>
 80041ec:	4622      	mov	r2, r4
 80041ee:	4606      	mov	r6, r0
 80041f0:	460f      	mov	r7, r1
 80041f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80041f6:	462b      	mov	r3, r5
 80041f8:	f7fc f96e 	bl	80004d8 <__aeabi_dmul>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4630      	mov	r0, r6
 8004202:	4639      	mov	r1, r7
 8004204:	f7fb ffb2 	bl	800016c <__adddf3>
 8004208:	2400      	movs	r4, #0
 800420a:	4606      	mov	r6, r0
 800420c:	460f      	mov	r7, r1
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4640      	mov	r0, r8
 8004214:	4649      	mov	r1, r9
 8004216:	f7fb ffa9 	bl	800016c <__adddf3>
 800421a:	a33b      	add	r3, pc, #236	; (adr r3, 8004308 <__ieee754_pow+0x718>)
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	4620      	mov	r0, r4
 8004222:	460d      	mov	r5, r1
 8004224:	f7fc f958 	bl	80004d8 <__aeabi_dmul>
 8004228:	4642      	mov	r2, r8
 800422a:	464b      	mov	r3, r9
 800422c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004230:	4620      	mov	r0, r4
 8004232:	4629      	mov	r1, r5
 8004234:	f7fb ff98 	bl	8000168 <__aeabi_dsub>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4630      	mov	r0, r6
 800423e:	4639      	mov	r1, r7
 8004240:	f7fb ff92 	bl	8000168 <__aeabi_dsub>
 8004244:	a332      	add	r3, pc, #200	; (adr r3, 8004310 <__ieee754_pow+0x720>)
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	f7fc f945 	bl	80004d8 <__aeabi_dmul>
 800424e:	a332      	add	r3, pc, #200	; (adr r3, 8004318 <__ieee754_pow+0x728>)
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	4606      	mov	r6, r0
 8004256:	460f      	mov	r7, r1
 8004258:	4620      	mov	r0, r4
 800425a:	4629      	mov	r1, r5
 800425c:	f7fc f93c 	bl	80004d8 <__aeabi_dmul>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4630      	mov	r0, r6
 8004266:	4639      	mov	r1, r7
 8004268:	f7fb ff80 	bl	800016c <__adddf3>
 800426c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800426e:	4b33      	ldr	r3, [pc, #204]	; (800433c <__ieee754_pow+0x74c>)
 8004270:	f04f 0a00 	mov.w	sl, #0
 8004274:	4413      	add	r3, r2
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	f7fb ff77 	bl	800016c <__adddf3>
 800427e:	4680      	mov	r8, r0
 8004280:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004282:	4689      	mov	r9, r1
 8004284:	f7fc f8be 	bl	8000404 <__aeabi_i2d>
 8004288:	4604      	mov	r4, r0
 800428a:	460d      	mov	r5, r1
 800428c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800428e:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <__ieee754_pow+0x750>)
 8004290:	4413      	add	r3, r2
 8004292:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004296:	4642      	mov	r2, r8
 8004298:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800429c:	464b      	mov	r3, r9
 800429e:	f7fb ff65 	bl	800016c <__adddf3>
 80042a2:	4632      	mov	r2, r6
 80042a4:	463b      	mov	r3, r7
 80042a6:	f7fb ff61 	bl	800016c <__adddf3>
 80042aa:	4622      	mov	r2, r4
 80042ac:	462b      	mov	r3, r5
 80042ae:	f7fb ff5d 	bl	800016c <__adddf3>
 80042b2:	4622      	mov	r2, r4
 80042b4:	462b      	mov	r3, r5
 80042b6:	4650      	mov	r0, sl
 80042b8:	468b      	mov	fp, r1
 80042ba:	f7fb ff55 	bl	8000168 <__aeabi_dsub>
 80042be:	4632      	mov	r2, r6
 80042c0:	463b      	mov	r3, r7
 80042c2:	f7fb ff51 	bl	8000168 <__aeabi_dsub>
 80042c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042ca:	f7fb ff4d 	bl	8000168 <__aeabi_dsub>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4640      	mov	r0, r8
 80042d4:	4649      	mov	r1, r9
 80042d6:	e60d      	b.n	8003ef4 <__ieee754_pow+0x304>
 80042d8:	4a454eef 	.word	0x4a454eef
 80042dc:	3fca7e28 	.word	0x3fca7e28
 80042e0:	93c9db65 	.word	0x93c9db65
 80042e4:	3fcd864a 	.word	0x3fcd864a
 80042e8:	a91d4101 	.word	0xa91d4101
 80042ec:	3fd17460 	.word	0x3fd17460
 80042f0:	518f264d 	.word	0x518f264d
 80042f4:	3fd55555 	.word	0x3fd55555
 80042f8:	db6fabff 	.word	0xdb6fabff
 80042fc:	3fdb6db6 	.word	0x3fdb6db6
 8004300:	33333303 	.word	0x33333303
 8004304:	3fe33333 	.word	0x3fe33333
 8004308:	e0000000 	.word	0xe0000000
 800430c:	3feec709 	.word	0x3feec709
 8004310:	dc3a03fd 	.word	0xdc3a03fd
 8004314:	3feec709 	.word	0x3feec709
 8004318:	145b01f5 	.word	0x145b01f5
 800431c:	be3e2fe0 	.word	0xbe3e2fe0
 8004320:	7ff00000 	.word	0x7ff00000
 8004324:	43400000 	.word	0x43400000
 8004328:	0003988e 	.word	0x0003988e
 800432c:	000bb679 	.word	0x000bb679
 8004330:	08005cb8 	.word	0x08005cb8
 8004334:	3ff00000 	.word	0x3ff00000
 8004338:	40080000 	.word	0x40080000
 800433c:	08005cd8 	.word	0x08005cd8
 8004340:	08005cc8 	.word	0x08005cc8
 8004344:	2601      	movs	r6, #1
 8004346:	e66a      	b.n	800401e <__ieee754_pow+0x42e>
 8004348:	a39d      	add	r3, pc, #628	; (adr r3, 80045c0 <__ieee754_pow+0x9d0>)
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	4640      	mov	r0, r8
 8004350:	4649      	mov	r1, r9
 8004352:	f7fb ff0b 	bl	800016c <__adddf3>
 8004356:	4622      	mov	r2, r4
 8004358:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800435c:	462b      	mov	r3, r5
 800435e:	4650      	mov	r0, sl
 8004360:	4639      	mov	r1, r7
 8004362:	f7fb ff01 	bl	8000168 <__aeabi_dsub>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800436e:	f7fc fb43 	bl	80009f8 <__aeabi_dcmpgt>
 8004372:	2800      	cmp	r0, #0
 8004374:	f47f ae09 	bne.w	8003f8a <__ieee754_pow+0x39a>
 8004378:	4aa3      	ldr	r2, [pc, #652]	; (8004608 <__ieee754_pow+0xa18>)
 800437a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800437e:	4293      	cmp	r3, r2
 8004380:	f340 8101 	ble.w	8004586 <__ieee754_pow+0x996>
 8004384:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004388:	2000      	movs	r0, #0
 800438a:	151b      	asrs	r3, r3, #20
 800438c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004390:	fa4a f303 	asr.w	r3, sl, r3
 8004394:	4433      	add	r3, r6
 8004396:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800439a:	4f9c      	ldr	r7, [pc, #624]	; (800460c <__ieee754_pow+0xa1c>)
 800439c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80043a0:	4117      	asrs	r7, r2
 80043a2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80043a6:	ea23 0107 	bic.w	r1, r3, r7
 80043aa:	f1c2 0214 	rsb	r2, r2, #20
 80043ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80043b2:	460b      	mov	r3, r1
 80043b4:	fa4a fa02 	asr.w	sl, sl, r2
 80043b8:	2e00      	cmp	r6, #0
 80043ba:	4602      	mov	r2, r0
 80043bc:	4629      	mov	r1, r5
 80043be:	4620      	mov	r0, r4
 80043c0:	bfb8      	it	lt
 80043c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80043c6:	f7fb fecf 	bl	8000168 <__aeabi_dsub>
 80043ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043d2:	2400      	movs	r4, #0
 80043d4:	4642      	mov	r2, r8
 80043d6:	464b      	mov	r3, r9
 80043d8:	f7fb fec8 	bl	800016c <__adddf3>
 80043dc:	a37a      	add	r3, pc, #488	; (adr r3, 80045c8 <__ieee754_pow+0x9d8>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	4620      	mov	r0, r4
 80043e4:	460d      	mov	r5, r1
 80043e6:	f7fc f877 	bl	80004d8 <__aeabi_dmul>
 80043ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043ee:	4606      	mov	r6, r0
 80043f0:	460f      	mov	r7, r1
 80043f2:	4620      	mov	r0, r4
 80043f4:	4629      	mov	r1, r5
 80043f6:	f7fb feb7 	bl	8000168 <__aeabi_dsub>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4640      	mov	r0, r8
 8004400:	4649      	mov	r1, r9
 8004402:	f7fb feb1 	bl	8000168 <__aeabi_dsub>
 8004406:	a372      	add	r3, pc, #456	; (adr r3, 80045d0 <__ieee754_pow+0x9e0>)
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	f7fc f864 	bl	80004d8 <__aeabi_dmul>
 8004410:	a371      	add	r3, pc, #452	; (adr r3, 80045d8 <__ieee754_pow+0x9e8>)
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	4680      	mov	r8, r0
 8004418:	4689      	mov	r9, r1
 800441a:	4620      	mov	r0, r4
 800441c:	4629      	mov	r1, r5
 800441e:	f7fc f85b 	bl	80004d8 <__aeabi_dmul>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4640      	mov	r0, r8
 8004428:	4649      	mov	r1, r9
 800442a:	f7fb fe9f 	bl	800016c <__adddf3>
 800442e:	4604      	mov	r4, r0
 8004430:	460d      	mov	r5, r1
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4630      	mov	r0, r6
 8004438:	4639      	mov	r1, r7
 800443a:	f7fb fe97 	bl	800016c <__adddf3>
 800443e:	4632      	mov	r2, r6
 8004440:	463b      	mov	r3, r7
 8004442:	4680      	mov	r8, r0
 8004444:	4689      	mov	r9, r1
 8004446:	f7fb fe8f 	bl	8000168 <__aeabi_dsub>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4620      	mov	r0, r4
 8004450:	4629      	mov	r1, r5
 8004452:	f7fb fe89 	bl	8000168 <__aeabi_dsub>
 8004456:	4642      	mov	r2, r8
 8004458:	4606      	mov	r6, r0
 800445a:	460f      	mov	r7, r1
 800445c:	464b      	mov	r3, r9
 800445e:	4640      	mov	r0, r8
 8004460:	4649      	mov	r1, r9
 8004462:	f7fc f839 	bl	80004d8 <__aeabi_dmul>
 8004466:	a35e      	add	r3, pc, #376	; (adr r3, 80045e0 <__ieee754_pow+0x9f0>)
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	4604      	mov	r4, r0
 800446e:	460d      	mov	r5, r1
 8004470:	f7fc f832 	bl	80004d8 <__aeabi_dmul>
 8004474:	a35c      	add	r3, pc, #368	; (adr r3, 80045e8 <__ieee754_pow+0x9f8>)
 8004476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447a:	f7fb fe75 	bl	8000168 <__aeabi_dsub>
 800447e:	4622      	mov	r2, r4
 8004480:	462b      	mov	r3, r5
 8004482:	f7fc f829 	bl	80004d8 <__aeabi_dmul>
 8004486:	a35a      	add	r3, pc, #360	; (adr r3, 80045f0 <__ieee754_pow+0xa00>)
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f7fb fe6e 	bl	800016c <__adddf3>
 8004490:	4622      	mov	r2, r4
 8004492:	462b      	mov	r3, r5
 8004494:	f7fc f820 	bl	80004d8 <__aeabi_dmul>
 8004498:	a357      	add	r3, pc, #348	; (adr r3, 80045f8 <__ieee754_pow+0xa08>)
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f7fb fe63 	bl	8000168 <__aeabi_dsub>
 80044a2:	4622      	mov	r2, r4
 80044a4:	462b      	mov	r3, r5
 80044a6:	f7fc f817 	bl	80004d8 <__aeabi_dmul>
 80044aa:	a355      	add	r3, pc, #340	; (adr r3, 8004600 <__ieee754_pow+0xa10>)
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	f7fb fe5c 	bl	800016c <__adddf3>
 80044b4:	4622      	mov	r2, r4
 80044b6:	462b      	mov	r3, r5
 80044b8:	f7fc f80e 	bl	80004d8 <__aeabi_dmul>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4640      	mov	r0, r8
 80044c2:	4649      	mov	r1, r9
 80044c4:	f7fb fe50 	bl	8000168 <__aeabi_dsub>
 80044c8:	4604      	mov	r4, r0
 80044ca:	460d      	mov	r5, r1
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4640      	mov	r0, r8
 80044d2:	4649      	mov	r1, r9
 80044d4:	f7fc f800 	bl	80004d8 <__aeabi_dmul>
 80044d8:	2200      	movs	r2, #0
 80044da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044e2:	4620      	mov	r0, r4
 80044e4:	4629      	mov	r1, r5
 80044e6:	f7fb fe3f 	bl	8000168 <__aeabi_dsub>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044f2:	f7fc f91b 	bl	800072c <__aeabi_ddiv>
 80044f6:	4632      	mov	r2, r6
 80044f8:	4604      	mov	r4, r0
 80044fa:	460d      	mov	r5, r1
 80044fc:	463b      	mov	r3, r7
 80044fe:	4640      	mov	r0, r8
 8004500:	4649      	mov	r1, r9
 8004502:	f7fb ffe9 	bl	80004d8 <__aeabi_dmul>
 8004506:	4632      	mov	r2, r6
 8004508:	463b      	mov	r3, r7
 800450a:	f7fb fe2f 	bl	800016c <__adddf3>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4620      	mov	r0, r4
 8004514:	4629      	mov	r1, r5
 8004516:	f7fb fe27 	bl	8000168 <__aeabi_dsub>
 800451a:	4642      	mov	r2, r8
 800451c:	464b      	mov	r3, r9
 800451e:	f7fb fe23 	bl	8000168 <__aeabi_dsub>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	2000      	movs	r0, #0
 8004528:	4939      	ldr	r1, [pc, #228]	; (8004610 <__ieee754_pow+0xa20>)
 800452a:	f7fb fe1d 	bl	8000168 <__aeabi_dsub>
 800452e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004532:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004536:	da29      	bge.n	800458c <__ieee754_pow+0x99c>
 8004538:	4652      	mov	r2, sl
 800453a:	f001 fa11 	bl	8005960 <scalbn>
 800453e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004542:	f7ff bbfe 	b.w	8003d42 <__ieee754_pow+0x152>
 8004546:	4b33      	ldr	r3, [pc, #204]	; (8004614 <__ieee754_pow+0xa24>)
 8004548:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800454c:	429f      	cmp	r7, r3
 800454e:	f77f af13 	ble.w	8004378 <__ieee754_pow+0x788>
 8004552:	4b31      	ldr	r3, [pc, #196]	; (8004618 <__ieee754_pow+0xa28>)
 8004554:	440b      	add	r3, r1
 8004556:	4303      	orrs	r3, r0
 8004558:	d009      	beq.n	800456e <__ieee754_pow+0x97e>
 800455a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800455e:	2200      	movs	r2, #0
 8004560:	2300      	movs	r3, #0
 8004562:	f7fc fa2b 	bl	80009bc <__aeabi_dcmplt>
 8004566:	3800      	subs	r0, #0
 8004568:	bf18      	it	ne
 800456a:	2001      	movne	r0, #1
 800456c:	e453      	b.n	8003e16 <__ieee754_pow+0x226>
 800456e:	4622      	mov	r2, r4
 8004570:	462b      	mov	r3, r5
 8004572:	f7fb fdf9 	bl	8000168 <__aeabi_dsub>
 8004576:	4642      	mov	r2, r8
 8004578:	464b      	mov	r3, r9
 800457a:	f7fc fa33 	bl	80009e4 <__aeabi_dcmpge>
 800457e:	2800      	cmp	r0, #0
 8004580:	f43f aefa 	beq.w	8004378 <__ieee754_pow+0x788>
 8004584:	e7e9      	b.n	800455a <__ieee754_pow+0x96a>
 8004586:	f04f 0a00 	mov.w	sl, #0
 800458a:	e720      	b.n	80043ce <__ieee754_pow+0x7de>
 800458c:	4621      	mov	r1, r4
 800458e:	e7d6      	b.n	800453e <__ieee754_pow+0x94e>
 8004590:	f04f 0b00 	mov.w	fp, #0
 8004594:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004610 <__ieee754_pow+0xa20>
 8004598:	f7ff bbba 	b.w	8003d10 <__ieee754_pow+0x120>
 800459c:	f04f 0b00 	mov.w	fp, #0
 80045a0:	f04f 0c00 	mov.w	ip, #0
 80045a4:	f7ff bbb4 	b.w	8003d10 <__ieee754_pow+0x120>
 80045a8:	4640      	mov	r0, r8
 80045aa:	4649      	mov	r1, r9
 80045ac:	f7ff bb3d 	b.w	8003c2a <__ieee754_pow+0x3a>
 80045b0:	9200      	str	r2, [sp, #0]
 80045b2:	f7ff bb89 	b.w	8003cc8 <__ieee754_pow+0xd8>
 80045b6:	2300      	movs	r3, #0
 80045b8:	f7ff bb73 	b.w	8003ca2 <__ieee754_pow+0xb2>
 80045bc:	f3af 8000 	nop.w
 80045c0:	652b82fe 	.word	0x652b82fe
 80045c4:	3c971547 	.word	0x3c971547
 80045c8:	00000000 	.word	0x00000000
 80045cc:	3fe62e43 	.word	0x3fe62e43
 80045d0:	fefa39ef 	.word	0xfefa39ef
 80045d4:	3fe62e42 	.word	0x3fe62e42
 80045d8:	0ca86c39 	.word	0x0ca86c39
 80045dc:	be205c61 	.word	0xbe205c61
 80045e0:	72bea4d0 	.word	0x72bea4d0
 80045e4:	3e663769 	.word	0x3e663769
 80045e8:	c5d26bf1 	.word	0xc5d26bf1
 80045ec:	3ebbbd41 	.word	0x3ebbbd41
 80045f0:	af25de2c 	.word	0xaf25de2c
 80045f4:	3f11566a 	.word	0x3f11566a
 80045f8:	16bebd93 	.word	0x16bebd93
 80045fc:	3f66c16c 	.word	0x3f66c16c
 8004600:	5555553e 	.word	0x5555553e
 8004604:	3fc55555 	.word	0x3fc55555
 8004608:	3fe00000 	.word	0x3fe00000
 800460c:	000fffff 	.word	0x000fffff
 8004610:	3ff00000 	.word	0x3ff00000
 8004614:	4090cbff 	.word	0x4090cbff
 8004618:	3f6f3400 	.word	0x3f6f3400
 800461c:	00000000 	.word	0x00000000

08004620 <__ieee754_rem_pio2>:
 8004620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004624:	4614      	mov	r4, r2
 8004626:	4ac4      	ldr	r2, [pc, #784]	; (8004938 <__ieee754_rem_pio2+0x318>)
 8004628:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800462c:	b08d      	sub	sp, #52	; 0x34
 800462e:	4592      	cmp	sl, r2
 8004630:	9104      	str	r1, [sp, #16]
 8004632:	dc07      	bgt.n	8004644 <__ieee754_rem_pio2+0x24>
 8004634:	2200      	movs	r2, #0
 8004636:	2300      	movs	r3, #0
 8004638:	e9c4 0100 	strd	r0, r1, [r4]
 800463c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004640:	2500      	movs	r5, #0
 8004642:	e024      	b.n	800468e <__ieee754_rem_pio2+0x6e>
 8004644:	4abd      	ldr	r2, [pc, #756]	; (800493c <__ieee754_rem_pio2+0x31c>)
 8004646:	4592      	cmp	sl, r2
 8004648:	dc72      	bgt.n	8004730 <__ieee754_rem_pio2+0x110>
 800464a:	9b04      	ldr	r3, [sp, #16]
 800464c:	4dbc      	ldr	r5, [pc, #752]	; (8004940 <__ieee754_rem_pio2+0x320>)
 800464e:	2b00      	cmp	r3, #0
 8004650:	a3ab      	add	r3, pc, #684	; (adr r3, 8004900 <__ieee754_rem_pio2+0x2e0>)
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	dd36      	ble.n	80046c6 <__ieee754_rem_pio2+0xa6>
 8004658:	f7fb fd86 	bl	8000168 <__aeabi_dsub>
 800465c:	45aa      	cmp	sl, r5
 800465e:	4606      	mov	r6, r0
 8004660:	460f      	mov	r7, r1
 8004662:	d018      	beq.n	8004696 <__ieee754_rem_pio2+0x76>
 8004664:	a3a8      	add	r3, pc, #672	; (adr r3, 8004908 <__ieee754_rem_pio2+0x2e8>)
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	f7fb fd7d 	bl	8000168 <__aeabi_dsub>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4630      	mov	r0, r6
 8004674:	e9c4 2300 	strd	r2, r3, [r4]
 8004678:	4639      	mov	r1, r7
 800467a:	f7fb fd75 	bl	8000168 <__aeabi_dsub>
 800467e:	a3a2      	add	r3, pc, #648	; (adr r3, 8004908 <__ieee754_rem_pio2+0x2e8>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fb fd70 	bl	8000168 <__aeabi_dsub>
 8004688:	2501      	movs	r5, #1
 800468a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800468e:	4628      	mov	r0, r5
 8004690:	b00d      	add	sp, #52	; 0x34
 8004692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004696:	a39e      	add	r3, pc, #632	; (adr r3, 8004910 <__ieee754_rem_pio2+0x2f0>)
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f7fb fd64 	bl	8000168 <__aeabi_dsub>
 80046a0:	a39d      	add	r3, pc, #628	; (adr r3, 8004918 <__ieee754_rem_pio2+0x2f8>)
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	4606      	mov	r6, r0
 80046a8:	460f      	mov	r7, r1
 80046aa:	f7fb fd5d 	bl	8000168 <__aeabi_dsub>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4630      	mov	r0, r6
 80046b4:	e9c4 2300 	strd	r2, r3, [r4]
 80046b8:	4639      	mov	r1, r7
 80046ba:	f7fb fd55 	bl	8000168 <__aeabi_dsub>
 80046be:	a396      	add	r3, pc, #600	; (adr r3, 8004918 <__ieee754_rem_pio2+0x2f8>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	e7de      	b.n	8004684 <__ieee754_rem_pio2+0x64>
 80046c6:	f7fb fd51 	bl	800016c <__adddf3>
 80046ca:	45aa      	cmp	sl, r5
 80046cc:	4606      	mov	r6, r0
 80046ce:	460f      	mov	r7, r1
 80046d0:	d016      	beq.n	8004700 <__ieee754_rem_pio2+0xe0>
 80046d2:	a38d      	add	r3, pc, #564	; (adr r3, 8004908 <__ieee754_rem_pio2+0x2e8>)
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f7fb fd48 	bl	800016c <__adddf3>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4630      	mov	r0, r6
 80046e2:	e9c4 2300 	strd	r2, r3, [r4]
 80046e6:	4639      	mov	r1, r7
 80046e8:	f7fb fd3e 	bl	8000168 <__aeabi_dsub>
 80046ec:	a386      	add	r3, pc, #536	; (adr r3, 8004908 <__ieee754_rem_pio2+0x2e8>)
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	f7fb fd3b 	bl	800016c <__adddf3>
 80046f6:	f04f 35ff 	mov.w	r5, #4294967295
 80046fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046fe:	e7c6      	b.n	800468e <__ieee754_rem_pio2+0x6e>
 8004700:	a383      	add	r3, pc, #524	; (adr r3, 8004910 <__ieee754_rem_pio2+0x2f0>)
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	f7fb fd31 	bl	800016c <__adddf3>
 800470a:	a383      	add	r3, pc, #524	; (adr r3, 8004918 <__ieee754_rem_pio2+0x2f8>)
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	4606      	mov	r6, r0
 8004712:	460f      	mov	r7, r1
 8004714:	f7fb fd2a 	bl	800016c <__adddf3>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4630      	mov	r0, r6
 800471e:	e9c4 2300 	strd	r2, r3, [r4]
 8004722:	4639      	mov	r1, r7
 8004724:	f7fb fd20 	bl	8000168 <__aeabi_dsub>
 8004728:	a37b      	add	r3, pc, #492	; (adr r3, 8004918 <__ieee754_rem_pio2+0x2f8>)
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	e7e0      	b.n	80046f2 <__ieee754_rem_pio2+0xd2>
 8004730:	4a84      	ldr	r2, [pc, #528]	; (8004944 <__ieee754_rem_pio2+0x324>)
 8004732:	4592      	cmp	sl, r2
 8004734:	f300 80d5 	bgt.w	80048e2 <__ieee754_rem_pio2+0x2c2>
 8004738:	f001 f888 	bl	800584c <fabs>
 800473c:	a378      	add	r3, pc, #480	; (adr r3, 8004920 <__ieee754_rem_pio2+0x300>)
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	4606      	mov	r6, r0
 8004744:	460f      	mov	r7, r1
 8004746:	f7fb fec7 	bl	80004d8 <__aeabi_dmul>
 800474a:	2200      	movs	r2, #0
 800474c:	4b7e      	ldr	r3, [pc, #504]	; (8004948 <__ieee754_rem_pio2+0x328>)
 800474e:	f7fb fd0d 	bl	800016c <__adddf3>
 8004752:	f7fc f971 	bl	8000a38 <__aeabi_d2iz>
 8004756:	4605      	mov	r5, r0
 8004758:	f7fb fe54 	bl	8000404 <__aeabi_i2d>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004764:	a366      	add	r3, pc, #408	; (adr r3, 8004900 <__ieee754_rem_pio2+0x2e0>)
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	f7fb feb5 	bl	80004d8 <__aeabi_dmul>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4630      	mov	r0, r6
 8004774:	4639      	mov	r1, r7
 8004776:	f7fb fcf7 	bl	8000168 <__aeabi_dsub>
 800477a:	a363      	add	r3, pc, #396	; (adr r3, 8004908 <__ieee754_rem_pio2+0x2e8>)
 800477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004780:	4680      	mov	r8, r0
 8004782:	4689      	mov	r9, r1
 8004784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004788:	f7fb fea6 	bl	80004d8 <__aeabi_dmul>
 800478c:	2d1f      	cmp	r5, #31
 800478e:	4606      	mov	r6, r0
 8004790:	460f      	mov	r7, r1
 8004792:	dc0e      	bgt.n	80047b2 <__ieee754_rem_pio2+0x192>
 8004794:	4b6d      	ldr	r3, [pc, #436]	; (800494c <__ieee754_rem_pio2+0x32c>)
 8004796:	1e6a      	subs	r2, r5, #1
 8004798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479c:	4553      	cmp	r3, sl
 800479e:	d008      	beq.n	80047b2 <__ieee754_rem_pio2+0x192>
 80047a0:	4632      	mov	r2, r6
 80047a2:	463b      	mov	r3, r7
 80047a4:	4640      	mov	r0, r8
 80047a6:	4649      	mov	r1, r9
 80047a8:	f7fb fcde 	bl	8000168 <__aeabi_dsub>
 80047ac:	e9c4 0100 	strd	r0, r1, [r4]
 80047b0:	e013      	b.n	80047da <__ieee754_rem_pio2+0x1ba>
 80047b2:	463b      	mov	r3, r7
 80047b4:	4632      	mov	r2, r6
 80047b6:	4640      	mov	r0, r8
 80047b8:	4649      	mov	r1, r9
 80047ba:	f7fb fcd5 	bl	8000168 <__aeabi_dsub>
 80047be:	ea4f 532a 	mov.w	r3, sl, asr #20
 80047c2:	9305      	str	r3, [sp, #20]
 80047c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80047c8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80047cc:	f1ba 0f10 	cmp.w	sl, #16
 80047d0:	dc1f      	bgt.n	8004812 <__ieee754_rem_pio2+0x1f2>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	e9c4 2300 	strd	r2, r3, [r4]
 80047da:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80047de:	4640      	mov	r0, r8
 80047e0:	4653      	mov	r3, sl
 80047e2:	4649      	mov	r1, r9
 80047e4:	f7fb fcc0 	bl	8000168 <__aeabi_dsub>
 80047e8:	4632      	mov	r2, r6
 80047ea:	463b      	mov	r3, r7
 80047ec:	f7fb fcbc 	bl	8000168 <__aeabi_dsub>
 80047f0:	460b      	mov	r3, r1
 80047f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80047f6:	9904      	ldr	r1, [sp, #16]
 80047f8:	4602      	mov	r2, r0
 80047fa:	2900      	cmp	r1, #0
 80047fc:	f6bf af47 	bge.w	800468e <__ieee754_rem_pio2+0x6e>
 8004800:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8004804:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004808:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800480c:	60e3      	str	r3, [r4, #12]
 800480e:	426d      	negs	r5, r5
 8004810:	e73d      	b.n	800468e <__ieee754_rem_pio2+0x6e>
 8004812:	a33f      	add	r3, pc, #252	; (adr r3, 8004910 <__ieee754_rem_pio2+0x2f0>)
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800481c:	f7fb fe5c 	bl	80004d8 <__aeabi_dmul>
 8004820:	4606      	mov	r6, r0
 8004822:	460f      	mov	r7, r1
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4640      	mov	r0, r8
 800482a:	4649      	mov	r1, r9
 800482c:	f7fb fc9c 	bl	8000168 <__aeabi_dsub>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4682      	mov	sl, r0
 8004836:	468b      	mov	fp, r1
 8004838:	4640      	mov	r0, r8
 800483a:	4649      	mov	r1, r9
 800483c:	f7fb fc94 	bl	8000168 <__aeabi_dsub>
 8004840:	4632      	mov	r2, r6
 8004842:	463b      	mov	r3, r7
 8004844:	f7fb fc90 	bl	8000168 <__aeabi_dsub>
 8004848:	a333      	add	r3, pc, #204	; (adr r3, 8004918 <__ieee754_rem_pio2+0x2f8>)
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	4606      	mov	r6, r0
 8004850:	460f      	mov	r7, r1
 8004852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004856:	f7fb fe3f 	bl	80004d8 <__aeabi_dmul>
 800485a:	4632      	mov	r2, r6
 800485c:	463b      	mov	r3, r7
 800485e:	f7fb fc83 	bl	8000168 <__aeabi_dsub>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4606      	mov	r6, r0
 8004868:	460f      	mov	r7, r1
 800486a:	4650      	mov	r0, sl
 800486c:	4659      	mov	r1, fp
 800486e:	f7fb fc7b 	bl	8000168 <__aeabi_dsub>
 8004872:	9a05      	ldr	r2, [sp, #20]
 8004874:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b31      	cmp	r3, #49	; 0x31
 800487c:	dc06      	bgt.n	800488c <__ieee754_rem_pio2+0x26c>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	46d0      	mov	r8, sl
 8004884:	46d9      	mov	r9, fp
 8004886:	e9c4 2300 	strd	r2, r3, [r4]
 800488a:	e7a6      	b.n	80047da <__ieee754_rem_pio2+0x1ba>
 800488c:	a326      	add	r3, pc, #152	; (adr r3, 8004928 <__ieee754_rem_pio2+0x308>)
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004896:	f7fb fe1f 	bl	80004d8 <__aeabi_dmul>
 800489a:	4606      	mov	r6, r0
 800489c:	460f      	mov	r7, r1
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4650      	mov	r0, sl
 80048a4:	4659      	mov	r1, fp
 80048a6:	f7fb fc5f 	bl	8000168 <__aeabi_dsub>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4680      	mov	r8, r0
 80048b0:	4689      	mov	r9, r1
 80048b2:	4650      	mov	r0, sl
 80048b4:	4659      	mov	r1, fp
 80048b6:	f7fb fc57 	bl	8000168 <__aeabi_dsub>
 80048ba:	4632      	mov	r2, r6
 80048bc:	463b      	mov	r3, r7
 80048be:	f7fb fc53 	bl	8000168 <__aeabi_dsub>
 80048c2:	a31b      	add	r3, pc, #108	; (adr r3, 8004930 <__ieee754_rem_pio2+0x310>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	4606      	mov	r6, r0
 80048ca:	460f      	mov	r7, r1
 80048cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048d0:	f7fb fe02 	bl	80004d8 <__aeabi_dmul>
 80048d4:	4632      	mov	r2, r6
 80048d6:	463b      	mov	r3, r7
 80048d8:	f7fb fc46 	bl	8000168 <__aeabi_dsub>
 80048dc:	4606      	mov	r6, r0
 80048de:	460f      	mov	r7, r1
 80048e0:	e75e      	b.n	80047a0 <__ieee754_rem_pio2+0x180>
 80048e2:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <__ieee754_rem_pio2+0x330>)
 80048e4:	4592      	cmp	sl, r2
 80048e6:	dd35      	ble.n	8004954 <__ieee754_rem_pio2+0x334>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	f7fb fc3c 	bl	8000168 <__aeabi_dsub>
 80048f0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80048f4:	e9c4 0100 	strd	r0, r1, [r4]
 80048f8:	e6a2      	b.n	8004640 <__ieee754_rem_pio2+0x20>
 80048fa:	bf00      	nop
 80048fc:	f3af 8000 	nop.w
 8004900:	54400000 	.word	0x54400000
 8004904:	3ff921fb 	.word	0x3ff921fb
 8004908:	1a626331 	.word	0x1a626331
 800490c:	3dd0b461 	.word	0x3dd0b461
 8004910:	1a600000 	.word	0x1a600000
 8004914:	3dd0b461 	.word	0x3dd0b461
 8004918:	2e037073 	.word	0x2e037073
 800491c:	3ba3198a 	.word	0x3ba3198a
 8004920:	6dc9c883 	.word	0x6dc9c883
 8004924:	3fe45f30 	.word	0x3fe45f30
 8004928:	2e000000 	.word	0x2e000000
 800492c:	3ba3198a 	.word	0x3ba3198a
 8004930:	252049c1 	.word	0x252049c1
 8004934:	397b839a 	.word	0x397b839a
 8004938:	3fe921fb 	.word	0x3fe921fb
 800493c:	4002d97b 	.word	0x4002d97b
 8004940:	3ff921fb 	.word	0x3ff921fb
 8004944:	413921fb 	.word	0x413921fb
 8004948:	3fe00000 	.word	0x3fe00000
 800494c:	08005ce8 	.word	0x08005ce8
 8004950:	7fefffff 	.word	0x7fefffff
 8004954:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004958:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800495c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004960:	460f      	mov	r7, r1
 8004962:	4606      	mov	r6, r0
 8004964:	f7fc f868 	bl	8000a38 <__aeabi_d2iz>
 8004968:	f7fb fd4c 	bl	8000404 <__aeabi_i2d>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4630      	mov	r0, r6
 8004972:	4639      	mov	r1, r7
 8004974:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004978:	f7fb fbf6 	bl	8000168 <__aeabi_dsub>
 800497c:	2200      	movs	r2, #0
 800497e:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <__ieee754_rem_pio2+0x3e8>)
 8004980:	f7fb fdaa 	bl	80004d8 <__aeabi_dmul>
 8004984:	460f      	mov	r7, r1
 8004986:	4606      	mov	r6, r0
 8004988:	f7fc f856 	bl	8000a38 <__aeabi_d2iz>
 800498c:	f7fb fd3a 	bl	8000404 <__aeabi_i2d>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4630      	mov	r0, r6
 8004996:	4639      	mov	r1, r7
 8004998:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800499c:	f7fb fbe4 	bl	8000168 <__aeabi_dsub>
 80049a0:	2200      	movs	r2, #0
 80049a2:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <__ieee754_rem_pio2+0x3e8>)
 80049a4:	f7fb fd98 	bl	80004d8 <__aeabi_dmul>
 80049a8:	f04f 0803 	mov.w	r8, #3
 80049ac:	2600      	movs	r6, #0
 80049ae:	2700      	movs	r7, #0
 80049b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80049b4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80049b8:	4632      	mov	r2, r6
 80049ba:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80049be:	463b      	mov	r3, r7
 80049c0:	46c2      	mov	sl, r8
 80049c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80049c6:	f7fb ffef 	bl	80009a8 <__aeabi_dcmpeq>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d1f4      	bne.n	80049b8 <__ieee754_rem_pio2+0x398>
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <__ieee754_rem_pio2+0x3ec>)
 80049d0:	462a      	mov	r2, r5
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	2302      	movs	r3, #2
 80049d6:	4621      	mov	r1, r4
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	a806      	add	r0, sp, #24
 80049dc:	4653      	mov	r3, sl
 80049de:	f000 f985 	bl	8004cec <__kernel_rem_pio2>
 80049e2:	9b04      	ldr	r3, [sp, #16]
 80049e4:	4605      	mov	r5, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f6bf ae51 	bge.w	800468e <__ieee754_rem_pio2+0x6e>
 80049ec:	e9d4 2100 	ldrd	r2, r1, [r4]
 80049f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049f4:	e9c4 2300 	strd	r2, r3, [r4]
 80049f8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80049fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a00:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004a04:	e703      	b.n	800480e <__ieee754_rem_pio2+0x1ee>
 8004a06:	bf00      	nop
 8004a08:	41700000 	.word	0x41700000
 8004a0c:	08005d68 	.word	0x08005d68

08004a10 <__ieee754_sqrt>:
 8004a10:	f8df c158 	ldr.w	ip, [pc, #344]	; 8004b6c <__ieee754_sqrt+0x15c>
 8004a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a18:	ea3c 0c01 	bics.w	ip, ip, r1
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	460d      	mov	r5, r1
 8004a20:	460c      	mov	r4, r1
 8004a22:	460a      	mov	r2, r1
 8004a24:	4607      	mov	r7, r0
 8004a26:	4603      	mov	r3, r0
 8004a28:	d10f      	bne.n	8004a4a <__ieee754_sqrt+0x3a>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	f7fb fd53 	bl	80004d8 <__aeabi_dmul>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4630      	mov	r0, r6
 8004a38:	4629      	mov	r1, r5
 8004a3a:	f7fb fb97 	bl	800016c <__adddf3>
 8004a3e:	4606      	mov	r6, r0
 8004a40:	460d      	mov	r5, r1
 8004a42:	4630      	mov	r0, r6
 8004a44:	4629      	mov	r1, r5
 8004a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a4a:	2900      	cmp	r1, #0
 8004a4c:	dc0e      	bgt.n	8004a6c <__ieee754_sqrt+0x5c>
 8004a4e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004a52:	ea5c 0707 	orrs.w	r7, ip, r7
 8004a56:	d0f4      	beq.n	8004a42 <__ieee754_sqrt+0x32>
 8004a58:	b141      	cbz	r1, 8004a6c <__ieee754_sqrt+0x5c>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	f7fb fb83 	bl	8000168 <__aeabi_dsub>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	f7fb fe61 	bl	800072c <__aeabi_ddiv>
 8004a6a:	e7e8      	b.n	8004a3e <__ieee754_sqrt+0x2e>
 8004a6c:	1521      	asrs	r1, r4, #20
 8004a6e:	d075      	beq.n	8004b5c <__ieee754_sqrt+0x14c>
 8004a70:	07cc      	lsls	r4, r1, #31
 8004a72:	f04f 0400 	mov.w	r4, #0
 8004a76:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004a7a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8004a7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a82:	bf5e      	ittt	pl
 8004a84:	0fd9      	lsrpl	r1, r3, #31
 8004a86:	005b      	lslpl	r3, r3, #1
 8004a88:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8004a8c:	0fd9      	lsrs	r1, r3, #31
 8004a8e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004a92:	2516      	movs	r5, #22
 8004a94:	4620      	mov	r0, r4
 8004a96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a9a:	107f      	asrs	r7, r7, #1
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	1846      	adds	r6, r0, r1
 8004aa0:	4296      	cmp	r6, r2
 8004aa2:	bfde      	ittt	le
 8004aa4:	1b92      	suble	r2, r2, r6
 8004aa6:	1870      	addle	r0, r6, r1
 8004aa8:	1864      	addle	r4, r4, r1
 8004aaa:	0052      	lsls	r2, r2, #1
 8004aac:	3d01      	subs	r5, #1
 8004aae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004ab2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004ab6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004aba:	d1f0      	bne.n	8004a9e <__ieee754_sqrt+0x8e>
 8004abc:	4629      	mov	r1, r5
 8004abe:	f04f 0e20 	mov.w	lr, #32
 8004ac2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004ac6:	4282      	cmp	r2, r0
 8004ac8:	eb06 0c05 	add.w	ip, r6, r5
 8004acc:	dc02      	bgt.n	8004ad4 <__ieee754_sqrt+0xc4>
 8004ace:	d113      	bne.n	8004af8 <__ieee754_sqrt+0xe8>
 8004ad0:	459c      	cmp	ip, r3
 8004ad2:	d811      	bhi.n	8004af8 <__ieee754_sqrt+0xe8>
 8004ad4:	f1bc 0f00 	cmp.w	ip, #0
 8004ad8:	eb0c 0506 	add.w	r5, ip, r6
 8004adc:	da43      	bge.n	8004b66 <__ieee754_sqrt+0x156>
 8004ade:	2d00      	cmp	r5, #0
 8004ae0:	db41      	blt.n	8004b66 <__ieee754_sqrt+0x156>
 8004ae2:	f100 0801 	add.w	r8, r0, #1
 8004ae6:	1a12      	subs	r2, r2, r0
 8004ae8:	4640      	mov	r0, r8
 8004aea:	459c      	cmp	ip, r3
 8004aec:	bf88      	it	hi
 8004aee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004af2:	eba3 030c 	sub.w	r3, r3, ip
 8004af6:	4431      	add	r1, r6
 8004af8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004afc:	f1be 0e01 	subs.w	lr, lr, #1
 8004b00:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8004b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004b0c:	d1db      	bne.n	8004ac6 <__ieee754_sqrt+0xb6>
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	d006      	beq.n	8004b20 <__ieee754_sqrt+0x110>
 8004b12:	1c48      	adds	r0, r1, #1
 8004b14:	bf0b      	itete	eq
 8004b16:	4671      	moveq	r1, lr
 8004b18:	3101      	addne	r1, #1
 8004b1a:	3401      	addeq	r4, #1
 8004b1c:	f021 0101 	bicne.w	r1, r1, #1
 8004b20:	1063      	asrs	r3, r4, #1
 8004b22:	0849      	lsrs	r1, r1, #1
 8004b24:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004b28:	07e2      	lsls	r2, r4, #31
 8004b2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004b2e:	bf48      	it	mi
 8004b30:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004b34:	460e      	mov	r6, r1
 8004b36:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004b3a:	e782      	b.n	8004a42 <__ieee754_sqrt+0x32>
 8004b3c:	0ada      	lsrs	r2, r3, #11
 8004b3e:	3815      	subs	r0, #21
 8004b40:	055b      	lsls	r3, r3, #21
 8004b42:	2a00      	cmp	r2, #0
 8004b44:	d0fa      	beq.n	8004b3c <__ieee754_sqrt+0x12c>
 8004b46:	02d5      	lsls	r5, r2, #11
 8004b48:	d50a      	bpl.n	8004b60 <__ieee754_sqrt+0x150>
 8004b4a:	f1c1 0420 	rsb	r4, r1, #32
 8004b4e:	fa23 f404 	lsr.w	r4, r3, r4
 8004b52:	1e4d      	subs	r5, r1, #1
 8004b54:	408b      	lsls	r3, r1
 8004b56:	4322      	orrs	r2, r4
 8004b58:	1b41      	subs	r1, r0, r5
 8004b5a:	e789      	b.n	8004a70 <__ieee754_sqrt+0x60>
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	e7f0      	b.n	8004b42 <__ieee754_sqrt+0x132>
 8004b60:	0052      	lsls	r2, r2, #1
 8004b62:	3101      	adds	r1, #1
 8004b64:	e7ef      	b.n	8004b46 <__ieee754_sqrt+0x136>
 8004b66:	4680      	mov	r8, r0
 8004b68:	e7bd      	b.n	8004ae6 <__ieee754_sqrt+0xd6>
 8004b6a:	bf00      	nop
 8004b6c:	7ff00000 	.word	0x7ff00000

08004b70 <__kernel_cos>:
 8004b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004b78:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	460f      	mov	r7, r1
 8004b80:	e9cd 2300 	strd	r2, r3, [sp]
 8004b84:	da04      	bge.n	8004b90 <__kernel_cos+0x20>
 8004b86:	f7fb ff57 	bl	8000a38 <__aeabi_d2iz>
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	f000 8086 	beq.w	8004c9c <__kernel_cos+0x12c>
 8004b90:	4642      	mov	r2, r8
 8004b92:	463b      	mov	r3, r7
 8004b94:	4640      	mov	r0, r8
 8004b96:	4639      	mov	r1, r7
 8004b98:	f7fb fc9e 	bl	80004d8 <__aeabi_dmul>
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	4b4e      	ldr	r3, [pc, #312]	; (8004cd8 <__kernel_cos+0x168>)
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	460d      	mov	r5, r1
 8004ba4:	f7fb fc98 	bl	80004d8 <__aeabi_dmul>
 8004ba8:	a33f      	add	r3, pc, #252	; (adr r3, 8004ca8 <__kernel_cos+0x138>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	4682      	mov	sl, r0
 8004bb0:	468b      	mov	fp, r1
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	f7fb fc8f 	bl	80004d8 <__aeabi_dmul>
 8004bba:	a33d      	add	r3, pc, #244	; (adr r3, 8004cb0 <__kernel_cos+0x140>)
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f7fb fad4 	bl	800016c <__adddf3>
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	462b      	mov	r3, r5
 8004bc8:	f7fb fc86 	bl	80004d8 <__aeabi_dmul>
 8004bcc:	a33a      	add	r3, pc, #232	; (adr r3, 8004cb8 <__kernel_cos+0x148>)
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	f7fb fac9 	bl	8000168 <__aeabi_dsub>
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	f7fb fc7d 	bl	80004d8 <__aeabi_dmul>
 8004bde:	a338      	add	r3, pc, #224	; (adr r3, 8004cc0 <__kernel_cos+0x150>)
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f7fb fac2 	bl	800016c <__adddf3>
 8004be8:	4622      	mov	r2, r4
 8004bea:	462b      	mov	r3, r5
 8004bec:	f7fb fc74 	bl	80004d8 <__aeabi_dmul>
 8004bf0:	a335      	add	r3, pc, #212	; (adr r3, 8004cc8 <__kernel_cos+0x158>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f7fb fab7 	bl	8000168 <__aeabi_dsub>
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	462b      	mov	r3, r5
 8004bfe:	f7fb fc6b 	bl	80004d8 <__aeabi_dmul>
 8004c02:	a333      	add	r3, pc, #204	; (adr r3, 8004cd0 <__kernel_cos+0x160>)
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f7fb fab0 	bl	800016c <__adddf3>
 8004c0c:	4622      	mov	r2, r4
 8004c0e:	462b      	mov	r3, r5
 8004c10:	f7fb fc62 	bl	80004d8 <__aeabi_dmul>
 8004c14:	4622      	mov	r2, r4
 8004c16:	462b      	mov	r3, r5
 8004c18:	f7fb fc5e 	bl	80004d8 <__aeabi_dmul>
 8004c1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c20:	4604      	mov	r4, r0
 8004c22:	460d      	mov	r5, r1
 8004c24:	4640      	mov	r0, r8
 8004c26:	4639      	mov	r1, r7
 8004c28:	f7fb fc56 	bl	80004d8 <__aeabi_dmul>
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4602      	mov	r2, r0
 8004c30:	4629      	mov	r1, r5
 8004c32:	4620      	mov	r0, r4
 8004c34:	f7fb fa98 	bl	8000168 <__aeabi_dsub>
 8004c38:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <__kernel_cos+0x16c>)
 8004c3a:	4680      	mov	r8, r0
 8004c3c:	429e      	cmp	r6, r3
 8004c3e:	4689      	mov	r9, r1
 8004c40:	dc0e      	bgt.n	8004c60 <__kernel_cos+0xf0>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4650      	mov	r0, sl
 8004c48:	4659      	mov	r1, fp
 8004c4a:	f7fb fa8d 	bl	8000168 <__aeabi_dsub>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	2000      	movs	r0, #0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4922      	ldr	r1, [pc, #136]	; (8004ce0 <__kernel_cos+0x170>)
 8004c56:	f7fb fa87 	bl	8000168 <__aeabi_dsub>
 8004c5a:	b003      	add	sp, #12
 8004c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c60:	2400      	movs	r4, #0
 8004c62:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <__kernel_cos+0x174>)
 8004c64:	4622      	mov	r2, r4
 8004c66:	429e      	cmp	r6, r3
 8004c68:	bfcc      	ite	gt
 8004c6a:	4d1f      	ldrgt	r5, [pc, #124]	; (8004ce8 <__kernel_cos+0x178>)
 8004c6c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004c70:	462b      	mov	r3, r5
 8004c72:	2000      	movs	r0, #0
 8004c74:	491a      	ldr	r1, [pc, #104]	; (8004ce0 <__kernel_cos+0x170>)
 8004c76:	f7fb fa77 	bl	8000168 <__aeabi_dsub>
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	4606      	mov	r6, r0
 8004c7e:	460f      	mov	r7, r1
 8004c80:	462b      	mov	r3, r5
 8004c82:	4650      	mov	r0, sl
 8004c84:	4659      	mov	r1, fp
 8004c86:	f7fb fa6f 	bl	8000168 <__aeabi_dsub>
 8004c8a:	4642      	mov	r2, r8
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	f7fb fa6b 	bl	8000168 <__aeabi_dsub>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4630      	mov	r0, r6
 8004c98:	4639      	mov	r1, r7
 8004c9a:	e7dc      	b.n	8004c56 <__kernel_cos+0xe6>
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	4910      	ldr	r1, [pc, #64]	; (8004ce0 <__kernel_cos+0x170>)
 8004ca0:	e7db      	b.n	8004c5a <__kernel_cos+0xea>
 8004ca2:	bf00      	nop
 8004ca4:	f3af 8000 	nop.w
 8004ca8:	be8838d4 	.word	0xbe8838d4
 8004cac:	bda8fae9 	.word	0xbda8fae9
 8004cb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8004cb4:	3e21ee9e 	.word	0x3e21ee9e
 8004cb8:	809c52ad 	.word	0x809c52ad
 8004cbc:	3e927e4f 	.word	0x3e927e4f
 8004cc0:	19cb1590 	.word	0x19cb1590
 8004cc4:	3efa01a0 	.word	0x3efa01a0
 8004cc8:	16c15177 	.word	0x16c15177
 8004ccc:	3f56c16c 	.word	0x3f56c16c
 8004cd0:	5555554c 	.word	0x5555554c
 8004cd4:	3fa55555 	.word	0x3fa55555
 8004cd8:	3fe00000 	.word	0x3fe00000
 8004cdc:	3fd33332 	.word	0x3fd33332
 8004ce0:	3ff00000 	.word	0x3ff00000
 8004ce4:	3fe90000 	.word	0x3fe90000
 8004ce8:	3fd20000 	.word	0x3fd20000

08004cec <__kernel_rem_pio2>:
 8004cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004cf4:	9308      	str	r3, [sp, #32]
 8004cf6:	9106      	str	r1, [sp, #24]
 8004cf8:	4bb6      	ldr	r3, [pc, #728]	; (8004fd4 <__kernel_rem_pio2+0x2e8>)
 8004cfa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004cfc:	f112 0f14 	cmn.w	r2, #20
 8004d00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d04:	bfa8      	it	ge
 8004d06:	1ed4      	subge	r4, r2, #3
 8004d08:	9302      	str	r3, [sp, #8]
 8004d0a:	9b08      	ldr	r3, [sp, #32]
 8004d0c:	bfb8      	it	lt
 8004d0e:	2400      	movlt	r4, #0
 8004d10:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d14:	9307      	str	r3, [sp, #28]
 8004d16:	bfa4      	itt	ge
 8004d18:	2318      	movge	r3, #24
 8004d1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004d1e:	f06f 0317 	mvn.w	r3, #23
 8004d22:	fb04 3303 	mla	r3, r4, r3, r3
 8004d26:	eb03 0b02 	add.w	fp, r3, r2
 8004d2a:	9a07      	ldr	r2, [sp, #28]
 8004d2c:	9b02      	ldr	r3, [sp, #8]
 8004d2e:	1aa7      	subs	r7, r4, r2
 8004d30:	eb03 0802 	add.w	r8, r3, r2
 8004d34:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004d36:	2500      	movs	r5, #0
 8004d38:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9009      	str	r0, [sp, #36]	; 0x24
 8004d42:	ae20      	add	r6, sp, #128	; 0x80
 8004d44:	4545      	cmp	r5, r8
 8004d46:	dd14      	ble.n	8004d72 <__kernel_rem_pio2+0x86>
 8004d48:	f04f 0800 	mov.w	r8, #0
 8004d4c:	9a08      	ldr	r2, [sp, #32]
 8004d4e:	ab20      	add	r3, sp, #128	; 0x80
 8004d50:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8004d54:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8004d58:	9b02      	ldr	r3, [sp, #8]
 8004d5a:	4598      	cmp	r8, r3
 8004d5c:	dc35      	bgt.n	8004dca <__kernel_rem_pio2+0xde>
 8004d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d60:	2200      	movs	r2, #0
 8004d62:	f1a3 0908 	sub.w	r9, r3, #8
 8004d66:	2300      	movs	r3, #0
 8004d68:	462f      	mov	r7, r5
 8004d6a:	2600      	movs	r6, #0
 8004d6c:	e9cd 2300 	strd	r2, r3, [sp]
 8004d70:	e01f      	b.n	8004db2 <__kernel_rem_pio2+0xc6>
 8004d72:	42ef      	cmn	r7, r5
 8004d74:	d40b      	bmi.n	8004d8e <__kernel_rem_pio2+0xa2>
 8004d76:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004d7a:	e9cd 2300 	strd	r2, r3, [sp]
 8004d7e:	f7fb fb41 	bl	8000404 <__aeabi_i2d>
 8004d82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d86:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004d8a:	3501      	adds	r5, #1
 8004d8c:	e7da      	b.n	8004d44 <__kernel_rem_pio2+0x58>
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	e7f8      	b.n	8004d86 <__kernel_rem_pio2+0x9a>
 8004d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d98:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004d9c:	f7fb fb9c 	bl	80004d8 <__aeabi_dmul>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004da8:	f7fb f9e0 	bl	800016c <__adddf3>
 8004dac:	e9cd 0100 	strd	r0, r1, [sp]
 8004db0:	3601      	adds	r6, #1
 8004db2:	9b07      	ldr	r3, [sp, #28]
 8004db4:	3f08      	subs	r7, #8
 8004db6:	429e      	cmp	r6, r3
 8004db8:	ddec      	ble.n	8004d94 <__kernel_rem_pio2+0xa8>
 8004dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dbe:	f108 0801 	add.w	r8, r8, #1
 8004dc2:	e8ea 2302 	strd	r2, r3, [sl], #8
 8004dc6:	3508      	adds	r5, #8
 8004dc8:	e7c6      	b.n	8004d58 <__kernel_rem_pio2+0x6c>
 8004dca:	9b02      	ldr	r3, [sp, #8]
 8004dcc:	aa0c      	add	r2, sp, #48	; 0x30
 8004dce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dd4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004dd6:	9e02      	ldr	r6, [sp, #8]
 8004dd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004ddc:	930a      	str	r3, [sp, #40]	; 0x28
 8004dde:	ab98      	add	r3, sp, #608	; 0x260
 8004de0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004de4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004de8:	ab70      	add	r3, sp, #448	; 0x1c0
 8004dea:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8004dee:	46d0      	mov	r8, sl
 8004df0:	46b1      	mov	r9, r6
 8004df2:	af0c      	add	r7, sp, #48	; 0x30
 8004df4:	9700      	str	r7, [sp, #0]
 8004df6:	f1b9 0f00 	cmp.w	r9, #0
 8004dfa:	f1a8 0808 	sub.w	r8, r8, #8
 8004dfe:	dc71      	bgt.n	8004ee4 <__kernel_rem_pio2+0x1f8>
 8004e00:	465a      	mov	r2, fp
 8004e02:	4620      	mov	r0, r4
 8004e04:	4629      	mov	r1, r5
 8004e06:	f000 fdab 	bl	8005960 <scalbn>
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004e10:	4604      	mov	r4, r0
 8004e12:	460d      	mov	r5, r1
 8004e14:	f7fb fb60 	bl	80004d8 <__aeabi_dmul>
 8004e18:	f000 fd22 	bl	8005860 <floor>
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4b6e      	ldr	r3, [pc, #440]	; (8004fd8 <__kernel_rem_pio2+0x2ec>)
 8004e20:	f7fb fb5a 	bl	80004d8 <__aeabi_dmul>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4620      	mov	r0, r4
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	f7fb f99c 	bl	8000168 <__aeabi_dsub>
 8004e30:	460d      	mov	r5, r1
 8004e32:	4604      	mov	r4, r0
 8004e34:	f7fb fe00 	bl	8000a38 <__aeabi_d2iz>
 8004e38:	9004      	str	r0, [sp, #16]
 8004e3a:	f7fb fae3 	bl	8000404 <__aeabi_i2d>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4620      	mov	r0, r4
 8004e44:	4629      	mov	r1, r5
 8004e46:	f7fb f98f 	bl	8000168 <__aeabi_dsub>
 8004e4a:	f1bb 0f00 	cmp.w	fp, #0
 8004e4e:	4680      	mov	r8, r0
 8004e50:	4689      	mov	r9, r1
 8004e52:	dd70      	ble.n	8004f36 <__kernel_rem_pio2+0x24a>
 8004e54:	1e72      	subs	r2, r6, #1
 8004e56:	ab0c      	add	r3, sp, #48	; 0x30
 8004e58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004e5c:	9c04      	ldr	r4, [sp, #16]
 8004e5e:	f1cb 0118 	rsb	r1, fp, #24
 8004e62:	fa40 f301 	asr.w	r3, r0, r1
 8004e66:	441c      	add	r4, r3
 8004e68:	408b      	lsls	r3, r1
 8004e6a:	1ac0      	subs	r0, r0, r3
 8004e6c:	ab0c      	add	r3, sp, #48	; 0x30
 8004e6e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004e72:	f1cb 0317 	rsb	r3, fp, #23
 8004e76:	9404      	str	r4, [sp, #16]
 8004e78:	fa40 f303 	asr.w	r3, r0, r3
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	9b00      	ldr	r3, [sp, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	dd66      	ble.n	8004f52 <__kernel_rem_pio2+0x266>
 8004e84:	2200      	movs	r2, #0
 8004e86:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004e8a:	4614      	mov	r4, r2
 8004e8c:	9b04      	ldr	r3, [sp, #16]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	9304      	str	r3, [sp, #16]
 8004e92:	4296      	cmp	r6, r2
 8004e94:	f300 80ac 	bgt.w	8004ff0 <__kernel_rem_pio2+0x304>
 8004e98:	f1bb 0f00 	cmp.w	fp, #0
 8004e9c:	dd07      	ble.n	8004eae <__kernel_rem_pio2+0x1c2>
 8004e9e:	f1bb 0f01 	cmp.w	fp, #1
 8004ea2:	f000 80b4 	beq.w	800500e <__kernel_rem_pio2+0x322>
 8004ea6:	f1bb 0f02 	cmp.w	fp, #2
 8004eaa:	f000 80ba 	beq.w	8005022 <__kernel_rem_pio2+0x336>
 8004eae:	9b00      	ldr	r3, [sp, #0]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d14e      	bne.n	8004f52 <__kernel_rem_pio2+0x266>
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	2000      	movs	r0, #0
 8004eba:	4948      	ldr	r1, [pc, #288]	; (8004fdc <__kernel_rem_pio2+0x2f0>)
 8004ebc:	f7fb f954 	bl	8000168 <__aeabi_dsub>
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	4689      	mov	r9, r1
 8004ec4:	2c00      	cmp	r4, #0
 8004ec6:	d044      	beq.n	8004f52 <__kernel_rem_pio2+0x266>
 8004ec8:	465a      	mov	r2, fp
 8004eca:	2000      	movs	r0, #0
 8004ecc:	4943      	ldr	r1, [pc, #268]	; (8004fdc <__kernel_rem_pio2+0x2f0>)
 8004ece:	f000 fd47 	bl	8005960 <scalbn>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	4649      	mov	r1, r9
 8004eda:	f7fb f945 	bl	8000168 <__aeabi_dsub>
 8004ede:	4680      	mov	r8, r0
 8004ee0:	4689      	mov	r9, r1
 8004ee2:	e036      	b.n	8004f52 <__kernel_rem_pio2+0x266>
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	4b3e      	ldr	r3, [pc, #248]	; (8004fe0 <__kernel_rem_pio2+0x2f4>)
 8004ee8:	4620      	mov	r0, r4
 8004eea:	4629      	mov	r1, r5
 8004eec:	f7fb faf4 	bl	80004d8 <__aeabi_dmul>
 8004ef0:	f7fb fda2 	bl	8000a38 <__aeabi_d2iz>
 8004ef4:	f7fb fa86 	bl	8000404 <__aeabi_i2d>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f00:	2200      	movs	r2, #0
 8004f02:	4b38      	ldr	r3, [pc, #224]	; (8004fe4 <__kernel_rem_pio2+0x2f8>)
 8004f04:	f7fb fae8 	bl	80004d8 <__aeabi_dmul>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	4629      	mov	r1, r5
 8004f10:	f7fb f92a 	bl	8000168 <__aeabi_dsub>
 8004f14:	f7fb fd90 	bl	8000a38 <__aeabi_d2iz>
 8004f18:	9b00      	ldr	r3, [sp, #0]
 8004f1a:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f1e:	f843 0b04 	str.w	r0, [r3], #4
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f28:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004f2c:	f7fb f91e 	bl	800016c <__adddf3>
 8004f30:	4604      	mov	r4, r0
 8004f32:	460d      	mov	r5, r1
 8004f34:	e75f      	b.n	8004df6 <__kernel_rem_pio2+0x10a>
 8004f36:	d105      	bne.n	8004f44 <__kernel_rem_pio2+0x258>
 8004f38:	1e73      	subs	r3, r6, #1
 8004f3a:	aa0c      	add	r2, sp, #48	; 0x30
 8004f3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004f40:	15c3      	asrs	r3, r0, #23
 8004f42:	e79b      	b.n	8004e7c <__kernel_rem_pio2+0x190>
 8004f44:	2200      	movs	r2, #0
 8004f46:	4b28      	ldr	r3, [pc, #160]	; (8004fe8 <__kernel_rem_pio2+0x2fc>)
 8004f48:	f7fb fd4c 	bl	80009e4 <__aeabi_dcmpge>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d13e      	bne.n	8004fce <__kernel_rem_pio2+0x2e2>
 8004f50:	9000      	str	r0, [sp, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	2300      	movs	r3, #0
 8004f56:	4640      	mov	r0, r8
 8004f58:	4649      	mov	r1, r9
 8004f5a:	f7fb fd25 	bl	80009a8 <__aeabi_dcmpeq>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	f000 80b1 	beq.w	80050c6 <__kernel_rem_pio2+0x3da>
 8004f64:	1e74      	subs	r4, r6, #1
 8004f66:	4623      	mov	r3, r4
 8004f68:	2200      	movs	r2, #0
 8004f6a:	9902      	ldr	r1, [sp, #8]
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	da5f      	bge.n	8005030 <__kernel_rem_pio2+0x344>
 8004f70:	2a00      	cmp	r2, #0
 8004f72:	d074      	beq.n	800505e <__kernel_rem_pio2+0x372>
 8004f74:	ab0c      	add	r3, sp, #48	; 0x30
 8004f76:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004f7a:	f1ab 0b18 	sub.w	fp, fp, #24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 809f 	beq.w	80050c2 <__kernel_rem_pio2+0x3d6>
 8004f84:	465a      	mov	r2, fp
 8004f86:	2000      	movs	r0, #0
 8004f88:	4914      	ldr	r1, [pc, #80]	; (8004fdc <__kernel_rem_pio2+0x2f0>)
 8004f8a:	f000 fce9 	bl	8005960 <scalbn>
 8004f8e:	46a2      	mov	sl, r4
 8004f90:	4606      	mov	r6, r0
 8004f92:	460f      	mov	r7, r1
 8004f94:	f04f 0800 	mov.w	r8, #0
 8004f98:	ab70      	add	r3, sp, #448	; 0x1c0
 8004f9a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004fe0 <__kernel_rem_pio2+0x2f4>
 8004f9e:	00e5      	lsls	r5, r4, #3
 8004fa0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8004fa4:	f1ba 0f00 	cmp.w	sl, #0
 8004fa8:	f280 80c3 	bge.w	8005132 <__kernel_rem_pio2+0x446>
 8004fac:	4626      	mov	r6, r4
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	f2c0 80f5 	blt.w	800519e <__kernel_rem_pio2+0x4b2>
 8004fb4:	4b0d      	ldr	r3, [pc, #52]	; (8004fec <__kernel_rem_pio2+0x300>)
 8004fb6:	f04f 0a00 	mov.w	sl, #0
 8004fba:	9307      	str	r3, [sp, #28]
 8004fbc:	ab70      	add	r3, sp, #448	; 0x1c0
 8004fbe:	f04f 0b00 	mov.w	fp, #0
 8004fc2:	f04f 0800 	mov.w	r8, #0
 8004fc6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004fca:	1ba7      	subs	r7, r4, r6
 8004fcc:	e0db      	b.n	8005186 <__kernel_rem_pio2+0x49a>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	e757      	b.n	8004e84 <__kernel_rem_pio2+0x198>
 8004fd4:	08005eb0 	.word	0x08005eb0
 8004fd8:	40200000 	.word	0x40200000
 8004fdc:	3ff00000 	.word	0x3ff00000
 8004fe0:	3e700000 	.word	0x3e700000
 8004fe4:	41700000 	.word	0x41700000
 8004fe8:	3fe00000 	.word	0x3fe00000
 8004fec:	08005e70 	.word	0x08005e70
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	b944      	cbnz	r4, 8005006 <__kernel_rem_pio2+0x31a>
 8004ff4:	b11b      	cbz	r3, 8004ffe <__kernel_rem_pio2+0x312>
 8004ff6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	461c      	mov	r4, r3
 8005000:	3201      	adds	r2, #1
 8005002:	3704      	adds	r7, #4
 8005004:	e745      	b.n	8004e92 <__kernel_rem_pio2+0x1a6>
 8005006:	1acb      	subs	r3, r1, r3
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	4623      	mov	r3, r4
 800500c:	e7f7      	b.n	8004ffe <__kernel_rem_pio2+0x312>
 800500e:	1e72      	subs	r2, r6, #1
 8005010:	ab0c      	add	r3, sp, #48	; 0x30
 8005012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005016:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800501a:	a90c      	add	r1, sp, #48	; 0x30
 800501c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005020:	e745      	b.n	8004eae <__kernel_rem_pio2+0x1c2>
 8005022:	1e72      	subs	r2, r6, #1
 8005024:	ab0c      	add	r3, sp, #48	; 0x30
 8005026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800502a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800502e:	e7f4      	b.n	800501a <__kernel_rem_pio2+0x32e>
 8005030:	a90c      	add	r1, sp, #48	; 0x30
 8005032:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005036:	3b01      	subs	r3, #1
 8005038:	430a      	orrs	r2, r1
 800503a:	e796      	b.n	8004f6a <__kernel_rem_pio2+0x27e>
 800503c:	3401      	adds	r4, #1
 800503e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005042:	2a00      	cmp	r2, #0
 8005044:	d0fa      	beq.n	800503c <__kernel_rem_pio2+0x350>
 8005046:	9b08      	ldr	r3, [sp, #32]
 8005048:	f106 0801 	add.w	r8, r6, #1
 800504c:	18f5      	adds	r5, r6, r3
 800504e:	ab20      	add	r3, sp, #128	; 0x80
 8005050:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005054:	4434      	add	r4, r6
 8005056:	4544      	cmp	r4, r8
 8005058:	da04      	bge.n	8005064 <__kernel_rem_pio2+0x378>
 800505a:	4626      	mov	r6, r4
 800505c:	e6bf      	b.n	8004dde <__kernel_rem_pio2+0xf2>
 800505e:	2401      	movs	r4, #1
 8005060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005062:	e7ec      	b.n	800503e <__kernel_rem_pio2+0x352>
 8005064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005066:	f04f 0900 	mov.w	r9, #0
 800506a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800506e:	f7fb f9c9 	bl	8000404 <__aeabi_i2d>
 8005072:	2600      	movs	r6, #0
 8005074:	2700      	movs	r7, #0
 8005076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005078:	e9c5 0100 	strd	r0, r1, [r5]
 800507c:	3b08      	subs	r3, #8
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	9504      	str	r5, [sp, #16]
 8005082:	9b07      	ldr	r3, [sp, #28]
 8005084:	4599      	cmp	r9, r3
 8005086:	dd05      	ble.n	8005094 <__kernel_rem_pio2+0x3a8>
 8005088:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800508c:	f108 0801 	add.w	r8, r8, #1
 8005090:	3508      	adds	r5, #8
 8005092:	e7e0      	b.n	8005056 <__kernel_rem_pio2+0x36a>
 8005094:	f8dd c010 	ldr.w	ip, [sp, #16]
 8005098:	9900      	ldr	r1, [sp, #0]
 800509a:	f109 0901 	add.w	r9, r9, #1
 800509e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80050a2:	9100      	str	r1, [sp, #0]
 80050a4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80050a8:	f8cd c010 	str.w	ip, [sp, #16]
 80050ac:	f7fb fa14 	bl	80004d8 <__aeabi_dmul>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4630      	mov	r0, r6
 80050b6:	4639      	mov	r1, r7
 80050b8:	f7fb f858 	bl	800016c <__adddf3>
 80050bc:	4606      	mov	r6, r0
 80050be:	460f      	mov	r7, r1
 80050c0:	e7df      	b.n	8005082 <__kernel_rem_pio2+0x396>
 80050c2:	3c01      	subs	r4, #1
 80050c4:	e756      	b.n	8004f74 <__kernel_rem_pio2+0x288>
 80050c6:	f1cb 0200 	rsb	r2, fp, #0
 80050ca:	4640      	mov	r0, r8
 80050cc:	4649      	mov	r1, r9
 80050ce:	f000 fc47 	bl	8005960 <scalbn>
 80050d2:	2200      	movs	r2, #0
 80050d4:	4ba4      	ldr	r3, [pc, #656]	; (8005368 <__kernel_rem_pio2+0x67c>)
 80050d6:	4604      	mov	r4, r0
 80050d8:	460d      	mov	r5, r1
 80050da:	f7fb fc83 	bl	80009e4 <__aeabi_dcmpge>
 80050de:	b1f8      	cbz	r0, 8005120 <__kernel_rem_pio2+0x434>
 80050e0:	2200      	movs	r2, #0
 80050e2:	4ba2      	ldr	r3, [pc, #648]	; (800536c <__kernel_rem_pio2+0x680>)
 80050e4:	4620      	mov	r0, r4
 80050e6:	4629      	mov	r1, r5
 80050e8:	f7fb f9f6 	bl	80004d8 <__aeabi_dmul>
 80050ec:	f7fb fca4 	bl	8000a38 <__aeabi_d2iz>
 80050f0:	4607      	mov	r7, r0
 80050f2:	f7fb f987 	bl	8000404 <__aeabi_i2d>
 80050f6:	2200      	movs	r2, #0
 80050f8:	4b9b      	ldr	r3, [pc, #620]	; (8005368 <__kernel_rem_pio2+0x67c>)
 80050fa:	f7fb f9ed 	bl	80004d8 <__aeabi_dmul>
 80050fe:	460b      	mov	r3, r1
 8005100:	4602      	mov	r2, r0
 8005102:	4629      	mov	r1, r5
 8005104:	4620      	mov	r0, r4
 8005106:	f7fb f82f 	bl	8000168 <__aeabi_dsub>
 800510a:	f7fb fc95 	bl	8000a38 <__aeabi_d2iz>
 800510e:	1c74      	adds	r4, r6, #1
 8005110:	ab0c      	add	r3, sp, #48	; 0x30
 8005112:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005116:	f10b 0b18 	add.w	fp, fp, #24
 800511a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800511e:	e731      	b.n	8004f84 <__kernel_rem_pio2+0x298>
 8005120:	4620      	mov	r0, r4
 8005122:	4629      	mov	r1, r5
 8005124:	f7fb fc88 	bl	8000a38 <__aeabi_d2iz>
 8005128:	ab0c      	add	r3, sp, #48	; 0x30
 800512a:	4634      	mov	r4, r6
 800512c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005130:	e728      	b.n	8004f84 <__kernel_rem_pio2+0x298>
 8005132:	ab0c      	add	r3, sp, #48	; 0x30
 8005134:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005138:	f7fb f964 	bl	8000404 <__aeabi_i2d>
 800513c:	4632      	mov	r2, r6
 800513e:	463b      	mov	r3, r7
 8005140:	f7fb f9ca 	bl	80004d8 <__aeabi_dmul>
 8005144:	4642      	mov	r2, r8
 8005146:	e86b 0102 	strd	r0, r1, [fp], #-8
 800514a:	464b      	mov	r3, r9
 800514c:	4630      	mov	r0, r6
 800514e:	4639      	mov	r1, r7
 8005150:	f7fb f9c2 	bl	80004d8 <__aeabi_dmul>
 8005154:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005158:	4606      	mov	r6, r0
 800515a:	460f      	mov	r7, r1
 800515c:	e722      	b.n	8004fa4 <__kernel_rem_pio2+0x2b8>
 800515e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005162:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005166:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800516a:	f8cd c01c 	str.w	ip, [sp, #28]
 800516e:	f7fb f9b3 	bl	80004d8 <__aeabi_dmul>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4650      	mov	r0, sl
 8005178:	4659      	mov	r1, fp
 800517a:	f7fa fff7 	bl	800016c <__adddf3>
 800517e:	4682      	mov	sl, r0
 8005180:	468b      	mov	fp, r1
 8005182:	f108 0801 	add.w	r8, r8, #1
 8005186:	9b02      	ldr	r3, [sp, #8]
 8005188:	4598      	cmp	r8, r3
 800518a:	dc01      	bgt.n	8005190 <__kernel_rem_pio2+0x4a4>
 800518c:	45b8      	cmp	r8, r7
 800518e:	dde6      	ble.n	800515e <__kernel_rem_pio2+0x472>
 8005190:	ab48      	add	r3, sp, #288	; 0x120
 8005192:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005196:	e9c7 ab00 	strd	sl, fp, [r7]
 800519a:	3e01      	subs	r6, #1
 800519c:	e707      	b.n	8004fae <__kernel_rem_pio2+0x2c2>
 800519e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	dc09      	bgt.n	80051b8 <__kernel_rem_pio2+0x4cc>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dc32      	bgt.n	800520e <__kernel_rem_pio2+0x522>
 80051a8:	d05a      	beq.n	8005260 <__kernel_rem_pio2+0x574>
 80051aa:	9b04      	ldr	r3, [sp, #16]
 80051ac:	f003 0007 	and.w	r0, r3, #7
 80051b0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80051b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d1f5      	bne.n	80051aa <__kernel_rem_pio2+0x4be>
 80051be:	ab48      	add	r3, sp, #288	; 0x120
 80051c0:	441d      	add	r5, r3
 80051c2:	46aa      	mov	sl, r5
 80051c4:	46a3      	mov	fp, r4
 80051c6:	f1bb 0f00 	cmp.w	fp, #0
 80051ca:	dc76      	bgt.n	80052ba <__kernel_rem_pio2+0x5ce>
 80051cc:	46aa      	mov	sl, r5
 80051ce:	46a3      	mov	fp, r4
 80051d0:	f1bb 0f01 	cmp.w	fp, #1
 80051d4:	f300 8090 	bgt.w	80052f8 <__kernel_rem_pio2+0x60c>
 80051d8:	2700      	movs	r7, #0
 80051da:	463e      	mov	r6, r7
 80051dc:	2c01      	cmp	r4, #1
 80051de:	f300 80aa 	bgt.w	8005336 <__kernel_rem_pio2+0x64a>
 80051e2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80051e6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80051ea:	9b00      	ldr	r3, [sp, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f040 80ac 	bne.w	800534a <__kernel_rem_pio2+0x65e>
 80051f2:	4603      	mov	r3, r0
 80051f4:	462a      	mov	r2, r5
 80051f6:	9806      	ldr	r0, [sp, #24]
 80051f8:	e9c0 2300 	strd	r2, r3, [r0]
 80051fc:	4622      	mov	r2, r4
 80051fe:	460b      	mov	r3, r1
 8005200:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005204:	463a      	mov	r2, r7
 8005206:	4633      	mov	r3, r6
 8005208:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800520c:	e7cd      	b.n	80051aa <__kernel_rem_pio2+0x4be>
 800520e:	2000      	movs	r0, #0
 8005210:	46a0      	mov	r8, r4
 8005212:	4601      	mov	r1, r0
 8005214:	ab48      	add	r3, sp, #288	; 0x120
 8005216:	441d      	add	r5, r3
 8005218:	f1b8 0f00 	cmp.w	r8, #0
 800521c:	da3a      	bge.n	8005294 <__kernel_rem_pio2+0x5a8>
 800521e:	9b00      	ldr	r3, [sp, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d03e      	beq.n	80052a2 <__kernel_rem_pio2+0x5b6>
 8005224:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8005228:	4602      	mov	r2, r0
 800522a:	462b      	mov	r3, r5
 800522c:	9d06      	ldr	r5, [sp, #24]
 800522e:	2601      	movs	r6, #1
 8005230:	e9c5 2300 	strd	r2, r3, [r5]
 8005234:	460b      	mov	r3, r1
 8005236:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800523a:	f7fa ff95 	bl	8000168 <__aeabi_dsub>
 800523e:	4684      	mov	ip, r0
 8005240:	460f      	mov	r7, r1
 8005242:	ad48      	add	r5, sp, #288	; 0x120
 8005244:	42b4      	cmp	r4, r6
 8005246:	f105 0508 	add.w	r5, r5, #8
 800524a:	da2c      	bge.n	80052a6 <__kernel_rem_pio2+0x5ba>
 800524c:	9b00      	ldr	r3, [sp, #0]
 800524e:	b10b      	cbz	r3, 8005254 <__kernel_rem_pio2+0x568>
 8005250:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005254:	4662      	mov	r2, ip
 8005256:	463b      	mov	r3, r7
 8005258:	9906      	ldr	r1, [sp, #24]
 800525a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800525e:	e7a4      	b.n	80051aa <__kernel_rem_pio2+0x4be>
 8005260:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8005262:	ab48      	add	r3, sp, #288	; 0x120
 8005264:	4637      	mov	r7, r6
 8005266:	441d      	add	r5, r3
 8005268:	2c00      	cmp	r4, #0
 800526a:	da09      	bge.n	8005280 <__kernel_rem_pio2+0x594>
 800526c:	9b00      	ldr	r3, [sp, #0]
 800526e:	b10b      	cbz	r3, 8005274 <__kernel_rem_pio2+0x588>
 8005270:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005274:	4632      	mov	r2, r6
 8005276:	463b      	mov	r3, r7
 8005278:	9906      	ldr	r1, [sp, #24]
 800527a:	e9c1 2300 	strd	r2, r3, [r1]
 800527e:	e794      	b.n	80051aa <__kernel_rem_pio2+0x4be>
 8005280:	4630      	mov	r0, r6
 8005282:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005286:	4639      	mov	r1, r7
 8005288:	f7fa ff70 	bl	800016c <__adddf3>
 800528c:	3c01      	subs	r4, #1
 800528e:	4606      	mov	r6, r0
 8005290:	460f      	mov	r7, r1
 8005292:	e7e9      	b.n	8005268 <__kernel_rem_pio2+0x57c>
 8005294:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005298:	f7fa ff68 	bl	800016c <__adddf3>
 800529c:	f108 38ff 	add.w	r8, r8, #4294967295
 80052a0:	e7ba      	b.n	8005218 <__kernel_rem_pio2+0x52c>
 80052a2:	460d      	mov	r5, r1
 80052a4:	e7c0      	b.n	8005228 <__kernel_rem_pio2+0x53c>
 80052a6:	4660      	mov	r0, ip
 80052a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052ac:	4639      	mov	r1, r7
 80052ae:	f7fa ff5d 	bl	800016c <__adddf3>
 80052b2:	3601      	adds	r6, #1
 80052b4:	4684      	mov	ip, r0
 80052b6:	460f      	mov	r7, r1
 80052b8:	e7c4      	b.n	8005244 <__kernel_rem_pio2+0x558>
 80052ba:	e9da 6700 	ldrd	r6, r7, [sl]
 80052be:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80052c2:	4632      	mov	r2, r6
 80052c4:	463b      	mov	r3, r7
 80052c6:	4640      	mov	r0, r8
 80052c8:	4649      	mov	r1, r9
 80052ca:	f7fa ff4f 	bl	800016c <__adddf3>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d6:	4640      	mov	r0, r8
 80052d8:	4649      	mov	r1, r9
 80052da:	f7fa ff45 	bl	8000168 <__aeabi_dsub>
 80052de:	4632      	mov	r2, r6
 80052e0:	463b      	mov	r3, r7
 80052e2:	f7fa ff43 	bl	800016c <__adddf3>
 80052e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ea:	e86a 0102 	strd	r0, r1, [sl], #-8
 80052ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052f2:	e9ca 2300 	strd	r2, r3, [sl]
 80052f6:	e766      	b.n	80051c6 <__kernel_rem_pio2+0x4da>
 80052f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80052fc:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8005300:	4642      	mov	r2, r8
 8005302:	464b      	mov	r3, r9
 8005304:	4630      	mov	r0, r6
 8005306:	4639      	mov	r1, r7
 8005308:	f7fa ff30 	bl	800016c <__adddf3>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005314:	4630      	mov	r0, r6
 8005316:	4639      	mov	r1, r7
 8005318:	f7fa ff26 	bl	8000168 <__aeabi_dsub>
 800531c:	4642      	mov	r2, r8
 800531e:	464b      	mov	r3, r9
 8005320:	f7fa ff24 	bl	800016c <__adddf3>
 8005324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005328:	e86a 0102 	strd	r0, r1, [sl], #-8
 800532c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005330:	e9ca 2300 	strd	r2, r3, [sl]
 8005334:	e74c      	b.n	80051d0 <__kernel_rem_pio2+0x4e4>
 8005336:	4638      	mov	r0, r7
 8005338:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800533c:	4631      	mov	r1, r6
 800533e:	f7fa ff15 	bl	800016c <__adddf3>
 8005342:	3c01      	subs	r4, #1
 8005344:	4607      	mov	r7, r0
 8005346:	460e      	mov	r6, r1
 8005348:	e748      	b.n	80051dc <__kernel_rem_pio2+0x4f0>
 800534a:	9b06      	ldr	r3, [sp, #24]
 800534c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005350:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005354:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005358:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800535c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005360:	601d      	str	r5, [r3, #0]
 8005362:	615e      	str	r6, [r3, #20]
 8005364:	e721      	b.n	80051aa <__kernel_rem_pio2+0x4be>
 8005366:	bf00      	nop
 8005368:	41700000 	.word	0x41700000
 800536c:	3e700000 	.word	0x3e700000

08005370 <__kernel_sin>:
 8005370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005374:	b086      	sub	sp, #24
 8005376:	e9cd 2300 	strd	r2, r3, [sp]
 800537a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800537e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005382:	4682      	mov	sl, r0
 8005384:	460c      	mov	r4, r1
 8005386:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005388:	da03      	bge.n	8005392 <__kernel_sin+0x22>
 800538a:	f7fb fb55 	bl	8000a38 <__aeabi_d2iz>
 800538e:	2800      	cmp	r0, #0
 8005390:	d050      	beq.n	8005434 <__kernel_sin+0xc4>
 8005392:	4652      	mov	r2, sl
 8005394:	4623      	mov	r3, r4
 8005396:	4650      	mov	r0, sl
 8005398:	4621      	mov	r1, r4
 800539a:	f7fb f89d 	bl	80004d8 <__aeabi_dmul>
 800539e:	4606      	mov	r6, r0
 80053a0:	460f      	mov	r7, r1
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4650      	mov	r0, sl
 80053a8:	4621      	mov	r1, r4
 80053aa:	f7fb f895 	bl	80004d8 <__aeabi_dmul>
 80053ae:	a33e      	add	r3, pc, #248	; (adr r3, 80054a8 <__kernel_sin+0x138>)
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	4680      	mov	r8, r0
 80053b6:	4689      	mov	r9, r1
 80053b8:	4630      	mov	r0, r6
 80053ba:	4639      	mov	r1, r7
 80053bc:	f7fb f88c 	bl	80004d8 <__aeabi_dmul>
 80053c0:	a33b      	add	r3, pc, #236	; (adr r3, 80054b0 <__kernel_sin+0x140>)
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f7fa fecf 	bl	8000168 <__aeabi_dsub>
 80053ca:	4632      	mov	r2, r6
 80053cc:	463b      	mov	r3, r7
 80053ce:	f7fb f883 	bl	80004d8 <__aeabi_dmul>
 80053d2:	a339      	add	r3, pc, #228	; (adr r3, 80054b8 <__kernel_sin+0x148>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f7fa fec8 	bl	800016c <__adddf3>
 80053dc:	4632      	mov	r2, r6
 80053de:	463b      	mov	r3, r7
 80053e0:	f7fb f87a 	bl	80004d8 <__aeabi_dmul>
 80053e4:	a336      	add	r3, pc, #216	; (adr r3, 80054c0 <__kernel_sin+0x150>)
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	f7fa febd 	bl	8000168 <__aeabi_dsub>
 80053ee:	4632      	mov	r2, r6
 80053f0:	463b      	mov	r3, r7
 80053f2:	f7fb f871 	bl	80004d8 <__aeabi_dmul>
 80053f6:	a334      	add	r3, pc, #208	; (adr r3, 80054c8 <__kernel_sin+0x158>)
 80053f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fc:	f7fa feb6 	bl	800016c <__adddf3>
 8005400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005404:	b9dd      	cbnz	r5, 800543e <__kernel_sin+0xce>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4630      	mov	r0, r6
 800540c:	4639      	mov	r1, r7
 800540e:	f7fb f863 	bl	80004d8 <__aeabi_dmul>
 8005412:	a32f      	add	r3, pc, #188	; (adr r3, 80054d0 <__kernel_sin+0x160>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f7fa fea6 	bl	8000168 <__aeabi_dsub>
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	f7fb f85a 	bl	80004d8 <__aeabi_dmul>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4650      	mov	r0, sl
 800542a:	4621      	mov	r1, r4
 800542c:	f7fa fe9e 	bl	800016c <__adddf3>
 8005430:	4682      	mov	sl, r0
 8005432:	460c      	mov	r4, r1
 8005434:	4650      	mov	r0, sl
 8005436:	4621      	mov	r1, r4
 8005438:	b006      	add	sp, #24
 800543a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543e:	2200      	movs	r2, #0
 8005440:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005444:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <__kernel_sin+0x168>)
 8005446:	f7fb f847 	bl	80004d8 <__aeabi_dmul>
 800544a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800544e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005452:	4640      	mov	r0, r8
 8005454:	4649      	mov	r1, r9
 8005456:	f7fb f83f 	bl	80004d8 <__aeabi_dmul>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005462:	f7fa fe81 	bl	8000168 <__aeabi_dsub>
 8005466:	4632      	mov	r2, r6
 8005468:	463b      	mov	r3, r7
 800546a:	f7fb f835 	bl	80004d8 <__aeabi_dmul>
 800546e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005472:	f7fa fe79 	bl	8000168 <__aeabi_dsub>
 8005476:	a316      	add	r3, pc, #88	; (adr r3, 80054d0 <__kernel_sin+0x160>)
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	4606      	mov	r6, r0
 800547e:	460f      	mov	r7, r1
 8005480:	4640      	mov	r0, r8
 8005482:	4649      	mov	r1, r9
 8005484:	f7fb f828 	bl	80004d8 <__aeabi_dmul>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4630      	mov	r0, r6
 800548e:	4639      	mov	r1, r7
 8005490:	f7fa fe6c 	bl	800016c <__adddf3>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4650      	mov	r0, sl
 800549a:	4621      	mov	r1, r4
 800549c:	f7fa fe64 	bl	8000168 <__aeabi_dsub>
 80054a0:	e7c6      	b.n	8005430 <__kernel_sin+0xc0>
 80054a2:	bf00      	nop
 80054a4:	f3af 8000 	nop.w
 80054a8:	5acfd57c 	.word	0x5acfd57c
 80054ac:	3de5d93a 	.word	0x3de5d93a
 80054b0:	8a2b9ceb 	.word	0x8a2b9ceb
 80054b4:	3e5ae5e6 	.word	0x3e5ae5e6
 80054b8:	57b1fe7d 	.word	0x57b1fe7d
 80054bc:	3ec71de3 	.word	0x3ec71de3
 80054c0:	19c161d5 	.word	0x19c161d5
 80054c4:	3f2a01a0 	.word	0x3f2a01a0
 80054c8:	1110f8a6 	.word	0x1110f8a6
 80054cc:	3f811111 	.word	0x3f811111
 80054d0:	55555549 	.word	0x55555549
 80054d4:	3fc55555 	.word	0x3fc55555
 80054d8:	3fe00000 	.word	0x3fe00000

080054dc <with_errno>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	4604      	mov	r4, r0
 80054e0:	460d      	mov	r5, r1
 80054e2:	4616      	mov	r6, r2
 80054e4:	f7fe f962 	bl	80037ac <__errno>
 80054e8:	4629      	mov	r1, r5
 80054ea:	6006      	str	r6, [r0, #0]
 80054ec:	4620      	mov	r0, r4
 80054ee:	bd70      	pop	{r4, r5, r6, pc}

080054f0 <xflow>:
 80054f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054f2:	4615      	mov	r5, r2
 80054f4:	461c      	mov	r4, r3
 80054f6:	b180      	cbz	r0, 800551a <xflow+0x2a>
 80054f8:	4610      	mov	r0, r2
 80054fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80054fe:	e9cd 0100 	strd	r0, r1, [sp]
 8005502:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005506:	4628      	mov	r0, r5
 8005508:	4621      	mov	r1, r4
 800550a:	f7fa ffe5 	bl	80004d8 <__aeabi_dmul>
 800550e:	2222      	movs	r2, #34	; 0x22
 8005510:	b003      	add	sp, #12
 8005512:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005516:	f7ff bfe1 	b.w	80054dc <with_errno>
 800551a:	4610      	mov	r0, r2
 800551c:	4619      	mov	r1, r3
 800551e:	e7ee      	b.n	80054fe <xflow+0xe>

08005520 <__math_uflow>:
 8005520:	2200      	movs	r2, #0
 8005522:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005526:	f7ff bfe3 	b.w	80054f0 <xflow>

0800552a <__math_oflow>:
 800552a:	2200      	movs	r2, #0
 800552c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005530:	f7ff bfde 	b.w	80054f0 <xflow>
 8005534:	0000      	movs	r0, r0
	...

08005538 <atan>:
 8005538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	4bb6      	ldr	r3, [pc, #728]	; (8005818 <atan+0x2e0>)
 800553e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005542:	429e      	cmp	r6, r3
 8005544:	4604      	mov	r4, r0
 8005546:	460d      	mov	r5, r1
 8005548:	468b      	mov	fp, r1
 800554a:	dd17      	ble.n	800557c <atan+0x44>
 800554c:	4bb3      	ldr	r3, [pc, #716]	; (800581c <atan+0x2e4>)
 800554e:	429e      	cmp	r6, r3
 8005550:	dc01      	bgt.n	8005556 <atan+0x1e>
 8005552:	d109      	bne.n	8005568 <atan+0x30>
 8005554:	b140      	cbz	r0, 8005568 <atan+0x30>
 8005556:	4622      	mov	r2, r4
 8005558:	462b      	mov	r3, r5
 800555a:	4620      	mov	r0, r4
 800555c:	4629      	mov	r1, r5
 800555e:	f7fa fe05 	bl	800016c <__adddf3>
 8005562:	4604      	mov	r4, r0
 8005564:	460d      	mov	r5, r1
 8005566:	e005      	b.n	8005574 <atan+0x3c>
 8005568:	f1bb 0f00 	cmp.w	fp, #0
 800556c:	4cac      	ldr	r4, [pc, #688]	; (8005820 <atan+0x2e8>)
 800556e:	f300 8121 	bgt.w	80057b4 <atan+0x27c>
 8005572:	4dac      	ldr	r5, [pc, #688]	; (8005824 <atan+0x2ec>)
 8005574:	4620      	mov	r0, r4
 8005576:	4629      	mov	r1, r5
 8005578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	4baa      	ldr	r3, [pc, #680]	; (8005828 <atan+0x2f0>)
 800557e:	429e      	cmp	r6, r3
 8005580:	dc11      	bgt.n	80055a6 <atan+0x6e>
 8005582:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005586:	429e      	cmp	r6, r3
 8005588:	dc0a      	bgt.n	80055a0 <atan+0x68>
 800558a:	a38b      	add	r3, pc, #556	; (adr r3, 80057b8 <atan+0x280>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fa fdec 	bl	800016c <__adddf3>
 8005594:	2200      	movs	r2, #0
 8005596:	4ba5      	ldr	r3, [pc, #660]	; (800582c <atan+0x2f4>)
 8005598:	f7fb fa2e 	bl	80009f8 <__aeabi_dcmpgt>
 800559c:	2800      	cmp	r0, #0
 800559e:	d1e9      	bne.n	8005574 <atan+0x3c>
 80055a0:	f04f 3aff 	mov.w	sl, #4294967295
 80055a4:	e027      	b.n	80055f6 <atan+0xbe>
 80055a6:	f000 f951 	bl	800584c <fabs>
 80055aa:	4ba1      	ldr	r3, [pc, #644]	; (8005830 <atan+0x2f8>)
 80055ac:	4604      	mov	r4, r0
 80055ae:	429e      	cmp	r6, r3
 80055b0:	460d      	mov	r5, r1
 80055b2:	f300 80b8 	bgt.w	8005726 <atan+0x1ee>
 80055b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80055ba:	429e      	cmp	r6, r3
 80055bc:	f300 809c 	bgt.w	80056f8 <atan+0x1c0>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	f7fa fdd2 	bl	800016c <__adddf3>
 80055c8:	2200      	movs	r2, #0
 80055ca:	4b98      	ldr	r3, [pc, #608]	; (800582c <atan+0x2f4>)
 80055cc:	f7fa fdcc 	bl	8000168 <__aeabi_dsub>
 80055d0:	2200      	movs	r2, #0
 80055d2:	4606      	mov	r6, r0
 80055d4:	460f      	mov	r7, r1
 80055d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055da:	4620      	mov	r0, r4
 80055dc:	4629      	mov	r1, r5
 80055de:	f7fa fdc5 	bl	800016c <__adddf3>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4630      	mov	r0, r6
 80055e8:	4639      	mov	r1, r7
 80055ea:	f7fb f89f 	bl	800072c <__aeabi_ddiv>
 80055ee:	f04f 0a00 	mov.w	sl, #0
 80055f2:	4604      	mov	r4, r0
 80055f4:	460d      	mov	r5, r1
 80055f6:	4622      	mov	r2, r4
 80055f8:	462b      	mov	r3, r5
 80055fa:	4620      	mov	r0, r4
 80055fc:	4629      	mov	r1, r5
 80055fe:	f7fa ff6b 	bl	80004d8 <__aeabi_dmul>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4680      	mov	r8, r0
 8005608:	4689      	mov	r9, r1
 800560a:	f7fa ff65 	bl	80004d8 <__aeabi_dmul>
 800560e:	a36c      	add	r3, pc, #432	; (adr r3, 80057c0 <atan+0x288>)
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	4606      	mov	r6, r0
 8005616:	460f      	mov	r7, r1
 8005618:	f7fa ff5e 	bl	80004d8 <__aeabi_dmul>
 800561c:	a36a      	add	r3, pc, #424	; (adr r3, 80057c8 <atan+0x290>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fa fda3 	bl	800016c <__adddf3>
 8005626:	4632      	mov	r2, r6
 8005628:	463b      	mov	r3, r7
 800562a:	f7fa ff55 	bl	80004d8 <__aeabi_dmul>
 800562e:	a368      	add	r3, pc, #416	; (adr r3, 80057d0 <atan+0x298>)
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f7fa fd9a 	bl	800016c <__adddf3>
 8005638:	4632      	mov	r2, r6
 800563a:	463b      	mov	r3, r7
 800563c:	f7fa ff4c 	bl	80004d8 <__aeabi_dmul>
 8005640:	a365      	add	r3, pc, #404	; (adr r3, 80057d8 <atan+0x2a0>)
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f7fa fd91 	bl	800016c <__adddf3>
 800564a:	4632      	mov	r2, r6
 800564c:	463b      	mov	r3, r7
 800564e:	f7fa ff43 	bl	80004d8 <__aeabi_dmul>
 8005652:	a363      	add	r3, pc, #396	; (adr r3, 80057e0 <atan+0x2a8>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fa fd88 	bl	800016c <__adddf3>
 800565c:	4632      	mov	r2, r6
 800565e:	463b      	mov	r3, r7
 8005660:	f7fa ff3a 	bl	80004d8 <__aeabi_dmul>
 8005664:	a360      	add	r3, pc, #384	; (adr r3, 80057e8 <atan+0x2b0>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa fd7f 	bl	800016c <__adddf3>
 800566e:	4642      	mov	r2, r8
 8005670:	464b      	mov	r3, r9
 8005672:	f7fa ff31 	bl	80004d8 <__aeabi_dmul>
 8005676:	a35e      	add	r3, pc, #376	; (adr r3, 80057f0 <atan+0x2b8>)
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	4680      	mov	r8, r0
 800567e:	4689      	mov	r9, r1
 8005680:	4630      	mov	r0, r6
 8005682:	4639      	mov	r1, r7
 8005684:	f7fa ff28 	bl	80004d8 <__aeabi_dmul>
 8005688:	a35b      	add	r3, pc, #364	; (adr r3, 80057f8 <atan+0x2c0>)
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f7fa fd6b 	bl	8000168 <__aeabi_dsub>
 8005692:	4632      	mov	r2, r6
 8005694:	463b      	mov	r3, r7
 8005696:	f7fa ff1f 	bl	80004d8 <__aeabi_dmul>
 800569a:	a359      	add	r3, pc, #356	; (adr r3, 8005800 <atan+0x2c8>)
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fa fd62 	bl	8000168 <__aeabi_dsub>
 80056a4:	4632      	mov	r2, r6
 80056a6:	463b      	mov	r3, r7
 80056a8:	f7fa ff16 	bl	80004d8 <__aeabi_dmul>
 80056ac:	a356      	add	r3, pc, #344	; (adr r3, 8005808 <atan+0x2d0>)
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f7fa fd59 	bl	8000168 <__aeabi_dsub>
 80056b6:	4632      	mov	r2, r6
 80056b8:	463b      	mov	r3, r7
 80056ba:	f7fa ff0d 	bl	80004d8 <__aeabi_dmul>
 80056be:	a354      	add	r3, pc, #336	; (adr r3, 8005810 <atan+0x2d8>)
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f7fa fd50 	bl	8000168 <__aeabi_dsub>
 80056c8:	4632      	mov	r2, r6
 80056ca:	463b      	mov	r3, r7
 80056cc:	f7fa ff04 	bl	80004d8 <__aeabi_dmul>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4640      	mov	r0, r8
 80056d6:	4649      	mov	r1, r9
 80056d8:	f7fa fd48 	bl	800016c <__adddf3>
 80056dc:	4622      	mov	r2, r4
 80056de:	462b      	mov	r3, r5
 80056e0:	f7fa fefa 	bl	80004d8 <__aeabi_dmul>
 80056e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	d144      	bne.n	8005778 <atan+0x240>
 80056ee:	4620      	mov	r0, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	f7fa fd39 	bl	8000168 <__aeabi_dsub>
 80056f6:	e734      	b.n	8005562 <atan+0x2a>
 80056f8:	2200      	movs	r2, #0
 80056fa:	4b4c      	ldr	r3, [pc, #304]	; (800582c <atan+0x2f4>)
 80056fc:	f7fa fd34 	bl	8000168 <__aeabi_dsub>
 8005700:	2200      	movs	r2, #0
 8005702:	4606      	mov	r6, r0
 8005704:	460f      	mov	r7, r1
 8005706:	4620      	mov	r0, r4
 8005708:	4629      	mov	r1, r5
 800570a:	4b48      	ldr	r3, [pc, #288]	; (800582c <atan+0x2f4>)
 800570c:	f7fa fd2e 	bl	800016c <__adddf3>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4630      	mov	r0, r6
 8005716:	4639      	mov	r1, r7
 8005718:	f7fb f808 	bl	800072c <__aeabi_ddiv>
 800571c:	f04f 0a01 	mov.w	sl, #1
 8005720:	4604      	mov	r4, r0
 8005722:	460d      	mov	r5, r1
 8005724:	e767      	b.n	80055f6 <atan+0xbe>
 8005726:	4b43      	ldr	r3, [pc, #268]	; (8005834 <atan+0x2fc>)
 8005728:	429e      	cmp	r6, r3
 800572a:	da1a      	bge.n	8005762 <atan+0x22a>
 800572c:	2200      	movs	r2, #0
 800572e:	4b42      	ldr	r3, [pc, #264]	; (8005838 <atan+0x300>)
 8005730:	f7fa fd1a 	bl	8000168 <__aeabi_dsub>
 8005734:	2200      	movs	r2, #0
 8005736:	4606      	mov	r6, r0
 8005738:	460f      	mov	r7, r1
 800573a:	4620      	mov	r0, r4
 800573c:	4629      	mov	r1, r5
 800573e:	4b3e      	ldr	r3, [pc, #248]	; (8005838 <atan+0x300>)
 8005740:	f7fa feca 	bl	80004d8 <__aeabi_dmul>
 8005744:	2200      	movs	r2, #0
 8005746:	4b39      	ldr	r3, [pc, #228]	; (800582c <atan+0x2f4>)
 8005748:	f7fa fd10 	bl	800016c <__adddf3>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4630      	mov	r0, r6
 8005752:	4639      	mov	r1, r7
 8005754:	f7fa ffea 	bl	800072c <__aeabi_ddiv>
 8005758:	f04f 0a02 	mov.w	sl, #2
 800575c:	4604      	mov	r4, r0
 800575e:	460d      	mov	r5, r1
 8005760:	e749      	b.n	80055f6 <atan+0xbe>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	2000      	movs	r0, #0
 8005768:	4934      	ldr	r1, [pc, #208]	; (800583c <atan+0x304>)
 800576a:	f7fa ffdf 	bl	800072c <__aeabi_ddiv>
 800576e:	f04f 0a03 	mov.w	sl, #3
 8005772:	4604      	mov	r4, r0
 8005774:	460d      	mov	r5, r1
 8005776:	e73e      	b.n	80055f6 <atan+0xbe>
 8005778:	4b31      	ldr	r3, [pc, #196]	; (8005840 <atan+0x308>)
 800577a:	4e32      	ldr	r6, [pc, #200]	; (8005844 <atan+0x30c>)
 800577c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005780:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005784:	e9da 2300 	ldrd	r2, r3, [sl]
 8005788:	f7fa fcee 	bl	8000168 <__aeabi_dsub>
 800578c:	4622      	mov	r2, r4
 800578e:	462b      	mov	r3, r5
 8005790:	f7fa fcea 	bl	8000168 <__aeabi_dsub>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	e9d6 0100 	ldrd	r0, r1, [r6]
 800579c:	f7fa fce4 	bl	8000168 <__aeabi_dsub>
 80057a0:	f1bb 0f00 	cmp.w	fp, #0
 80057a4:	4604      	mov	r4, r0
 80057a6:	460d      	mov	r5, r1
 80057a8:	f6bf aee4 	bge.w	8005574 <atan+0x3c>
 80057ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057b0:	461d      	mov	r5, r3
 80057b2:	e6df      	b.n	8005574 <atan+0x3c>
 80057b4:	4d24      	ldr	r5, [pc, #144]	; (8005848 <atan+0x310>)
 80057b6:	e6dd      	b.n	8005574 <atan+0x3c>
 80057b8:	8800759c 	.word	0x8800759c
 80057bc:	7e37e43c 	.word	0x7e37e43c
 80057c0:	e322da11 	.word	0xe322da11
 80057c4:	3f90ad3a 	.word	0x3f90ad3a
 80057c8:	24760deb 	.word	0x24760deb
 80057cc:	3fa97b4b 	.word	0x3fa97b4b
 80057d0:	a0d03d51 	.word	0xa0d03d51
 80057d4:	3fb10d66 	.word	0x3fb10d66
 80057d8:	c54c206e 	.word	0xc54c206e
 80057dc:	3fb745cd 	.word	0x3fb745cd
 80057e0:	920083ff 	.word	0x920083ff
 80057e4:	3fc24924 	.word	0x3fc24924
 80057e8:	5555550d 	.word	0x5555550d
 80057ec:	3fd55555 	.word	0x3fd55555
 80057f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80057f4:	bfa2b444 	.word	0xbfa2b444
 80057f8:	52defd9a 	.word	0x52defd9a
 80057fc:	3fadde2d 	.word	0x3fadde2d
 8005800:	af749a6d 	.word	0xaf749a6d
 8005804:	3fb3b0f2 	.word	0x3fb3b0f2
 8005808:	fe231671 	.word	0xfe231671
 800580c:	3fbc71c6 	.word	0x3fbc71c6
 8005810:	9998ebc4 	.word	0x9998ebc4
 8005814:	3fc99999 	.word	0x3fc99999
 8005818:	440fffff 	.word	0x440fffff
 800581c:	7ff00000 	.word	0x7ff00000
 8005820:	54442d18 	.word	0x54442d18
 8005824:	bff921fb 	.word	0xbff921fb
 8005828:	3fdbffff 	.word	0x3fdbffff
 800582c:	3ff00000 	.word	0x3ff00000
 8005830:	3ff2ffff 	.word	0x3ff2ffff
 8005834:	40038000 	.word	0x40038000
 8005838:	3ff80000 	.word	0x3ff80000
 800583c:	bff00000 	.word	0xbff00000
 8005840:	08005ee0 	.word	0x08005ee0
 8005844:	08005ec0 	.word	0x08005ec0
 8005848:	3ff921fb 	.word	0x3ff921fb

0800584c <fabs>:
 800584c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005850:	4770      	bx	lr

08005852 <finite>:
 8005852:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8005856:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800585a:	0fc0      	lsrs	r0, r0, #31
 800585c:	4770      	bx	lr
	...

08005860 <floor>:
 8005860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005864:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005868:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800586c:	2e13      	cmp	r6, #19
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4607      	mov	r7, r0
 8005874:	460c      	mov	r4, r1
 8005876:	4605      	mov	r5, r0
 8005878:	dc33      	bgt.n	80058e2 <floor+0x82>
 800587a:	2e00      	cmp	r6, #0
 800587c:	da14      	bge.n	80058a8 <floor+0x48>
 800587e:	a334      	add	r3, pc, #208	; (adr r3, 8005950 <floor+0xf0>)
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f7fa fc72 	bl	800016c <__adddf3>
 8005888:	2200      	movs	r2, #0
 800588a:	2300      	movs	r3, #0
 800588c:	f7fb f8b4 	bl	80009f8 <__aeabi_dcmpgt>
 8005890:	b138      	cbz	r0, 80058a2 <floor+0x42>
 8005892:	2c00      	cmp	r4, #0
 8005894:	da58      	bge.n	8005948 <floor+0xe8>
 8005896:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800589a:	431d      	orrs	r5, r3
 800589c:	d001      	beq.n	80058a2 <floor+0x42>
 800589e:	2500      	movs	r5, #0
 80058a0:	4c2d      	ldr	r4, [pc, #180]	; (8005958 <floor+0xf8>)
 80058a2:	4623      	mov	r3, r4
 80058a4:	462f      	mov	r7, r5
 80058a6:	e025      	b.n	80058f4 <floor+0x94>
 80058a8:	4a2c      	ldr	r2, [pc, #176]	; (800595c <floor+0xfc>)
 80058aa:	fa42 f806 	asr.w	r8, r2, r6
 80058ae:	ea01 0208 	and.w	r2, r1, r8
 80058b2:	4302      	orrs	r2, r0
 80058b4:	d01e      	beq.n	80058f4 <floor+0x94>
 80058b6:	a326      	add	r3, pc, #152	; (adr r3, 8005950 <floor+0xf0>)
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f7fa fc56 	bl	800016c <__adddf3>
 80058c0:	2200      	movs	r2, #0
 80058c2:	2300      	movs	r3, #0
 80058c4:	f7fb f898 	bl	80009f8 <__aeabi_dcmpgt>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d0ea      	beq.n	80058a2 <floor+0x42>
 80058cc:	2c00      	cmp	r4, #0
 80058ce:	bfbe      	ittt	lt
 80058d0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80058d4:	fa43 f606 	asrlt.w	r6, r3, r6
 80058d8:	19a4      	addlt	r4, r4, r6
 80058da:	2500      	movs	r5, #0
 80058dc:	ea24 0408 	bic.w	r4, r4, r8
 80058e0:	e7df      	b.n	80058a2 <floor+0x42>
 80058e2:	2e33      	cmp	r6, #51	; 0x33
 80058e4:	dd0a      	ble.n	80058fc <floor+0x9c>
 80058e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80058ea:	d103      	bne.n	80058f4 <floor+0x94>
 80058ec:	f7fa fc3e 	bl	800016c <__adddf3>
 80058f0:	4607      	mov	r7, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4638      	mov	r0, r7
 80058f6:	4619      	mov	r1, r3
 80058f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005900:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005904:	fa22 f808 	lsr.w	r8, r2, r8
 8005908:	ea18 0f00 	tst.w	r8, r0
 800590c:	d0f2      	beq.n	80058f4 <floor+0x94>
 800590e:	a310      	add	r3, pc, #64	; (adr r3, 8005950 <floor+0xf0>)
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	f7fa fc2a 	bl	800016c <__adddf3>
 8005918:	2200      	movs	r2, #0
 800591a:	2300      	movs	r3, #0
 800591c:	f7fb f86c 	bl	80009f8 <__aeabi_dcmpgt>
 8005920:	2800      	cmp	r0, #0
 8005922:	d0be      	beq.n	80058a2 <floor+0x42>
 8005924:	2c00      	cmp	r4, #0
 8005926:	da02      	bge.n	800592e <floor+0xce>
 8005928:	2e14      	cmp	r6, #20
 800592a:	d103      	bne.n	8005934 <floor+0xd4>
 800592c:	3401      	adds	r4, #1
 800592e:	ea25 0508 	bic.w	r5, r5, r8
 8005932:	e7b6      	b.n	80058a2 <floor+0x42>
 8005934:	2301      	movs	r3, #1
 8005936:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800593a:	fa03 f606 	lsl.w	r6, r3, r6
 800593e:	4435      	add	r5, r6
 8005940:	42bd      	cmp	r5, r7
 8005942:	bf38      	it	cc
 8005944:	18e4      	addcc	r4, r4, r3
 8005946:	e7f2      	b.n	800592e <floor+0xce>
 8005948:	2500      	movs	r5, #0
 800594a:	462c      	mov	r4, r5
 800594c:	e7a9      	b.n	80058a2 <floor+0x42>
 800594e:	bf00      	nop
 8005950:	8800759c 	.word	0x8800759c
 8005954:	7e37e43c 	.word	0x7e37e43c
 8005958:	bff00000 	.word	0xbff00000
 800595c:	000fffff 	.word	0x000fffff

08005960 <scalbn>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005966:	4604      	mov	r4, r0
 8005968:	460d      	mov	r5, r1
 800596a:	4617      	mov	r7, r2
 800596c:	460b      	mov	r3, r1
 800596e:	b996      	cbnz	r6, 8005996 <scalbn+0x36>
 8005970:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005974:	4303      	orrs	r3, r0
 8005976:	d039      	beq.n	80059ec <scalbn+0x8c>
 8005978:	4b33      	ldr	r3, [pc, #204]	; (8005a48 <scalbn+0xe8>)
 800597a:	2200      	movs	r2, #0
 800597c:	f7fa fdac 	bl	80004d8 <__aeabi_dmul>
 8005980:	4b32      	ldr	r3, [pc, #200]	; (8005a4c <scalbn+0xec>)
 8005982:	4604      	mov	r4, r0
 8005984:	429f      	cmp	r7, r3
 8005986:	460d      	mov	r5, r1
 8005988:	da0f      	bge.n	80059aa <scalbn+0x4a>
 800598a:	a32b      	add	r3, pc, #172	; (adr r3, 8005a38 <scalbn+0xd8>)
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f7fa fda2 	bl	80004d8 <__aeabi_dmul>
 8005994:	e006      	b.n	80059a4 <scalbn+0x44>
 8005996:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800599a:	4296      	cmp	r6, r2
 800599c:	d10a      	bne.n	80059b4 <scalbn+0x54>
 800599e:	4602      	mov	r2, r0
 80059a0:	f7fa fbe4 	bl	800016c <__adddf3>
 80059a4:	4604      	mov	r4, r0
 80059a6:	460d      	mov	r5, r1
 80059a8:	e020      	b.n	80059ec <scalbn+0x8c>
 80059aa:	460b      	mov	r3, r1
 80059ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80059b0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80059b4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80059b8:	19b9      	adds	r1, r7, r6
 80059ba:	4291      	cmp	r1, r2
 80059bc:	dd0e      	ble.n	80059dc <scalbn+0x7c>
 80059be:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80059c2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80059c6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80059ca:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80059ce:	4820      	ldr	r0, [pc, #128]	; (8005a50 <scalbn+0xf0>)
 80059d0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80059d4:	a31a      	add	r3, pc, #104	; (adr r3, 8005a40 <scalbn+0xe0>)
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	e7d9      	b.n	8005990 <scalbn+0x30>
 80059dc:	2900      	cmp	r1, #0
 80059de:	dd08      	ble.n	80059f2 <scalbn+0x92>
 80059e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80059e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80059ec:	4620      	mov	r0, r4
 80059ee:	4629      	mov	r1, r5
 80059f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80059f6:	da12      	bge.n	8005a1e <scalbn+0xbe>
 80059f8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80059fc:	429f      	cmp	r7, r3
 80059fe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005a02:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8005a06:	dcdc      	bgt.n	80059c2 <scalbn+0x62>
 8005a08:	a30b      	add	r3, pc, #44	; (adr r3, 8005a38 <scalbn+0xd8>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005a12:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005a16:	480f      	ldr	r0, [pc, #60]	; (8005a54 <scalbn+0xf4>)
 8005a18:	f041 011f 	orr.w	r1, r1, #31
 8005a1c:	e7b8      	b.n	8005990 <scalbn+0x30>
 8005a1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a22:	3136      	adds	r1, #54	; 0x36
 8005a24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a28:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	2200      	movs	r2, #0
 8005a32:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <scalbn+0xf8>)
 8005a34:	e7ac      	b.n	8005990 <scalbn+0x30>
 8005a36:	bf00      	nop
 8005a38:	c2f8f359 	.word	0xc2f8f359
 8005a3c:	01a56e1f 	.word	0x01a56e1f
 8005a40:	8800759c 	.word	0x8800759c
 8005a44:	7e37e43c 	.word	0x7e37e43c
 8005a48:	43500000 	.word	0x43500000
 8005a4c:	ffff3cb0 	.word	0xffff3cb0
 8005a50:	8800759c 	.word	0x8800759c
 8005a54:	c2f8f359 	.word	0xc2f8f359
 8005a58:	3c900000 	.word	0x3c900000

08005a5c <_init>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr

08005a68 <_fini>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr
