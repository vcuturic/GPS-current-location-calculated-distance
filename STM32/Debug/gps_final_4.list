
gps_final_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d3c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08006e50  08006e50  00016e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007440  08007440  0002022c  2**0
                  CONTENTS
  4 .ARM          00000000  08007440  08007440  0002022c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007440  08007440  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007444  08007444  00017444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08007448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000230  08007674  00020230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08007674  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b3c  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aef  00000000  00000000  00028d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002a880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002b090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ea9  00000000  00000000  0002b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e40  00000000  00000000  00043681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c92  00000000  00000000  0004d4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003074  00000000  00000000  000d21a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e34 	.word	0x08006e34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	08006e34 	.word	0x08006e34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2iz>:
 8000d44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d4c:	d30f      	bcc.n	8000d6e <__aeabi_f2iz+0x2a>
 8000d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d90d      	bls.n	8000d74 <__aeabi_f2iz+0x30>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d64:	fa23 f002 	lsr.w	r0, r3, r2
 8000d68:	bf18      	it	ne
 8000d6a:	4240      	negne	r0, r0
 8000d6c:	4770      	bx	lr
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	4770      	bx	lr
 8000d74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d78:	d101      	bne.n	8000d7e <__aeabi_f2iz+0x3a>
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	d105      	bne.n	8000d8a <__aeabi_f2iz+0x46>
 8000d7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	bf08      	it	eq
 8000d84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr

08000d90 <haversineDistance>:
#include "stdlib.h"

#define EARTH_RADIUS_KM 6371.0
#define TO_RADIANS(deg) ((deg) * M_PI / 180.0)

double haversineDistance(double lat_1, double lon_1, double lat_2, double lon_2) {
 8000d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d94:	b08e      	sub	sp, #56	; 0x38
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000d9c:	e9c7 2300 	strd	r2, r3, [r7]
    // Convert latitude and longitude from degrees to radians
    lat_1 = TO_RADIANS(lat_1);
 8000da0:	a385      	add	r3, pc, #532	; (adr r3, 8000fb8 <haversineDistance+0x228>)
 8000da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000daa:	f7ff fb95 	bl	80004d8 <__aeabi_dmul>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	4b83      	ldr	r3, [pc, #524]	; (8000fc8 <haversineDistance+0x238>)
 8000dbc:	f7ff fcb6 	bl	800072c <__aeabi_ddiv>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    lon_1 = TO_RADIANS(lon_1);
 8000dc8:	a37b      	add	r3, pc, #492	; (adr r3, 8000fb8 <haversineDistance+0x228>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000dd2:	f7ff fb81 	bl	80004d8 <__aeabi_dmul>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	4b79      	ldr	r3, [pc, #484]	; (8000fc8 <haversineDistance+0x238>)
 8000de4:	f7ff fca2 	bl	800072c <__aeabi_ddiv>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	e9c7 2300 	strd	r2, r3, [r7]
    lat_2 = TO_RADIANS(lat_2);
 8000df0:	a371      	add	r3, pc, #452	; (adr r3, 8000fb8 <haversineDistance+0x228>)
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000dfa:	f7ff fb6d 	bl	80004d8 <__aeabi_dmul>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4610      	mov	r0, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	4b6f      	ldr	r3, [pc, #444]	; (8000fc8 <haversineDistance+0x238>)
 8000e0c:	f7ff fc8e 	bl	800072c <__aeabi_ddiv>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    lon_2 = TO_RADIANS(lon_2);
 8000e18:	a367      	add	r3, pc, #412	; (adr r3, 8000fb8 <haversineDistance+0x228>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000e22:	f7ff fb59 	bl	80004d8 <__aeabi_dmul>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4b65      	ldr	r3, [pc, #404]	; (8000fc8 <haversineDistance+0x238>)
 8000e34:	f7ff fc7a 	bl	800072c <__aeabi_ddiv>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    // Calculate the haversine distance
    double dlat = lat_2 - lat_1;
 8000e40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e44:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000e48:	f7ff f98e 	bl	8000168 <__aeabi_dsub>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double dlon = lon_2 - lon_1;
 8000e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e58:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000e5c:	f7ff f984 	bl	8000168 <__aeabi_dsub>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double a = sin(dlat / 2.0) * sin(dlat / 2.0) +
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000e74:	f7ff fc5a 	bl	800072c <__aeabi_ddiv>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f003 fef8 	bl	8004c74 <sin>
 8000e84:	4604      	mov	r4, r0
 8000e86:	460d      	mov	r5, r1
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000e94:	f7ff fc4a 	bl	800072c <__aeabi_ddiv>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f003 fee8 	bl	8004c74 <sin>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	4629      	mov	r1, r5
 8000eac:	f7ff fb14 	bl	80004d8 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4690      	mov	r8, r2
 8000eb6:	4699      	mov	r9, r3
               cos(lat_1) * cos(lat_2) * sin(dlon / 2.0) * sin(dlon / 2.0);
 8000eb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ebc:	f003 fe94 	bl	8004be8 <cos>
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	460d      	mov	r5, r1
 8000ec4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000ec8:	f003 fe8e 	bl	8004be8 <cos>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	4629      	mov	r1, r5
 8000ed4:	f7ff fb00 	bl	80004d8 <__aeabi_dmul>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4614      	mov	r4, r2
 8000ede:	461d      	mov	r5, r3
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000eec:	f7ff fc1e 	bl	800072c <__aeabi_ddiv>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f003 febc 	bl	8004c74 <sin>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4620      	mov	r0, r4
 8000f02:	4629      	mov	r1, r5
 8000f04:	f7ff fae8 	bl	80004d8 <__aeabi_dmul>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4614      	mov	r4, r2
 8000f0e:	461d      	mov	r5, r3
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f1c:	f7ff fc06 	bl	800072c <__aeabi_ddiv>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4610      	mov	r0, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	f003 fea4 	bl	8004c74 <sin>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4620      	mov	r0, r4
 8000f32:	4629      	mov	r1, r5
 8000f34:	f7ff fad0 	bl	80004d8 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
    double a = sin(dlat / 2.0) * sin(dlat / 2.0) +
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	4649      	mov	r1, r9
 8000f40:	f7ff f914 	bl	800016c <__adddf3>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	e9c7 2308 	strd	r2, r3, [r7, #32]

    double c = 2.0 * atan2(sqrt(a), sqrt(1 - a));
 8000f4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f50:	f003 ff40 	bl	8004dd4 <sqrt>
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f5c:	f04f 0000 	mov.w	r0, #0
 8000f60:	491a      	ldr	r1, [pc, #104]	; (8000fcc <haversineDistance+0x23c>)
 8000f62:	f7ff f901 	bl	8000168 <__aeabi_dsub>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f003 ff31 	bl	8004dd4 <sqrt>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4620      	mov	r0, r4
 8000f78:	4629      	mov	r1, r5
 8000f7a:	f003 fec1 	bl	8004d00 <atan2>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	f7ff f8f3 	bl	800016c <__adddf3>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double distance = EARTH_RADIUS_KM * c;
 8000f8e:	a30c      	add	r3, pc, #48	; (adr r3, 8000fc0 <haversineDistance+0x230>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f98:	f7ff fa9e 	bl	80004d8 <__aeabi_dmul>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return distance;
 8000fa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	3738      	adds	r7, #56	; 0x38
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	54442d18 	.word	0x54442d18
 8000fbc:	400921fb 	.word	0x400921fb
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	40b8e300 	.word	0x40b8e300
 8000fc8:	40668000 	.word	0x40668000
 8000fcc:	3ff00000 	.word	0x3ff00000

08000fd0 <reverse>:
 */

#include "math.h"

void reverse(char* str, int len)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8000fe4:	e018      	b.n	8001018 <reverse+0x48>
        temp = str[i];
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	441a      	add	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	440b      	add	r3, r1
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	701a      	strb	r2, [r3, #0]
        i++;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
        j--;
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	3b01      	subs	r3, #1
 8001016:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbe2      	blt.n	8000fe6 <reverse+0x16>
    }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <intToStr2>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr2(int x, char str[], int d)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
    while (x) {
 800103c:	e01d      	b.n	800107a <intToStr2+0x4e>
        str[i++] = (x % 10) + '0';
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <intToStr2+0x8c>)
 8001042:	fb83 1302 	smull	r1, r3, r3, r2
 8001046:	1099      	asrs	r1, r3, #2
 8001048:	17d3      	asrs	r3, r2, #31
 800104a:	1ac9      	subs	r1, r1, r3
 800104c:	460b      	mov	r3, r1
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	1ad1      	subs	r1, r2, r3
 8001056:	b2ca      	uxtb	r2, r1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	1c59      	adds	r1, r3, #1
 800105c:	6179      	str	r1, [r7, #20]
 800105e:	4619      	mov	r1, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	440b      	add	r3, r1
 8001064:	3230      	adds	r2, #48	; 0x30
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <intToStr2+0x8c>)
 800106e:	fb82 1203 	smull	r1, r2, r2, r3
 8001072:	1092      	asrs	r2, r2, #2
 8001074:	17db      	asrs	r3, r3, #31
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	60fb      	str	r3, [r7, #12]
    while (x) {
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1de      	bne.n	800103e <intToStr2+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001080:	e007      	b.n	8001092 <intToStr2+0x66>
        str[i++] = '0';
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	617a      	str	r2, [r7, #20]
 8001088:	461a      	mov	r2, r3
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	4413      	add	r3, r2
 800108e:	2230      	movs	r2, #48	; 0x30
 8001090:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbf3      	blt.n	8001082 <intToStr2+0x56>

    reverse(str, i);
 800109a:	6979      	ldr	r1, [r7, #20]
 800109c:	68b8      	ldr	r0, [r7, #8]
 800109e:	f7ff ff97 	bl	8000fd0 <reverse>
    str[i] = '\0';
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	4413      	add	r3, r2
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
    return i;
 80010ac:	697b      	ldr	r3, [r7, #20]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	66666667 	.word	0x66666667

080010bc <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 80010bc:	b5b0      	push	{r4, r5, r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f7ff fe3b 	bl	8000d44 <__aeabi_f2iz>
 80010ce:	4603      	mov	r3, r0
 80010d0:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 80010d2:	69f8      	ldr	r0, [r7, #28]
 80010d4:	f7ff fde2 	bl	8000c9c <__aeabi_i2f>
 80010d8:	4603      	mov	r3, r0
 80010da:	4619      	mov	r1, r3
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff fd27 	bl	8000b30 <__aeabi_fsub>
 80010e2:	4603      	mov	r3, r0
 80010e4:	61bb      	str	r3, [r7, #24]

    // convert integer part to string
    int i = intToStr2(ipart, res, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	69f8      	ldr	r0, [r7, #28]
 80010ec:	f7ff ff9e 	bl	800102c <intToStr2>
 80010f0:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d02c      	beq.n	8001152 <ftoa+0x96>
        res[i] = '.'; // add dot
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	4413      	add	r3, r2
 80010fe:	222e      	movs	r2, #46	; 0x2e
 8001100:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8001102:	69b8      	ldr	r0, [r7, #24]
 8001104:	f7ff f990 	bl	8000428 <__aeabi_f2d>
 8001108:	4604      	mov	r4, r0
 800110a:	460d      	mov	r5, r1
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff f979 	bl	8000404 <__aeabi_i2d>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4910      	ldr	r1, [pc, #64]	; (800115c <ftoa+0xa0>)
 800111c:	f003 fdf2 	bl	8004d04 <pow>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4620      	mov	r0, r4
 8001126:	4629      	mov	r1, r5
 8001128:	f7ff f9d6 	bl	80004d8 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fca8 	bl	8000a88 <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	61bb      	str	r3, [r7, #24]

        intToStr2((int)fpart, res + i + 1, afterpoint);
 800113c:	69b8      	ldr	r0, [r7, #24]
 800113e:	f7ff fe01 	bl	8000d44 <__aeabi_f2iz>
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff ff6d 	bl	800102c <intToStr2>
    }
}
 8001152:	bf00      	nop
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bdb0      	pop	{r4, r5, r7, pc}
 800115a:	bf00      	nop
 800115c:	40240000 	.word	0x40240000

08001160 <mystrcat>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void mystrcat(char *string, char c) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	int len = strlen(string);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7fe ffef 	bl	8000150 <strlen>
 8001172:	4603      	mov	r3, r0
 8001174:	60fb      	str	r3, [r7, #12]

	string[len] = c;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	78fa      	ldrb	r2, [r7, #3]
 800117e:	701a      	strb	r2, [r3, #0]

	string[len + 1] = '\0';
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3301      	adds	r3, #1
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <removeCharacter>:
		str[length - i - 1] = ('0' + num % 10);
		num /= 10;
	}
}

void removeCharacter(char *str, int i) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	if (str == NULL || i < 0 || i >= strlen(str)) {
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01d      	beq.n	80011e0 <removeCharacter+0x4c>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db1a      	blt.n	80011e0 <removeCharacter+0x4c>
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7fe ffd0 	bl	8000150 <strlen>
 80011b0:	4602      	mov	r2, r0
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d913      	bls.n	80011e0 <removeCharacter+0x4c>
		return;
	}

	for (; str[i] != '\0'; i++) {
 80011b8:	e00b      	b.n	80011d2 <removeCharacter+0x3e>
		str[i] = str[i + 1];
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	441a      	add	r2, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	440b      	add	r3, r1
 80011c8:	7812      	ldrb	r2, [r2, #0]
 80011ca:	701a      	strb	r2, [r3, #0]
	for (; str[i] != '\0'; i++) {
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1ed      	bne.n	80011ba <removeCharacter+0x26>
 80011de:	e000      	b.n	80011e2 <removeCharacter+0x4e>
		return;
 80011e0:	bf00      	nop
	}
}
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <fixInput>:

void fixInput(char *receivedCoords) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < strlen(receivedCoords); i++) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e01a      	b.n	800122c <fixInput+0x44>
		char c = receivedCoords[i];
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	72fb      	strb	r3, [r7, #11]
		if (!isdigit(c) && c != '.' && c != ' ') {
 8001200:	7afb      	ldrb	r3, [r7, #11]
 8001202:	3301      	adds	r3, #1
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <fixInput+0x5c>)
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <fixInput+0x3e>
 8001212:	7afb      	ldrb	r3, [r7, #11]
 8001214:	2b2e      	cmp	r3, #46	; 0x2e
 8001216:	d006      	beq.n	8001226 <fixInput+0x3e>
 8001218:	7afb      	ldrb	r3, [r7, #11]
 800121a:	2b20      	cmp	r3, #32
 800121c:	d003      	beq.n	8001226 <fixInput+0x3e>
			removeCharacter(receivedCoords, i);
 800121e:	68f9      	ldr	r1, [r7, #12]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffb7 	bl	8001194 <removeCharacter>
	for (int i = 0; i < strlen(receivedCoords); i++) {
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7fe ff8f 	bl	8000150 <strlen>
 8001232:	4602      	mov	r2, r0
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	429a      	cmp	r2, r3
 8001238:	d8dd      	bhi.n	80011f6 <fixInput+0xe>
		}
	}
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	08006f7a 	.word	0x08006f7a

08001248 <UART_SEND>:

void UART_SEND(char *message) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), 100);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7fe ff7d 	bl	8000150 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	2364      	movs	r3, #100	; 0x64
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4803      	ldr	r0, [pc, #12]	; (800126c <UART_SEND+0x24>)
 8001260:	f001 fdee 	bl	8002e40 <HAL_UART_Transmit>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000024c 	.word	0x2000024c

08001270 <validCoordinates>:

int validCoordinates(char *receivedCoords) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	int countPoints = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < strlen(receivedCoords); i++) {
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e00d      	b.n	800129e <validCoordinates+0x2e>
		char c = receivedCoords[i];
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	73fb      	strb	r3, [r7, #15]
		if (c == '.')
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b2e      	cmp	r3, #46	; 0x2e
 8001290:	d102      	bne.n	8001298 <validCoordinates+0x28>
			countPoints++;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < strlen(receivedCoords); i++) {
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	3301      	adds	r3, #1
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7fe ff56 	bl	8000150 <strlen>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8ea      	bhi.n	8001282 <validCoordinates+0x12>
	}

	if (countPoints > 2)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	dd01      	ble.n	80012b6 <validCoordinates+0x46>
		return 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <validCoordinates+0x48>

	return 1;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <charToNumber>:

int charToNumber(char c) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	return c - '0';
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	3b30      	subs	r3, #48	; 0x30
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <strToFloat>:

float strToFloat(char *str) {
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b08c      	sub	sp, #48	; 0x30
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	int counter;
	int startOfDecimals = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
	float number = 0;
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
	int lenBeforeDecimals = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
	int lenAfterDecimals = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]

	for(int i=0; i<strlen(str); i++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	e015      	b.n	8001324 <strToFloat+0x4c>
		if(str[i] == '.') {
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b2e      	cmp	r3, #46	; 0x2e
 8001302:	d102      	bne.n	800130a <strToFloat+0x32>
			startOfDecimals = 1;
 8001304:	2301      	movs	r3, #1
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
			continue;
 8001308:	e009      	b.n	800131e <strToFloat+0x46>
		}
		else {
			if(!startOfDecimals)
 800130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130c:	2b00      	cmp	r3, #0
 800130e:	d103      	bne.n	8001318 <strToFloat+0x40>
				lenBeforeDecimals++;
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	3301      	adds	r3, #1
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	e002      	b.n	800131e <strToFloat+0x46>
			else
				lenAfterDecimals++;
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	3301      	adds	r3, #1
 800131c:	61fb      	str	r3, [r7, #28]
	for(int i=0; i<strlen(str); i++) {
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	3301      	adds	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7fe ff13 	bl	8000150 <strlen>
 800132a:	4602      	mov	r2, r0
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	429a      	cmp	r2, r3
 8001330:	d8e2      	bhi.n	80012f8 <strToFloat+0x20>
		}

	}

	counter = lenAfterDecimals;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
	int temp_lenBeforeDecimals = lenBeforeDecimals;
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	617b      	str	r3, [r7, #20]
	int temp_lenAfterDecimals = lenAfterDecimals;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<strlen(str); i++) {
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	e07c      	b.n	800143e <strToFloat+0x166>
		if(str[i] == '.')
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b2e      	cmp	r3, #46	; 0x2e
 800134e:	d072      	beq.n	8001436 <strToFloat+0x15e>
			continue;
		if(i<lenBeforeDecimals)
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	429a      	cmp	r2, r3
 8001356:	da35      	bge.n	80013c4 <strToFloat+0xec>
			number += charToNumber(str[i]) * pow(10, --temp_lenBeforeDecimals);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ffad 	bl	80012c0 <charToNumber>
 8001366:	4603      	mov	r3, r0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f84b 	bl	8000404 <__aeabi_i2d>
 800136e:	4604      	mov	r4, r0
 8001370:	460d      	mov	r5, r1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3b01      	subs	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	6978      	ldr	r0, [r7, #20]
 800137a:	f7ff f843 	bl	8000404 <__aeabi_i2d>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	f04f 0000 	mov.w	r0, #0
 8001386:	4934      	ldr	r1, [pc, #208]	; (8001458 <strToFloat+0x180>)
 8001388:	f003 fcbc 	bl	8004d04 <pow>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4620      	mov	r0, r4
 8001392:	4629      	mov	r1, r5
 8001394:	f7ff f8a0 	bl	80004d8 <__aeabi_dmul>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4614      	mov	r4, r2
 800139e:	461d      	mov	r5, r3
 80013a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013a2:	f7ff f841 	bl	8000428 <__aeabi_f2d>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	f7fe fedd 	bl	800016c <__adddf3>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fb65 	bl	8000a88 <__aeabi_d2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
 80013c2:	e039      	b.n	8001438 <strToFloat+0x160>
		else
			number += charToNumber(str[i]) / pow(10, temp_lenAfterDecimals-(--counter));
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff77 	bl	80012c0 <charToNumber>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f815 	bl	8000404 <__aeabi_i2d>
 80013da:	4604      	mov	r4, r0
 80013dc:	460d      	mov	r5, r1
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	3b01      	subs	r3, #1
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f80a 	bl	8000404 <__aeabi_i2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	f04f 0000 	mov.w	r0, #0
 80013f8:	4917      	ldr	r1, [pc, #92]	; (8001458 <strToFloat+0x180>)
 80013fa:	f003 fc83 	bl	8004d04 <pow>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4620      	mov	r0, r4
 8001404:	4629      	mov	r1, r5
 8001406:	f7ff f991 	bl	800072c <__aeabi_ddiv>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4614      	mov	r4, r2
 8001410:	461d      	mov	r5, r3
 8001412:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001414:	f7ff f808 	bl	8000428 <__aeabi_f2d>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4620      	mov	r0, r4
 800141e:	4629      	mov	r1, r5
 8001420:	f7fe fea4 	bl	800016c <__adddf3>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fb2c 	bl	8000a88 <__aeabi_d2f>
 8001430:	4603      	mov	r3, r0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
 8001434:	e000      	b.n	8001438 <strToFloat+0x160>
			continue;
 8001436:	bf00      	nop
	for(int i=0; i<strlen(str); i++) {
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	3301      	adds	r3, #1
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7fe fe86 	bl	8000150 <strlen>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	f63f af7b 	bhi.w	8001344 <strToFloat+0x6c>
	}

	return number;
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001450:	4618      	mov	r0, r3
 8001452:	3730      	adds	r7, #48	; 0x30
 8001454:	46bd      	mov	sp, r7
 8001456:	bdb0      	pop	{r4, r5, r7, pc}
 8001458:	40240000 	.word	0x40240000

0800145c <extractCoordinates>:

void extractCoordinates(char *receivedCoords) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b08e      	sub	sp, #56	; 0x38
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	char latitude[16], longitude[16];
	int idx = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
	int longitudeInput = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	633b      	str	r3, [r7, #48]	; 0x30

	receivedCoords[strlen(receivedCoords) - 1] = '\0'; // drop *
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7fe fe6f 	bl	8000150 <strlen>
 8001472:	4603      	mov	r3, r0
 8001474:	3b01      	subs	r3, #1
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < strlen(receivedCoords); i++) {
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001482:	e02d      	b.n	80014e0 <extractCoordinates+0x84>
		if (receivedCoords[i] != ' ') {
 8001484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b20      	cmp	r3, #32
 800148e:	d01a      	beq.n	80014c6 <extractCoordinates+0x6a>
			if (!longitudeInput)
 8001490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10b      	bne.n	80014ae <extractCoordinates+0x52>
				latitude[idx++] = receivedCoords[i];
 8001496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	441a      	add	r2, r3
 800149c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149e:	1c59      	adds	r1, r3, #1
 80014a0:	6379      	str	r1, [r7, #52]	; 0x34
 80014a2:	7812      	ldrb	r2, [r2, #0]
 80014a4:	3338      	adds	r3, #56	; 0x38
 80014a6:	443b      	add	r3, r7
 80014a8:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80014ac:	e015      	b.n	80014da <extractCoordinates+0x7e>
			else
				longitude[idx++] = receivedCoords[i];
 80014ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	441a      	add	r2, r3
 80014b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b6:	1c59      	adds	r1, r3, #1
 80014b8:	6379      	str	r1, [r7, #52]	; 0x34
 80014ba:	7812      	ldrb	r2, [r2, #0]
 80014bc:	3338      	adds	r3, #56	; 0x38
 80014be:	443b      	add	r3, r7
 80014c0:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80014c4:	e009      	b.n	80014da <extractCoordinates+0x7e>
		} else {
			latitude[idx] = '\0';
 80014c6:	f107 021c 	add.w	r2, r7, #28
 80014ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014cc:	4413      	add	r3, r2
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
			longitudeInput = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
			idx = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < strlen(receivedCoords); i++) {
 80014da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014dc:	3301      	adds	r3, #1
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7fe fe35 	bl	8000150 <strlen>
 80014e6:	4602      	mov	r2, r0
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d8ca      	bhi.n	8001484 <extractCoordinates+0x28>
		}
	}

	longitude[idx] = '\0';
 80014ee:	f107 020c 	add.w	r2, r7, #12
 80014f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f4:	4413      	add	r3, r2
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]

	lat_2 = strToFloat(latitude);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff feea 	bl	80012d8 <strToFloat>
 8001504:	4603      	mov	r3, r0
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe ff8e 	bl	8000428 <__aeabi_f2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	490a      	ldr	r1, [pc, #40]	; (800153c <extractCoordinates+0xe0>)
 8001512:	e9c1 2300 	strd	r2, r3, [r1]
	lon_2 = strToFloat(longitude);
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fedc 	bl	80012d8 <strToFloat>
 8001520:	4603      	mov	r3, r0
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe ff80 	bl	8000428 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4904      	ldr	r1, [pc, #16]	; (8001540 <extractCoordinates+0xe4>)
 800152e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001532:	bf00      	nop
 8001534:	3738      	adds	r7, #56	; 0x38
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200002b8 	.word	0x200002b8
 8001540:	200002c0 	.word	0x200002c0

08001544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b092      	sub	sp, #72	; 0x48
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154a:	f000 fc4f 	bl	8001dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154e:	f000 f89b 	bl	8001688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001552:	f000 f8ff 	bl	8001754 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001556:	f000 f8d3 	bl	8001700 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 800155a:	2201      	movs	r2, #1
 800155c:	493e      	ldr	r1, [pc, #248]	; (8001658 <main+0x114>)
 800155e:	483f      	ldr	r0, [pc, #252]	; (800165c <main+0x118>)
 8001560:	f001 fcf1 	bl	8002f46 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (!writeOn || writeOn == NO_MORE_WRITING) {
 8001564:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <main+0x11c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <main+0x32>
 800156c:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <main+0x11c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d15c      	bne.n	8001630 <main+0xec>
			UART_SEND(listOfGpsData[0]);
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <main+0x120>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe64 	bl	8001248 <UART_SEND>
			UART_SEND(listOfGpsData[1]);
 8001580:	4b38      	ldr	r3, [pc, #224]	; (8001664 <main+0x120>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fe5f 	bl	8001248 <UART_SEND>
			UART_SEND(listOfGpsData[2]);
 800158a:	4b36      	ldr	r3, [pc, #216]	; (8001664 <main+0x120>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fe5a 	bl	8001248 <UART_SEND>

			HAL_Delay(500);
 8001594:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001598:	f000 fc8a 	bl	8001eb0 <HAL_Delay>

			if(writeOn != NO_MORE_WRITING) {
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <main+0x11c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d040      	beq.n	8001628 <main+0xe4>
				nmea_parse(listOfGpsData, &gpsStruct);
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	482e      	ldr	r0, [pc, #184]	; (8001664 <main+0x120>)
 80015ac:	f000 fa4a 	bl	8001a44 <nmea_parse>
				lat_1 = gpsStruct.ggaStruct.latitude;
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ff38 	bl	8000428 <__aeabi_f2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	492a      	ldr	r1, [pc, #168]	; (8001668 <main+0x124>)
 80015be:	e9c1 2300 	strd	r2, r3, [r1]
				lon_1 = gpsStruct.ggaStruct.longitude;
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff2f 	bl	8000428 <__aeabi_f2d>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4927      	ldr	r1, [pc, #156]	; (800166c <main+0x128>)
 80015d0:	e9c1 2300 	strd	r2, r3, [r1]

				ftoa(gpsStruct.ggaStruct.latitude, buffer, 5);
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80015da:	2205      	movs	r2, #5
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fd6d 	bl	80010bc <ftoa>

				UART_SEND(NEW_LINE);
 80015e2:	4823      	ldr	r0, [pc, #140]	; (8001670 <main+0x12c>)
 80015e4:	f7ff fe30 	bl	8001248 <UART_SEND>
				UART_SEND("LAT: ");
 80015e8:	4822      	ldr	r0, [pc, #136]	; (8001674 <main+0x130>)
 80015ea:	f7ff fe2d 	bl	8001248 <UART_SEND>
				UART_SEND(buffer);
 80015ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fe28 	bl	8001248 <UART_SEND>
				UART_SEND(NEW_LINE);
 80015f8:	481d      	ldr	r0, [pc, #116]	; (8001670 <main+0x12c>)
 80015fa:	f7ff fe25 	bl	8001248 <UART_SEND>

				ftoa(gpsStruct.ggaStruct.longitude, buffer, 5);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001604:	2205      	movs	r2, #5
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fd58 	bl	80010bc <ftoa>

				UART_SEND("LONG: ");
 800160c:	481a      	ldr	r0, [pc, #104]	; (8001678 <main+0x134>)
 800160e:	f7ff fe1b 	bl	8001248 <UART_SEND>
				UART_SEND(buffer);
 8001612:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fe16 	bl	8001248 <UART_SEND>
				UART_SEND(NEW_LINE);
 800161c:	4814      	ldr	r0, [pc, #80]	; (8001670 <main+0x12c>)
 800161e:	f7ff fe13 	bl	8001248 <UART_SEND>

				writeOn = 1;
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <main+0x11c>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]
			}

			HAL_Delay(500);
 8001628:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162c:	f000 fc40 	bl	8001eb0 <HAL_Delay>
		}

		if (writeOn == 1) {
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <main+0x11c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d195      	bne.n	8001564 <main+0x20>
			UART_SEND(NEW_LINE);
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <main+0x12c>)
 800163a:	f7ff fe05 	bl	8001248 <UART_SEND>
			UART_SEND(msg_CoordinateInputText);
 800163e:	480f      	ldr	r0, [pc, #60]	; (800167c <main+0x138>)
 8001640:	f7ff fe02 	bl	8001248 <UART_SEND>
			UART_SEND(msg_CoordinateInputTextFormat);
 8001644:	480e      	ldr	r0, [pc, #56]	; (8001680 <main+0x13c>)
 8001646:	f7ff fdff 	bl	8001248 <UART_SEND>
			UART_SEND(msg_Hint);
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <main+0x140>)
 800164c:	f7ff fdfc 	bl	8001248 <UART_SEND>
			writeOn = 2;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <main+0x11c>)
 8001652:	2202      	movs	r2, #2
 8001654:	601a      	str	r2, [r3, #0]
		if (!writeOn || writeOn == NO_MORE_WRITING) {
 8001656:	e785      	b.n	8001564 <main+0x20>
 8001658:	200002e8 	.word	0x200002e8
 800165c:	2000024c 	.word	0x2000024c
 8001660:	20000294 	.word	0x20000294
 8001664:	20000000 	.word	0x20000000
 8001668:	200002a8 	.word	0x200002a8
 800166c:	200002b0 	.word	0x200002b0
 8001670:	08006f28 	.word	0x08006f28
 8001674:	08006f2c 	.word	0x08006f2c
 8001678:	08006f34 	.word	0x08006f34
 800167c:	2000003c 	.word	0x2000003c
 8001680:	20000068 	.word	0x20000068
 8001684:	2000008c 	.word	0x2000008c

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b090      	sub	sp, #64	; 0x40
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0318 	add.w	r3, r7, #24
 8001692:	2228      	movs	r2, #40	; 0x28
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fa2c 	bl	8003af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ae:	2301      	movs	r3, #1
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b2:	2310      	movs	r3, #16
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ba:	f107 0318 	add.w	r3, r7, #24
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 ff5e 	bl	8002580 <HAL_RCC_OscConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0x46>
  {
    Error_Handler();
 80016ca:	f000 f92d 	bl	8001928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ce:	230f      	movs	r3, #15
 80016d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f001 f9cc 	bl	8002a84 <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016f2:	f000 f919 	bl	8001928 <Error_Handler>
  }
}
 80016f6:	bf00      	nop
 80016f8:	3740      	adds	r7, #64	; 0x40
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <MX_USART1_UART_Init+0x50>)
 8001708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <MX_USART1_UART_Init+0x4c>)
 800170c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_USART1_UART_Init+0x4c>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001738:	f001 fb32 	bl	8002da0 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001742:	f000 f8f1 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000024c 	.word	0x2000024c
 8001750:	40013800 	.word	0x40013800

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_GPIO_Init+0x40>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <MX_GPIO_Init+0x40>)
 8001760:	f043 0320 	orr.w	r3, r3, #32
 8001764:	6193      	str	r3, [r2, #24]
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_GPIO_Init+0x40>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_GPIO_Init+0x40>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a07      	ldr	r2, [pc, #28]	; (8001794 <MX_GPIO_Init+0x40>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <MX_GPIO_Init+0x40>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	40021000 	.word	0x40021000

08001798 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001798:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800179c:	b08c      	sub	sp, #48	; 0x30
 800179e:	af04      	add	r7, sp, #16
 80017a0:	6078      	str	r0, [r7, #4]

	if (writeOn >= 1) {
 80017a2:	4b51      	ldr	r3, [pc, #324]	; (80018e8 <HAL_UART_RxCpltCallback+0x150>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f340 8098 	ble.w	80018dc <HAL_UART_RxCpltCallback+0x144>
		if (confirmationInput) {
 80017ac:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <HAL_UART_RxCpltCallback+0x154>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d05f      	beq.n	8001874 <HAL_UART_RxCpltCallback+0xdc>
			if ((char) UART1_rxBuffer[0] == '1') {
 80017b4:	4b4e      	ldr	r3, [pc, #312]	; (80018f0 <HAL_UART_RxCpltCallback+0x158>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b31      	cmp	r3, #49	; 0x31
 80017ba:	d149      	bne.n	8001850 <HAL_UART_RxCpltCallback+0xb8>
				char buffer[20];
				UART_SEND(msg_Success);
 80017bc:	484d      	ldr	r0, [pc, #308]	; (80018f4 <HAL_UART_RxCpltCallback+0x15c>)
 80017be:	f7ff fd43 	bl	8001248 <UART_SEND>
				extractCoordinates(receivedCoordinates);
 80017c2:	484d      	ldr	r0, [pc, #308]	; (80018f8 <HAL_UART_RxCpltCallback+0x160>)
 80017c4:	f7ff fe4a 	bl	800145c <extractCoordinates>
				distance = haversineDistance(lat_1, lon_1, lat_2, lon_2);
 80017c8:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <HAL_UART_RxCpltCallback+0x164>)
 80017ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80017ce:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_UART_RxCpltCallback+0x168>)
 80017d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80017d4:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <HAL_UART_RxCpltCallback+0x16c>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	494b      	ldr	r1, [pc, #300]	; (8001908 <HAL_UART_RxCpltCallback+0x170>)
 80017dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80017e4:	e9cd 2300 	strd	r2, r3, [sp]
 80017e8:	4642      	mov	r2, r8
 80017ea:	464b      	mov	r3, r9
 80017ec:	4620      	mov	r0, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	f7ff face 	bl	8000d90 <haversineDistance>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4944      	ldr	r1, [pc, #272]	; (800190c <HAL_UART_RxCpltCallback+0x174>)
 80017fa:	e9c1 2300 	strd	r2, r3, [r1]
				ftoa(distance, buffer, 2);
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_UART_RxCpltCallback+0x174>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f93e 	bl	8000a88 <__aeabi_d2f>
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2202      	movs	r2, #2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff fc52 	bl	80010bc <ftoa>
				UART_SEND(NEW_LINE);
 8001818:	483d      	ldr	r0, [pc, #244]	; (8001910 <HAL_UART_RxCpltCallback+0x178>)
 800181a:	f7ff fd15 	bl	8001248 <UART_SEND>
				UART_SEND(msg_DistanceInfo);
 800181e:	483d      	ldr	r0, [pc, #244]	; (8001914 <HAL_UART_RxCpltCallback+0x17c>)
 8001820:	f7ff fd12 	bl	8001248 <UART_SEND>
				UART_SEND(NEW_LINE);
 8001824:	483a      	ldr	r0, [pc, #232]	; (8001910 <HAL_UART_RxCpltCallback+0x178>)
 8001826:	f7ff fd0f 	bl	8001248 <UART_SEND>
				UART_SEND(buffer);
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fd0a 	bl	8001248 <UART_SEND>
				UART_SEND("km");
 8001834:	4838      	ldr	r0, [pc, #224]	; (8001918 <HAL_UART_RxCpltCallback+0x180>)
 8001836:	f7ff fd07 	bl	8001248 <UART_SEND>
				UART_SEND(NEW_LINE);
 800183a:	4835      	ldr	r0, [pc, #212]	; (8001910 <HAL_UART_RxCpltCallback+0x178>)
 800183c:	f7ff fd04 	bl	8001248 <UART_SEND>
				UART_SEND(NEW_LINE);
 8001840:	4833      	ldr	r0, [pc, #204]	; (8001910 <HAL_UART_RxCpltCallback+0x178>)
 8001842:	f7ff fd01 	bl	8001248 <UART_SEND>
				writeOn = NO_MORE_WRITING;
 8001846:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <HAL_UART_RxCpltCallback+0x150>)
 8001848:	f04f 32ff 	mov.w	r2, #4294967295
 800184c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

}
 800184e:	e045      	b.n	80018dc <HAL_UART_RxCpltCallback+0x144>
				UART_SEND(NEW_LINE);
 8001850:	482f      	ldr	r0, [pc, #188]	; (8001910 <HAL_UART_RxCpltCallback+0x178>)
 8001852:	f7ff fcf9 	bl	8001248 <UART_SEND>
				UART_SEND(msg_InvalidCoordinates);
 8001856:	4831      	ldr	r0, [pc, #196]	; (800191c <HAL_UART_RxCpltCallback+0x184>)
 8001858:	f7ff fcf6 	bl	8001248 <UART_SEND>
				receivedCoordinates[0] = '\0';
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_UART_RxCpltCallback+0x160>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
				confirmationInput = 0;
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_UART_RxCpltCallback+0x154>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	4921      	ldr	r1, [pc, #132]	; (80018f0 <HAL_UART_RxCpltCallback+0x158>)
 800186c:	482c      	ldr	r0, [pc, #176]	; (8001920 <HAL_UART_RxCpltCallback+0x188>)
 800186e:	f001 fb6a 	bl	8002f46 <HAL_UART_Receive_IT>
}
 8001872:	e033      	b.n	80018dc <HAL_UART_RxCpltCallback+0x144>
			if ((char) UART1_rxBuffer[0] != '*') {
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_UART_RxCpltCallback+0x158>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b2a      	cmp	r3, #42	; 0x2a
 800187a:	d00b      	beq.n	8001894 <HAL_UART_RxCpltCallback+0xfc>
				mystrcat(receivedCoordinates, (char) UART1_rxBuffer[0]);
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_UART_RxCpltCallback+0x158>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	481d      	ldr	r0, [pc, #116]	; (80018f8 <HAL_UART_RxCpltCallback+0x160>)
 8001884:	f7ff fc6c 	bl	8001160 <mystrcat>
				HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 8001888:	2201      	movs	r2, #1
 800188a:	4919      	ldr	r1, [pc, #100]	; (80018f0 <HAL_UART_RxCpltCallback+0x158>)
 800188c:	4824      	ldr	r0, [pc, #144]	; (8001920 <HAL_UART_RxCpltCallback+0x188>)
 800188e:	f001 fb5a 	bl	8002f46 <HAL_UART_Receive_IT>
}
 8001892:	e023      	b.n	80018dc <HAL_UART_RxCpltCallback+0x144>
				if (!validCoordinates(receivedCoordinates)) {
 8001894:	4818      	ldr	r0, [pc, #96]	; (80018f8 <HAL_UART_RxCpltCallback+0x160>)
 8001896:	f7ff fceb 	bl	8001270 <validCoordinates>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d106      	bne.n	80018ae <HAL_UART_RxCpltCallback+0x116>
					UART_SEND(NEW_LINE);
 80018a0:	481b      	ldr	r0, [pc, #108]	; (8001910 <HAL_UART_RxCpltCallback+0x178>)
 80018a2:	f7ff fcd1 	bl	8001248 <UART_SEND>
					UART_SEND(msg_InvalidCoordinates);
 80018a6:	481d      	ldr	r0, [pc, #116]	; (800191c <HAL_UART_RxCpltCallback+0x184>)
 80018a8:	f7ff fcce 	bl	8001248 <UART_SEND>
}
 80018ac:	e016      	b.n	80018dc <HAL_UART_RxCpltCallback+0x144>
					fixInput(receivedCoordinates);
 80018ae:	4812      	ldr	r0, [pc, #72]	; (80018f8 <HAL_UART_RxCpltCallback+0x160>)
 80018b0:	f7ff fc9a 	bl	80011e8 <fixInput>
					UART_SEND(msg_KindQuestion);
 80018b4:	481b      	ldr	r0, [pc, #108]	; (8001924 <HAL_UART_RxCpltCallback+0x18c>)
 80018b6:	f7ff fcc7 	bl	8001248 <UART_SEND>
					UART_SEND(NEW_LINE);
 80018ba:	4815      	ldr	r0, [pc, #84]	; (8001910 <HAL_UART_RxCpltCallback+0x178>)
 80018bc:	f7ff fcc4 	bl	8001248 <UART_SEND>
					UART_SEND(receivedCoordinates);
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <HAL_UART_RxCpltCallback+0x160>)
 80018c2:	f7ff fcc1 	bl	8001248 <UART_SEND>
					UART_SEND(NEW_LINE);
 80018c6:	4812      	ldr	r0, [pc, #72]	; (8001910 <HAL_UART_RxCpltCallback+0x178>)
 80018c8:	f7ff fcbe 	bl	8001248 <UART_SEND>
					confirmationInput = 1;
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <HAL_UART_RxCpltCallback+0x154>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 80018d2:	2201      	movs	r2, #1
 80018d4:	4906      	ldr	r1, [pc, #24]	; (80018f0 <HAL_UART_RxCpltCallback+0x158>)
 80018d6:	4812      	ldr	r0, [pc, #72]	; (8001920 <HAL_UART_RxCpltCallback+0x188>)
 80018d8:	f001 fb35 	bl	8002f46 <HAL_UART_Receive_IT>
}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018e6:	bf00      	nop
 80018e8:	20000294 	.word	0x20000294
 80018ec:	20000298 	.word	0x20000298
 80018f0:	200002e8 	.word	0x200002e8
 80018f4:	20000134 	.word	0x20000134
 80018f8:	200002c8 	.word	0x200002c8
 80018fc:	200002a8 	.word	0x200002a8
 8001900:	200002b0 	.word	0x200002b0
 8001904:	200002b8 	.word	0x200002b8
 8001908:	200002c0 	.word	0x200002c0
 800190c:	200002a0 	.word	0x200002a0
 8001910:	08006f28 	.word	0x08006f28
 8001914:	20000184 	.word	0x20000184
 8001918:	08006f3c 	.word	0x08006f3c
 800191c:	2000000c 	.word	0x2000000c
 8001920:	2000024c 	.word	0x2000024c
 8001924:	200000e8 	.word	0x200000e8

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001930:	e7fe      	b.n	8001930 <Error_Handler+0x8>
	...

08001934 <parse_GPGGA>:
#define MAX_GGA_SIZE 100

extern int charToNumber(char c);
extern float strToFloat(char *str);

int parse_GPGGA(char *GGAbuffer, GGASTRUCT *ggaStruct) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	int currentData = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]

	//"$GPGGA,093121.691,5404.2675,N,00159.7569,W,1,10,4.00,100.0,M,S0.0,M„*7A\r\n",
	char *token = strtok(GGAbuffer, ",");
 8001942:	4928      	ldr	r1, [pc, #160]	; (80019e4 <parse_GPGGA+0xb0>)
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f002 f9e7 	bl	8003d18 <strtok>
 800194a:	60f8      	str	r0, [r7, #12]
	// token = $GPGGA 093121.691 5404.2675 N 00159.7569 W 1 10 4.00 100.0 M
	// irelevant, time, latitude NS longitude EW fix
	char *marker = token;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	613b      	str	r3, [r7, #16]

	while (marker != NULL) {
 8001950:	e040      	b.n	80019d4 <parse_GPGGA+0xa0>
		if(currentData == TIME)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <parse_GPGGA+0x30>
			ggaStruct->time = strToFloat(marker);
 8001958:	6938      	ldr	r0, [r7, #16]
 800195a:	f7ff fcbd 	bl	80012d8 <strToFloat>
 800195e:	4602      	mov	r2, r0
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	601a      	str	r2, [r3, #0]
		if(currentData == LATITUDE)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d105      	bne.n	8001976 <parse_GPGGA+0x42>
			ggaStruct->latitude = strToFloat(marker);
 800196a:	6938      	ldr	r0, [r7, #16]
 800196c:	f7ff fcb4 	bl	80012d8 <strToFloat>
 8001970:	4602      	mov	r2, r0
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	605a      	str	r2, [r3, #4]
		if(currentData == NORTH_SOUTH)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d108      	bne.n	800198e <parse_GPGGA+0x5a>
			ggaStruct->northSouth = charToNumber((char)marker[0]);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fc9d 	bl	80012c0 <charToNumber>
 8001986:	4603      	mov	r3, r0
 8001988:	b2da      	uxtb	r2, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	721a      	strb	r2, [r3, #8]
		if(currentData == LONGITUDE)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b04      	cmp	r3, #4
 8001992:	d105      	bne.n	80019a0 <parse_GPGGA+0x6c>
			ggaStruct->longitude = strToFloat(marker);
 8001994:	6938      	ldr	r0, [r7, #16]
 8001996:	f7ff fc9f 	bl	80012d8 <strToFloat>
 800199a:	4602      	mov	r2, r0
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	60da      	str	r2, [r3, #12]
		if(currentData == EAST_WEST)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b05      	cmp	r3, #5
 80019a4:	d103      	bne.n	80019ae <parse_GPGGA+0x7a>
			ggaStruct->eastWest = (char)marker[0];
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	741a      	strb	r2, [r3, #16]
		if(currentData == FIX)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b06      	cmp	r3, #6
 80019b2:	d107      	bne.n	80019c4 <parse_GPGGA+0x90>
			ggaStruct->fix = charToNumber((char)marker[0]);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fc81 	bl	80012c0 <charToNumber>
 80019be:	4602      	mov	r2, r0
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	615a      	str	r2, [r3, #20]

		marker = strtok(NULL, ",");
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <parse_GPGGA+0xb0>)
 80019c6:	2000      	movs	r0, #0
 80019c8:	f002 f9a6 	bl	8003d18 <strtok>
 80019cc:	6138      	str	r0, [r7, #16]
		currentData++;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
	while (marker != NULL) {
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1bb      	bne.n	8001952 <parse_GPGGA+0x1e>
	}

	return 1;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	08006f40 	.word	0x08006f40

080019e8 <prepareData>:

char *prepareData(char *nmea_data) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	int commmaCounter = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
	int idx = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]

	char *str = (char*)malloc(MAX_GGA_SIZE * sizeof(char));
 80019f8:	2064      	movs	r0, #100	; 0x64
 80019fa:	f002 f873 	bl	8003ae4 <malloc>
 80019fe:	4603      	mov	r3, r0
 8001a00:	60fb      	str	r3, [r7, #12]
	strcpy(str, nmea_data);
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f002 f969 	bl	8003cdc <strcpy>

	while(commmaCounter < 7) {
 8001a0a:	e00b      	b.n	8001a24 <prepareData+0x3c>
		if(str[idx] == ',')
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4413      	add	r3, r2
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b2c      	cmp	r3, #44	; 0x2c
 8001a16:	d102      	bne.n	8001a1e <prepareData+0x36>
			commmaCounter++;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
		idx++;
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	3301      	adds	r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
	while(commmaCounter < 7) {
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	ddf0      	ble.n	8001a0c <prepareData+0x24>
	}

	str[--idx] = '\0';
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4413      	add	r3, r2
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]

	return str;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <nmea_parse>:

void nmea_parse(char *gps_data[], GPSSTRUCT *gpsStruct) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
	int dataLen = 3;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < dataLen; i++) {
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e028      	b.n	8001aaa <nmea_parse+0x66>

		if (strstr(gps_data[i], "\r\n") != NULL) {
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4916      	ldr	r1, [pc, #88]	; (8001abc <nmea_parse+0x78>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 f941 	bl	8003cec <strstr>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d019      	beq.n	8001aa4 <nmea_parse+0x60>
			if (strstr(gps_data[i], "GPGGA") != NULL) {
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4911      	ldr	r1, [pc, #68]	; (8001ac0 <nmea_parse+0x7c>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 f935 	bl	8003cec <strstr>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00d      	beq.n	8001aa4 <nmea_parse+0x60>
				char *str = prepareData(gps_data[i]);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ffa8 	bl	80019e8 <prepareData>
 8001a98:	60f8      	str	r0, [r7, #12]
				parse_GPGGA(str, &gpsStruct->ggaStruct);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7ff ff48 	bl	8001934 <parse_GPGGA>
	for (int i = 0; i < dataLen; i++) {
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbd2      	blt.n	8001a58 <nmea_parse+0x14>
//			else if (strstr(gps_data[i], "GPRMC") != NULL) {
//				parse_GPRMC(gps_data, gpsStruct->rmcStruct);
//			}
		}
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08006f44 	.word	0x08006f44
 8001ac0:	08006f48 	.word	0x08006f48

08001ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_MspInit+0x40>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <HAL_MspInit+0x40>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6193      	str	r3, [r2, #24]
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_MspInit+0x40>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_MspInit+0x40>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_MspInit+0x40>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_MspInit+0x40>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40021000 	.word	0x40021000

08001b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a20      	ldr	r2, [pc, #128]	; (8001ba4 <HAL_UART_MspInit+0x9c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d139      	bne.n	8001b9c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b28:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <HAL_UART_MspInit+0xa0>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_UART_MspInit+0xa0>)
 8001b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_UART_MspInit+0xa0>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_UART_MspInit+0xa0>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <HAL_UART_MspInit+0xa0>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_UART_MspInit+0xa0>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480f      	ldr	r0, [pc, #60]	; (8001bac <HAL_UART_MspInit+0xa4>)
 8001b6e:	f000 fb83 	bl	8002278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4619      	mov	r1, r3
 8001b86:	4809      	ldr	r0, [pc, #36]	; (8001bac <HAL_UART_MspInit+0xa4>)
 8001b88:	f000 fb76 	bl	8002278 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2025      	movs	r0, #37	; 0x25
 8001b92:	f000 fa88 	bl	80020a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b96:	2025      	movs	r0, #37	; 0x25
 8001b98:	f000 faa1 	bl	80020de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b9c:	bf00      	nop
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010800 	.word	0x40010800

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf6:	f000 f93f 	bl	8001e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <USART1_IRQHandler+0x10>)
 8001c06:	f001 f9c3 	bl	8002f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000024c 	.word	0x2000024c

08001c14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
	return 1;
 8001c18:	2301      	movs	r3, #1
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <_kill>:

int _kill(int pid, int sig)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c2c:	f001 ff30 	bl	8003a90 <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2216      	movs	r2, #22
 8001c34:	601a      	str	r2, [r3, #0]
	return -1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_exit>:

void _exit (int status)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffe7 	bl	8001c22 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c54:	e7fe      	b.n	8001c54 <_exit+0x12>

08001c56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e00a      	b.n	8001c7e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c68:	f3af 8000 	nop.w
 8001c6c:	4601      	mov	r1, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	60ba      	str	r2, [r7, #8]
 8001c74:	b2ca      	uxtb	r2, r1
 8001c76:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbf0      	blt.n	8001c68 <_read+0x12>
	}

return len;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e009      	b.n	8001cb6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	60ba      	str	r2, [r7, #8]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	dbf1      	blt.n	8001ca2 <_write+0x12>
	}
	return len;
 8001cbe:	687b      	ldr	r3, [r7, #4]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_close>:

int _close(int file)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	return -1;
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cee:	605a      	str	r2, [r3, #4]
	return 0;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <_isatty>:

int _isatty(int file)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	return 1;
 8001d04:	2301      	movs	r3, #1
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <_sbrk+0x5c>)
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <_sbrk+0x60>)
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <_sbrk+0x64>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <_sbrk+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d207      	bcs.n	8001d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d58:	f001 fe9a 	bl	8003a90 <__errno>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	220c      	movs	r2, #12
 8001d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	e009      	b.n	8001d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <_sbrk+0x64>)
 8001d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20002800 	.word	0x20002800
 8001d88:	00000400 	.word	0x00000400
 8001d8c:	20000308 	.word	0x20000308
 8001d90:	20000320 	.word	0x20000320

08001d94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da0:	f7ff fff8 	bl	8001d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da4:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001da6:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001da8:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dac:	e002      	b.n	8001db4 <LoopCopyDataInit>

08001dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db2:	3304      	adds	r3, #4

08001db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db8:	d3f9      	bcc.n	8001dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001dbc:	4c09      	ldr	r4, [pc, #36]	; (8001de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc0:	e001      	b.n	8001dc6 <LoopFillZerobss>

08001dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc4:	3204      	adds	r2, #4

08001dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc8:	d3fb      	bcc.n	8001dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dca:	f001 fe67 	bl	8003a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dce:	f7ff fbb9 	bl	8001544 <main>
  bx lr
 8001dd2:	4770      	bx	lr
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8001ddc:	08007448 	.word	0x08007448
  ldr r2, =_sbss
 8001de0:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8001de4:	20000320 	.word	0x20000320

08001de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC1_2_IRQHandler>
	...

08001dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_Init+0x28>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <HAL_Init+0x28>)
 8001df6:	f043 0310 	orr.w	r3, r3, #16
 8001dfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	f000 f947 	bl	8002090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e02:	200f      	movs	r0, #15
 8001e04:	f000 f808 	bl	8001e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e08:	f7ff fe5c 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40022000 	.word	0x40022000

08001e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_InitTick+0x54>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_InitTick+0x58>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 f95f 	bl	80020fa <HAL_SYSTICK_Config>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00e      	b.n	8001e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b0f      	cmp	r3, #15
 8001e4a:	d80a      	bhi.n	8001e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f000 f927 	bl	80020a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e58:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <HAL_InitTick+0x5c>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e000      	b.n	8001e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	200001bc 	.word	0x200001bc
 8001e70:	200001c4 	.word	0x200001c4
 8001e74:	200001c0 	.word	0x200001c0

08001e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_IncTick+0x1c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_IncTick+0x20>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <HAL_IncTick+0x20>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	200001c4 	.word	0x200001c4
 8001e98:	2000030c 	.word	0x2000030c

08001e9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b02      	ldr	r3, [pc, #8]	; (8001eac <HAL_GetTick+0x10>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	2000030c 	.word	0x2000030c

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff fff0 	bl	8001e9c <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_Delay+0x44>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffe0 	bl	8001e9c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200001c4 	.word	0x200001c4

08001ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4906      	ldr	r1, [pc, #24]	; (8001f90 <__NVIC_EnableIRQ+0x34>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	e000e100 	.word	0xe000e100

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db0a      	blt.n	8001fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fbc:	e00a      	b.n	8001fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	0112      	lsls	r2, r2, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	761a      	strb	r2, [r3, #24]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	bf28      	it	cs
 8002006:	2304      	movcs	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3304      	adds	r3, #4
 800200e:	2b06      	cmp	r3, #6
 8002010:	d902      	bls.n	8002018 <NVIC_EncodePriority+0x30>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b03      	subs	r3, #3
 8002016:	e000      	b.n	800201a <NVIC_EncodePriority+0x32>
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	401a      	ands	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43d9      	mvns	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	4313      	orrs	r3, r2
         );
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800205c:	d301      	bcc.n	8002062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205e:	2301      	movs	r3, #1
 8002060:	e00f      	b.n	8002082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <SysTick_Config+0x40>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206a:	210f      	movs	r1, #15
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f7ff ff90 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <SysTick_Config+0x40>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <SysTick_Config+0x40>)
 800207c:	2207      	movs	r2, #7
 800207e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	e000e010 	.word	0xe000e010

08002090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff2d 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b8:	f7ff ff42 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 80020bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7ff ff90 	bl	8001fe8 <NVIC_EncodePriority>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff5f 	bl	8001f94 <__NVIC_SetPriority>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff35 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ffa2 	bl	800204c <SysTick_Config>
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002112:	b480      	push	{r7}
 8002114:	b085      	sub	sp, #20
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d008      	beq.n	800213c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2204      	movs	r2, #4
 800212e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e020      	b.n	800217e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 020e 	bic.w	r2, r2, #14
 800214a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f202 	lsl.w	r2, r1, r2
 800216a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d005      	beq.n	80021ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2204      	movs	r2, #4
 80021a4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e051      	b.n	8002250 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 020e 	bic.w	r2, r2, #14
 80021ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_DMA_Abort_IT+0xd4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d029      	beq.n	800222a <HAL_DMA_Abort_IT+0xa2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a21      	ldr	r2, [pc, #132]	; (8002260 <HAL_DMA_Abort_IT+0xd8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d022      	beq.n	8002226 <HAL_DMA_Abort_IT+0x9e>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1f      	ldr	r2, [pc, #124]	; (8002264 <HAL_DMA_Abort_IT+0xdc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01a      	beq.n	8002220 <HAL_DMA_Abort_IT+0x98>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1e      	ldr	r2, [pc, #120]	; (8002268 <HAL_DMA_Abort_IT+0xe0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d012      	beq.n	800221a <HAL_DMA_Abort_IT+0x92>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	; (800226c <HAL_DMA_Abort_IT+0xe4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00a      	beq.n	8002214 <HAL_DMA_Abort_IT+0x8c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1b      	ldr	r2, [pc, #108]	; (8002270 <HAL_DMA_Abort_IT+0xe8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d102      	bne.n	800220e <HAL_DMA_Abort_IT+0x86>
 8002208:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800220c:	e00e      	b.n	800222c <HAL_DMA_Abort_IT+0xa4>
 800220e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002212:	e00b      	b.n	800222c <HAL_DMA_Abort_IT+0xa4>
 8002214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002218:	e008      	b.n	800222c <HAL_DMA_Abort_IT+0xa4>
 800221a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221e:	e005      	b.n	800222c <HAL_DMA_Abort_IT+0xa4>
 8002220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002224:	e002      	b.n	800222c <HAL_DMA_Abort_IT+0xa4>
 8002226:	2310      	movs	r3, #16
 8002228:	e000      	b.n	800222c <HAL_DMA_Abort_IT+0xa4>
 800222a:	2301      	movs	r3, #1
 800222c:	4a11      	ldr	r2, [pc, #68]	; (8002274 <HAL_DMA_Abort_IT+0xec>)
 800222e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
    } 
  }
  return status;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40020008 	.word	0x40020008
 8002260:	4002001c 	.word	0x4002001c
 8002264:	40020030 	.word	0x40020030
 8002268:	40020044 	.word	0x40020044
 800226c:	40020058 	.word	0x40020058
 8002270:	4002006c 	.word	0x4002006c
 8002274:	40020000 	.word	0x40020000

08002278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002278:	b480      	push	{r7}
 800227a:	b08b      	sub	sp, #44	; 0x2c
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228a:	e169      	b.n	8002560 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800228c:	2201      	movs	r2, #1
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	f040 8158 	bne.w	800255a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4a9a      	ldr	r2, [pc, #616]	; (8002518 <HAL_GPIO_Init+0x2a0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d05e      	beq.n	8002372 <HAL_GPIO_Init+0xfa>
 80022b4:	4a98      	ldr	r2, [pc, #608]	; (8002518 <HAL_GPIO_Init+0x2a0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d875      	bhi.n	80023a6 <HAL_GPIO_Init+0x12e>
 80022ba:	4a98      	ldr	r2, [pc, #608]	; (800251c <HAL_GPIO_Init+0x2a4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d058      	beq.n	8002372 <HAL_GPIO_Init+0xfa>
 80022c0:	4a96      	ldr	r2, [pc, #600]	; (800251c <HAL_GPIO_Init+0x2a4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d86f      	bhi.n	80023a6 <HAL_GPIO_Init+0x12e>
 80022c6:	4a96      	ldr	r2, [pc, #600]	; (8002520 <HAL_GPIO_Init+0x2a8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d052      	beq.n	8002372 <HAL_GPIO_Init+0xfa>
 80022cc:	4a94      	ldr	r2, [pc, #592]	; (8002520 <HAL_GPIO_Init+0x2a8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d869      	bhi.n	80023a6 <HAL_GPIO_Init+0x12e>
 80022d2:	4a94      	ldr	r2, [pc, #592]	; (8002524 <HAL_GPIO_Init+0x2ac>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d04c      	beq.n	8002372 <HAL_GPIO_Init+0xfa>
 80022d8:	4a92      	ldr	r2, [pc, #584]	; (8002524 <HAL_GPIO_Init+0x2ac>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d863      	bhi.n	80023a6 <HAL_GPIO_Init+0x12e>
 80022de:	4a92      	ldr	r2, [pc, #584]	; (8002528 <HAL_GPIO_Init+0x2b0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d046      	beq.n	8002372 <HAL_GPIO_Init+0xfa>
 80022e4:	4a90      	ldr	r2, [pc, #576]	; (8002528 <HAL_GPIO_Init+0x2b0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d85d      	bhi.n	80023a6 <HAL_GPIO_Init+0x12e>
 80022ea:	2b12      	cmp	r3, #18
 80022ec:	d82a      	bhi.n	8002344 <HAL_GPIO_Init+0xcc>
 80022ee:	2b12      	cmp	r3, #18
 80022f0:	d859      	bhi.n	80023a6 <HAL_GPIO_Init+0x12e>
 80022f2:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <HAL_GPIO_Init+0x80>)
 80022f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f8:	08002373 	.word	0x08002373
 80022fc:	0800234d 	.word	0x0800234d
 8002300:	0800235f 	.word	0x0800235f
 8002304:	080023a1 	.word	0x080023a1
 8002308:	080023a7 	.word	0x080023a7
 800230c:	080023a7 	.word	0x080023a7
 8002310:	080023a7 	.word	0x080023a7
 8002314:	080023a7 	.word	0x080023a7
 8002318:	080023a7 	.word	0x080023a7
 800231c:	080023a7 	.word	0x080023a7
 8002320:	080023a7 	.word	0x080023a7
 8002324:	080023a7 	.word	0x080023a7
 8002328:	080023a7 	.word	0x080023a7
 800232c:	080023a7 	.word	0x080023a7
 8002330:	080023a7 	.word	0x080023a7
 8002334:	080023a7 	.word	0x080023a7
 8002338:	080023a7 	.word	0x080023a7
 800233c:	08002355 	.word	0x08002355
 8002340:	08002369 	.word	0x08002369
 8002344:	4a79      	ldr	r2, [pc, #484]	; (800252c <HAL_GPIO_Init+0x2b4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800234a:	e02c      	b.n	80023a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	623b      	str	r3, [r7, #32]
          break;
 8002352:	e029      	b.n	80023a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	3304      	adds	r3, #4
 800235a:	623b      	str	r3, [r7, #32]
          break;
 800235c:	e024      	b.n	80023a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	3308      	adds	r3, #8
 8002364:	623b      	str	r3, [r7, #32]
          break;
 8002366:	e01f      	b.n	80023a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	330c      	adds	r3, #12
 800236e:	623b      	str	r3, [r7, #32]
          break;
 8002370:	e01a      	b.n	80023a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800237a:	2304      	movs	r3, #4
 800237c:	623b      	str	r3, [r7, #32]
          break;
 800237e:	e013      	b.n	80023a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002388:	2308      	movs	r3, #8
 800238a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	611a      	str	r2, [r3, #16]
          break;
 8002392:	e009      	b.n	80023a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002394:	2308      	movs	r3, #8
 8002396:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	615a      	str	r2, [r3, #20]
          break;
 800239e:	e003      	b.n	80023a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023a0:	2300      	movs	r3, #0
 80023a2:	623b      	str	r3, [r7, #32]
          break;
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_Init+0x130>
          break;
 80023a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2bff      	cmp	r3, #255	; 0xff
 80023ac:	d801      	bhi.n	80023b2 <HAL_GPIO_Init+0x13a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	e001      	b.n	80023b6 <HAL_GPIO_Init+0x13e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2bff      	cmp	r3, #255	; 0xff
 80023bc:	d802      	bhi.n	80023c4 <HAL_GPIO_Init+0x14c>
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	e002      	b.n	80023ca <HAL_GPIO_Init+0x152>
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	3b08      	subs	r3, #8
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	210f      	movs	r1, #15
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	401a      	ands	r2, r3
 80023dc:	6a39      	ldr	r1, [r7, #32]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	431a      	orrs	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80b1 	beq.w	800255a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023f8:	4b4d      	ldr	r3, [pc, #308]	; (8002530 <HAL_GPIO_Init+0x2b8>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4a4c      	ldr	r2, [pc, #304]	; (8002530 <HAL_GPIO_Init+0x2b8>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6193      	str	r3, [r2, #24]
 8002404:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_GPIO_Init+0x2b8>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002410:	4a48      	ldr	r2, [pc, #288]	; (8002534 <HAL_GPIO_Init+0x2bc>)
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	3302      	adds	r3, #2
 8002418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a40      	ldr	r2, [pc, #256]	; (8002538 <HAL_GPIO_Init+0x2c0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d013      	beq.n	8002464 <HAL_GPIO_Init+0x1ec>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a3f      	ldr	r2, [pc, #252]	; (800253c <HAL_GPIO_Init+0x2c4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00d      	beq.n	8002460 <HAL_GPIO_Init+0x1e8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a3e      	ldr	r2, [pc, #248]	; (8002540 <HAL_GPIO_Init+0x2c8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d007      	beq.n	800245c <HAL_GPIO_Init+0x1e4>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3d      	ldr	r2, [pc, #244]	; (8002544 <HAL_GPIO_Init+0x2cc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_GPIO_Init+0x1e0>
 8002454:	2303      	movs	r3, #3
 8002456:	e006      	b.n	8002466 <HAL_GPIO_Init+0x1ee>
 8002458:	2304      	movs	r3, #4
 800245a:	e004      	b.n	8002466 <HAL_GPIO_Init+0x1ee>
 800245c:	2302      	movs	r3, #2
 800245e:	e002      	b.n	8002466 <HAL_GPIO_Init+0x1ee>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_GPIO_Init+0x1ee>
 8002464:	2300      	movs	r3, #0
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	f002 0203 	and.w	r2, r2, #3
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	4093      	lsls	r3, r2
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002476:	492f      	ldr	r1, [pc, #188]	; (8002534 <HAL_GPIO_Init+0x2bc>)
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002490:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	492c      	ldr	r1, [pc, #176]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]
 800249c:	e006      	b.n	80024ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800249e:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	4928      	ldr	r1, [pc, #160]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024b8:	4b23      	ldr	r3, [pc, #140]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	4922      	ldr	r1, [pc, #136]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60cb      	str	r3, [r1, #12]
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	491e      	ldr	r1, [pc, #120]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d006      	beq.n	80024ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	4918      	ldr	r1, [pc, #96]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	4914      	ldr	r1, [pc, #80]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d021      	beq.n	800254c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	490e      	ldr	r1, [pc, #56]	; (8002548 <HAL_GPIO_Init+0x2d0>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e021      	b.n	800255a <HAL_GPIO_Init+0x2e2>
 8002516:	bf00      	nop
 8002518:	10320000 	.word	0x10320000
 800251c:	10310000 	.word	0x10310000
 8002520:	10220000 	.word	0x10220000
 8002524:	10210000 	.word	0x10210000
 8002528:	10120000 	.word	0x10120000
 800252c:	10110000 	.word	0x10110000
 8002530:	40021000 	.word	0x40021000
 8002534:	40010000 	.word	0x40010000
 8002538:	40010800 	.word	0x40010800
 800253c:	40010c00 	.word	0x40010c00
 8002540:	40011000 	.word	0x40011000
 8002544:	40011400 	.word	0x40011400
 8002548:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_GPIO_Init+0x304>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	43db      	mvns	r3, r3
 8002554:	4909      	ldr	r1, [pc, #36]	; (800257c <HAL_GPIO_Init+0x304>)
 8002556:	4013      	ands	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	3301      	adds	r3, #1
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	fa22 f303 	lsr.w	r3, r2, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	f47f ae8e 	bne.w	800228c <HAL_GPIO_Init+0x14>
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	372c      	adds	r7, #44	; 0x2c
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	40010400 	.word	0x40010400

08002580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e272      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8087 	beq.w	80026ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a0:	4b92      	ldr	r3, [pc, #584]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d00c      	beq.n	80025c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ac:	4b8f      	ldr	r3, [pc, #572]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d112      	bne.n	80025de <HAL_RCC_OscConfig+0x5e>
 80025b8:	4b8c      	ldr	r3, [pc, #560]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c4:	d10b      	bne.n	80025de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c6:	4b89      	ldr	r3, [pc, #548]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d06c      	beq.n	80026ac <HAL_RCC_OscConfig+0x12c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d168      	bne.n	80026ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e24c      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x76>
 80025e8:	4b80      	ldr	r3, [pc, #512]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a7f      	ldr	r2, [pc, #508]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e02e      	b.n	8002654 <HAL_RCC_OscConfig+0xd4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x98>
 80025fe:	4b7b      	ldr	r3, [pc, #492]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a7a      	ldr	r2, [pc, #488]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b78      	ldr	r3, [pc, #480]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a77      	ldr	r2, [pc, #476]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xd4>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0xbc>
 8002622:	4b72      	ldr	r3, [pc, #456]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a71      	ldr	r2, [pc, #452]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b6f      	ldr	r3, [pc, #444]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6e      	ldr	r2, [pc, #440]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xd4>
 800263c:	4b6b      	ldr	r3, [pc, #428]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a6a      	ldr	r2, [pc, #424]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b68      	ldr	r3, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a67      	ldr	r2, [pc, #412]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002652:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff fc1e 	bl	8001e9c <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7ff fc1a 	bl	8001e9c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e200      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b5d      	ldr	r3, [pc, #372]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xe4>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff fc0a 	bl	8001e9c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff fc06 	bl	8001e9c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1ec      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	4b53      	ldr	r3, [pc, #332]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x10c>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d063      	beq.n	8002782 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ba:	4b4c      	ldr	r3, [pc, #304]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026c6:	4b49      	ldr	r3, [pc, #292]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x18c>
 80026d2:	4b46      	ldr	r3, [pc, #280]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x176>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e1c0      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4939      	ldr	r1, [pc, #228]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	e03a      	b.n	8002782 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271a:	f7ff fbbf 	bl	8001e9c <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002722:	f7ff fbbb 	bl	8001e9c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1a1      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4927      	ldr	r1, [pc, #156]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7ff fb9e 	bl	8001e9c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002764:	f7ff fb9a 	bl	8001e9c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e180      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d03a      	beq.n	8002804 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d019      	beq.n	80027ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7ff fb7e 	bl	8001e9c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a4:	f7ff fb7a 	bl	8001e9c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e160      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f000 face 	bl	8002d64 <RCC_Delay>
 80027c8:	e01c      	b.n	8002804 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_RCC_OscConfig+0x274>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d0:	f7ff fb64 	bl	8001e9c <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d6:	e00f      	b.n	80027f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d8:	f7ff fb60 	bl	8001e9c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d908      	bls.n	80027f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e146      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	42420000 	.word	0x42420000
 80027f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	4b92      	ldr	r3, [pc, #584]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1e9      	bne.n	80027d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80a6 	beq.w	800295e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002816:	4b8b      	ldr	r3, [pc, #556]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	4b88      	ldr	r3, [pc, #544]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4a87      	ldr	r2, [pc, #540]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	61d3      	str	r3, [r2, #28]
 800282e:	4b85      	ldr	r3, [pc, #532]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283a:	2301      	movs	r3, #1
 800283c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283e:	4b82      	ldr	r3, [pc, #520]	; (8002a48 <HAL_RCC_OscConfig+0x4c8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d118      	bne.n	800287c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284a:	4b7f      	ldr	r3, [pc, #508]	; (8002a48 <HAL_RCC_OscConfig+0x4c8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a7e      	ldr	r2, [pc, #504]	; (8002a48 <HAL_RCC_OscConfig+0x4c8>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002856:	f7ff fb21 	bl	8001e9c <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285e:	f7ff fb1d 	bl	8001e9c <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	; 0x64
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e103      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	4b75      	ldr	r3, [pc, #468]	; (8002a48 <HAL_RCC_OscConfig+0x4c8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x312>
 8002884:	4b6f      	ldr	r3, [pc, #444]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a6e      	ldr	r2, [pc, #440]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6213      	str	r3, [r2, #32]
 8002890:	e02d      	b.n	80028ee <HAL_RCC_OscConfig+0x36e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x334>
 800289a:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a69      	ldr	r2, [pc, #420]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	6213      	str	r3, [r2, #32]
 80028a6:	4b67      	ldr	r3, [pc, #412]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a66      	ldr	r2, [pc, #408]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	6213      	str	r3, [r2, #32]
 80028b2:	e01c      	b.n	80028ee <HAL_RCC_OscConfig+0x36e>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x356>
 80028bc:	4b61      	ldr	r3, [pc, #388]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4a60      	ldr	r2, [pc, #384]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	6213      	str	r3, [r2, #32]
 80028c8:	4b5e      	ldr	r3, [pc, #376]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4a5d      	ldr	r2, [pc, #372]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6213      	str	r3, [r2, #32]
 80028d4:	e00b      	b.n	80028ee <HAL_RCC_OscConfig+0x36e>
 80028d6:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4a5a      	ldr	r2, [pc, #360]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6213      	str	r3, [r2, #32]
 80028e2:	4b58      	ldr	r3, [pc, #352]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4a57      	ldr	r2, [pc, #348]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d015      	beq.n	8002922 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f6:	f7ff fad1 	bl	8001e9c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7ff facd 	bl	8001e9c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0b1      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ee      	beq.n	80028fe <HAL_RCC_OscConfig+0x37e>
 8002920:	e014      	b.n	800294c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7ff fabb 	bl	8001e9c <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7ff fab7 	bl	8001e9c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e09b      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ee      	bne.n	800292a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d105      	bne.n	800295e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4b3c      	ldr	r3, [pc, #240]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4a3b      	ldr	r2, [pc, #236]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8087 	beq.w	8002a76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d061      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d146      	bne.n	8002a0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <HAL_RCC_OscConfig+0x4cc>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7ff fa8b 	bl	8001e9c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298a:	f7ff fa87 	bl	8001e9c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e06d      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299c:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b0:	d108      	bne.n	80029c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	4921      	ldr	r1, [pc, #132]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c4:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a19      	ldr	r1, [r3, #32]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	430b      	orrs	r3, r1
 80029d6:	491b      	ldr	r1, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x4cc>)
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7ff fa5b 	bl	8001e9c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7ff fa57 	bl	8001e9c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e03d      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x46a>
 8002a08:	e035      	b.n	8002a76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_RCC_OscConfig+0x4cc>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7ff fa44 	bl	8001e9c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a18:	f7ff fa40 	bl	8001e9c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e026      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x498>
 8002a36:	e01e      	b.n	8002a76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e019      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_OscConfig+0x500>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d106      	bne.n	8002a72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0d0      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b6a      	ldr	r3, [pc, #424]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d910      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 0207 	bic.w	r2, r3, #7
 8002aae:	4965      	ldr	r1, [pc, #404]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b8      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	494d      	ldr	r1, [pc, #308]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d040      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d115      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e073      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06b      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b62:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f023 0203 	bic.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4936      	ldr	r1, [pc, #216]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b74:	f7ff f992 	bl	8001e9c <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7ff f98e 	bl	8001e9c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e053      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 020c 	and.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d1eb      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d210      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 0207 	bic.w	r2, r3, #7
 8002bba:	4922      	ldr	r1, [pc, #136]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e032      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4916      	ldr	r1, [pc, #88]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490e      	ldr	r1, [pc, #56]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c12:	f000 f821 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	490a      	ldr	r1, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	5ccb      	ldrb	r3, [r1, r3]
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1cc>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1d0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f8f0 	bl	8001e18 <HAL_InitTick>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08006f50 	.word	0x08006f50
 8002c50:	200001bc 	.word	0x200001bc
 8002c54:	200001c0 	.word	0x200001c0

08002c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <HAL_RCC_GetSysClockFreq+0x94>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d002      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x30>
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x36>
 8002c86:	e027      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c8a:	613b      	str	r3, [r7, #16]
      break;
 8002c8c:	e027      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	0c9b      	lsrs	r3, r3, #18
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c98:	5cd3      	ldrb	r3, [r2, r3]
 8002c9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d010      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_RCC_GetSysClockFreq+0x94>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	0c5b      	lsrs	r3, r3, #17
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	4a11      	ldr	r2, [pc, #68]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
 8002cb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a0d      	ldr	r2, [pc, #52]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cba:	fb03 f202 	mul.w	r2, r3, r2
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e004      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a0c      	ldr	r2, [pc, #48]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	613b      	str	r3, [r7, #16]
      break;
 8002cd6:	e002      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cda:	613b      	str	r3, [r7, #16]
      break;
 8002cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cde:	693b      	ldr	r3, [r7, #16]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	007a1200 	.word	0x007a1200
 8002cf4:	08006f68 	.word	0x08006f68
 8002cf8:	08006f78 	.word	0x08006f78
 8002cfc:	003d0900 	.word	0x003d0900

08002d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d04:	4b02      	ldr	r3, [pc, #8]	; (8002d10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	200001bc 	.word	0x200001bc

08002d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d18:	f7ff fff2 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	4903      	ldr	r1, [pc, #12]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2a:	5ccb      	ldrb	r3, [r1, r3]
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	08006f60 	.word	0x08006f60

08002d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d40:	f7ff ffde 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	0adb      	lsrs	r3, r3, #11
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4903      	ldr	r1, [pc, #12]	; (8002d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	08006f60 	.word	0x08006f60

08002d64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <RCC_Delay+0x34>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <RCC_Delay+0x38>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0a5b      	lsrs	r3, r3, #9
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d80:	bf00      	nop
  }
  while (Delay --);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1e5a      	subs	r2, r3, #1
 8002d86:	60fa      	str	r2, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f9      	bne.n	8002d80 <RCC_Delay+0x1c>
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	200001bc 	.word	0x200001bc
 8002d9c:	10624dd3 	.word	0x10624dd3

08002da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e042      	b.n	8002e38 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fe fe9e 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fdc5 	bl	8003974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d16d      	bne.n	8002f3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_UART_Transmit+0x2c>
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e066      	b.n	8002f3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2221      	movs	r2, #33	; 0x21
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e7e:	f7ff f80d 	bl	8001e9c <HAL_GetTick>
 8002e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	88fa      	ldrh	r2, [r7, #6]
 8002e88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	88fa      	ldrh	r2, [r7, #6]
 8002e8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e98:	d108      	bne.n	8002eac <HAL_UART_Transmit+0x6c>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d104      	bne.n	8002eac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	e003      	b.n	8002eb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eb4:	e02a      	b.n	8002f0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fb14 	bl	80034ee <UART_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e036      	b.n	8002f3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	3302      	adds	r3, #2
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	e007      	b.n	8002efe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	781a      	ldrb	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1cf      	bne.n	8002eb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2140      	movs	r1, #64	; 0x40
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fae4 	bl	80034ee <UART_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e006      	b.n	8002f3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	4613      	mov	r3, r2
 8002f52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d112      	bne.n	8002f86 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_UART_Receive_IT+0x26>
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e00b      	b.n	8002f88 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fb24 	bl	80035ca <UART_Start_Receive_IT>
 8002f82:	4603      	mov	r3, r0
 8002f84:	e000      	b.n	8002f88 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0ba      	sub	sp, #232	; 0xe8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x66>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fc01 	bl	80037f6 <UART_Receive_IT>
      return;
 8002ff4:	e25b      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80de 	beq.w	80031bc <HAL_UART_IRQHandler+0x22c>
 8003000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800300c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003010:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80d1 	beq.w	80031bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800301a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_UART_IRQHandler+0xae>
 8003026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f043 0201 	orr.w	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_UART_IRQHandler+0xd2>
 800304a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_UART_IRQHandler+0xf6>
 800306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f043 0204 	orr.w	r2, r3, #4
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d011      	beq.n	80030b6 <HAL_UART_IRQHandler+0x126>
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d105      	bne.n	80030aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800309e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f043 0208 	orr.w	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 81f2 	beq.w	80034a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_UART_IRQHandler+0x14e>
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fb8c 	bl	80037f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_UART_IRQHandler+0x17a>
 8003102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d04f      	beq.n	80031aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa96 	bl	800363c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d041      	beq.n	80031a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3314      	adds	r3, #20
 8003124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3314      	adds	r3, #20
 8003146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800314a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800314e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1d9      	bne.n	800311e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d013      	beq.n	800319a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	4a7e      	ldr	r2, [pc, #504]	; (8003370 <HAL_UART_IRQHandler+0x3e0>)
 8003178:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f802 	bl	8002188 <HAL_DMA_Abort_IT>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003194:	4610      	mov	r0, r2
 8003196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	e00e      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f993 	bl	80034c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	e00a      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f98f 	bl	80034c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	e006      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f98b 	bl	80034c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80031b6:	e175      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	bf00      	nop
    return;
 80031ba:	e173      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 814f 	bne.w	8003464 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8148 	beq.w	8003464 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8141 	beq.w	8003464 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80b6 	beq.w	8003374 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8145 	beq.w	80034a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003226:	429a      	cmp	r2, r3
 8003228:	f080 813e 	bcs.w	80034a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003232:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b20      	cmp	r3, #32
 800323c:	f000 8088 	beq.w	8003350 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	330c      	adds	r3, #12
 8003246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800325a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800326c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003270:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003278:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1d9      	bne.n	8003240 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3314      	adds	r3, #20
 8003292:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003296:	e853 3f00 	ldrex	r3, [r3]
 800329a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800329c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3314      	adds	r3, #20
 80032ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e1      	bne.n	800328c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3314      	adds	r3, #20
 80032ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d2:	e853 3f00 	ldrex	r3, [r3]
 80032d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3314      	adds	r3, #20
 80032e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032f4:	e841 2300 	strex	r3, r2, [r1]
 80032f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e3      	bne.n	80032c8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800331e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003320:	f023 0310 	bic.w	r3, r3, #16
 8003324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003332:	65ba      	str	r2, [r7, #88]	; 0x58
 8003334:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e3      	bne.n	800330e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe fee1 	bl	8002112 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800335e:	b29b      	uxth	r3, r3
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	b29b      	uxth	r3, r3
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f8b6 	bl	80034d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800336c:	e09c      	b.n	80034a8 <HAL_UART_IRQHandler+0x518>
 800336e:	bf00      	nop
 8003370:	08003701 	.word	0x08003701
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800337c:	b29b      	uxth	r3, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 808e 	beq.w	80034ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003390:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8089 	beq.w	80034ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033be:	647a      	str	r2, [r7, #68]	; 0x44
 80033c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e3      	bne.n	800339a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	623b      	str	r3, [r7, #32]
   return(result);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3314      	adds	r3, #20
 80033f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033f6:	633a      	str	r2, [r7, #48]	; 0x30
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e3      	bne.n	80033d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	60fb      	str	r3, [r7, #12]
   return(result);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0310 	bic.w	r3, r3, #16
 800342e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800343c:	61fa      	str	r2, [r7, #28]
 800343e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	617b      	str	r3, [r7, #20]
   return(result);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e3      	bne.n	8003418 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f83b 	bl	80034d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003462:	e023      	b.n	80034ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_UART_IRQHandler+0x4f4>
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f953 	bl	8003728 <UART_Transmit_IT>
    return;
 8003482:	e014      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <HAL_UART_IRQHandler+0x51e>
 8003490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f992 	bl	80037c6 <UART_EndTransmit_IT>
    return;
 80034a2:	e004      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
    return;
 80034a4:	bf00      	nop
 80034a6:	e002      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
      return;
 80034a8:	bf00      	nop
 80034aa:	e000      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
      return;
 80034ac:	bf00      	nop
  }
}
 80034ae:	37e8      	adds	r7, #232	; 0xe8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b090      	sub	sp, #64	; 0x40
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	4613      	mov	r3, r2
 80034fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fe:	e050      	b.n	80035a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d04c      	beq.n	80035a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0x30>
 800350e:	f7fe fcc5 	bl	8001e9c <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800351a:	429a      	cmp	r2, r3
 800351c:	d241      	bcs.n	80035a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800353e:	637a      	str	r2, [r7, #52]	; 0x34
 8003540:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3314      	adds	r3, #20
 8003558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	e853 3f00 	ldrex	r3, [r3]
 8003560:	613b      	str	r3, [r7, #16]
   return(result);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	63bb      	str	r3, [r7, #56]	; 0x38
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3314      	adds	r3, #20
 8003570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003572:	623a      	str	r2, [r7, #32]
 8003574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	69f9      	ldr	r1, [r7, #28]
 8003578:	6a3a      	ldr	r2, [r7, #32]
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e5      	bne.n	8003552 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e00f      	b.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4013      	ands	r3, r2
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d09f      	beq.n	8003500 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3740      	adds	r7, #64	; 0x40
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	4613      	mov	r3, r2
 80035d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	88fa      	ldrh	r2, [r7, #6]
 80035e2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2222      	movs	r2, #34	; 0x22
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d007      	beq.n	8003610 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800360e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0220 	orr.w	r2, r2, #32
 800362e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800363c:	b480      	push	{r7}
 800363e:	b095      	sub	sp, #84	; 0x54
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	330c      	adds	r3, #12
 800364a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800365a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003664:	643a      	str	r2, [r7, #64]	; 0x40
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800366a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e5      	bne.n	8003644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3314      	adds	r3, #20
 800367e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	61fb      	str	r3, [r7, #28]
   return(result);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3314      	adds	r3, #20
 8003696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e5      	bne.n	8003678 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d119      	bne.n	80036e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	330c      	adds	r3, #12
 80036ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f023 0310 	bic.w	r3, r3, #16
 80036ca:	647b      	str	r3, [r7, #68]	; 0x44
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036d4:	61ba      	str	r2, [r7, #24]
 80036d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6979      	ldr	r1, [r7, #20]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	613b      	str	r3, [r7, #16]
   return(result);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e5      	bne.n	80036b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036f6:	bf00      	nop
 80036f8:	3754      	adds	r7, #84	; 0x54
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff fed3 	bl	80034c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b21      	cmp	r3, #33	; 0x21
 800373a:	d13e      	bne.n	80037ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003744:	d114      	bne.n	8003770 <UART_Transmit_IT+0x48>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d110      	bne.n	8003770 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003762:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	621a      	str	r2, [r3, #32]
 800376e:	e008      	b.n	8003782 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	1c59      	adds	r1, r3, #1
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6211      	str	r1, [r2, #32]
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29b      	uxth	r3, r3
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	4619      	mov	r1, r3
 8003790:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
  }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff fe64 	bl	80034b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b08c      	sub	sp, #48	; 0x30
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b22      	cmp	r3, #34	; 0x22
 8003808:	f040 80ae 	bne.w	8003968 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003814:	d117      	bne.n	8003846 <UART_Receive_IT+0x50>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d113      	bne.n	8003846 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800381e:	2300      	movs	r3, #0
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003834:	b29a      	uxth	r2, r3
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	1c9a      	adds	r2, r3, #2
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	; 0x28
 8003844:	e026      	b.n	8003894 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800384c:	2300      	movs	r3, #0
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003858:	d007      	beq.n	800386a <UART_Receive_IT+0x74>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <UART_Receive_IT+0x82>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e008      	b.n	800388a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003884:	b2da      	uxtb	r2, r3
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29b      	uxth	r3, r3
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4619      	mov	r1, r3
 80038a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d15d      	bne.n	8003964 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0220 	bic.w	r2, r2, #32
 80038b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d135      	bne.n	800395a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	330c      	adds	r3, #12
 80038fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	613b      	str	r3, [r7, #16]
   return(result);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f023 0310 	bic.w	r3, r3, #16
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003914:	623a      	str	r2, [r7, #32]
 8003916:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	69f9      	ldr	r1, [r7, #28]
 800391a:	6a3a      	ldr	r2, [r7, #32]
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	61bb      	str	r3, [r7, #24]
   return(result);
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e5      	bne.n	80038f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b10      	cmp	r3, #16
 8003934:	d10a      	bne.n	800394c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fdc0 	bl	80034d8 <HAL_UARTEx_RxEventCallback>
 8003958:	e002      	b.n	8003960 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd ff1c 	bl	8001798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e002      	b.n	800396a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3730      	adds	r7, #48	; 0x30
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039ae:	f023 030c 	bic.w	r3, r3, #12
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	430b      	orrs	r3, r1
 80039ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a2c      	ldr	r2, [pc, #176]	; (8003a88 <UART_SetConfig+0x114>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d103      	bne.n	80039e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039dc:	f7ff f9ae 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	e002      	b.n	80039ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039e4:	f7ff f996 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 80039e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009a      	lsls	r2, r3, #2
 80039f4:	441a      	add	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	4a22      	ldr	r2, [pc, #136]	; (8003a8c <UART_SetConfig+0x118>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	0119      	lsls	r1, r3, #4
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009a      	lsls	r2, r3, #2
 8003a14:	441a      	add	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a20:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <UART_SetConfig+0x118>)
 8003a22:	fba3 0302 	umull	r0, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	2064      	movs	r0, #100	; 0x64
 8003a2a:	fb00 f303 	mul.w	r3, r0, r3
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	3332      	adds	r3, #50	; 0x32
 8003a34:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <UART_SetConfig+0x118>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a40:	4419      	add	r1, r3
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009a      	lsls	r2, r3, #2
 8003a4c:	441a      	add	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <UART_SetConfig+0x118>)
 8003a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	2064      	movs	r0, #100	; 0x64
 8003a62:	fb00 f303 	mul.w	r3, r0, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	3332      	adds	r3, #50	; 0x32
 8003a6c:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <UART_SetConfig+0x118>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	f003 020f 	and.w	r2, r3, #15
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a80:	bf00      	nop
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40013800 	.word	0x40013800
 8003a8c:	51eb851f 	.word	0x51eb851f

08003a90 <__errno>:
 8003a90:	4b01      	ldr	r3, [pc, #4]	; (8003a98 <__errno+0x8>)
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	200001c8 	.word	0x200001c8

08003a9c <__libc_init_array>:
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	2600      	movs	r6, #0
 8003aa0:	4d0c      	ldr	r5, [pc, #48]	; (8003ad4 <__libc_init_array+0x38>)
 8003aa2:	4c0d      	ldr	r4, [pc, #52]	; (8003ad8 <__libc_init_array+0x3c>)
 8003aa4:	1b64      	subs	r4, r4, r5
 8003aa6:	10a4      	asrs	r4, r4, #2
 8003aa8:	42a6      	cmp	r6, r4
 8003aaa:	d109      	bne.n	8003ac0 <__libc_init_array+0x24>
 8003aac:	f003 f9c2 	bl	8006e34 <_init>
 8003ab0:	2600      	movs	r6, #0
 8003ab2:	4d0a      	ldr	r5, [pc, #40]	; (8003adc <__libc_init_array+0x40>)
 8003ab4:	4c0a      	ldr	r4, [pc, #40]	; (8003ae0 <__libc_init_array+0x44>)
 8003ab6:	1b64      	subs	r4, r4, r5
 8003ab8:	10a4      	asrs	r4, r4, #2
 8003aba:	42a6      	cmp	r6, r4
 8003abc:	d105      	bne.n	8003aca <__libc_init_array+0x2e>
 8003abe:	bd70      	pop	{r4, r5, r6, pc}
 8003ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac4:	4798      	blx	r3
 8003ac6:	3601      	adds	r6, #1
 8003ac8:	e7ee      	b.n	8003aa8 <__libc_init_array+0xc>
 8003aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ace:	4798      	blx	r3
 8003ad0:	3601      	adds	r6, #1
 8003ad2:	e7f2      	b.n	8003aba <__libc_init_array+0x1e>
 8003ad4:	08007440 	.word	0x08007440
 8003ad8:	08007440 	.word	0x08007440
 8003adc:	08007440 	.word	0x08007440
 8003ae0:	08007444 	.word	0x08007444

08003ae4 <malloc>:
 8003ae4:	4b02      	ldr	r3, [pc, #8]	; (8003af0 <malloc+0xc>)
 8003ae6:	4601      	mov	r1, r0
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	f000 b873 	b.w	8003bd4 <_malloc_r>
 8003aee:	bf00      	nop
 8003af0:	200001c8 	.word	0x200001c8

08003af4 <memset>:
 8003af4:	4603      	mov	r3, r0
 8003af6:	4402      	add	r2, r0
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d100      	bne.n	8003afe <memset+0xa>
 8003afc:	4770      	bx	lr
 8003afe:	f803 1b01 	strb.w	r1, [r3], #1
 8003b02:	e7f9      	b.n	8003af8 <memset+0x4>

08003b04 <_free_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4605      	mov	r5, r0
 8003b08:	2900      	cmp	r1, #0
 8003b0a:	d040      	beq.n	8003b8e <_free_r+0x8a>
 8003b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b10:	1f0c      	subs	r4, r1, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bfb8      	it	lt
 8003b16:	18e4      	addlt	r4, r4, r3
 8003b18:	f000 f98a 	bl	8003e30 <__malloc_lock>
 8003b1c:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <_free_r+0x8c>)
 8003b1e:	6813      	ldr	r3, [r2, #0]
 8003b20:	b933      	cbnz	r3, 8003b30 <_free_r+0x2c>
 8003b22:	6063      	str	r3, [r4, #4]
 8003b24:	6014      	str	r4, [r2, #0]
 8003b26:	4628      	mov	r0, r5
 8003b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b2c:	f000 b986 	b.w	8003e3c <__malloc_unlock>
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	d908      	bls.n	8003b46 <_free_r+0x42>
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	1821      	adds	r1, r4, r0
 8003b38:	428b      	cmp	r3, r1
 8003b3a:	bf01      	itttt	eq
 8003b3c:	6819      	ldreq	r1, [r3, #0]
 8003b3e:	685b      	ldreq	r3, [r3, #4]
 8003b40:	1809      	addeq	r1, r1, r0
 8003b42:	6021      	streq	r1, [r4, #0]
 8003b44:	e7ed      	b.n	8003b22 <_free_r+0x1e>
 8003b46:	461a      	mov	r2, r3
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	b10b      	cbz	r3, 8003b50 <_free_r+0x4c>
 8003b4c:	42a3      	cmp	r3, r4
 8003b4e:	d9fa      	bls.n	8003b46 <_free_r+0x42>
 8003b50:	6811      	ldr	r1, [r2, #0]
 8003b52:	1850      	adds	r0, r2, r1
 8003b54:	42a0      	cmp	r0, r4
 8003b56:	d10b      	bne.n	8003b70 <_free_r+0x6c>
 8003b58:	6820      	ldr	r0, [r4, #0]
 8003b5a:	4401      	add	r1, r0
 8003b5c:	1850      	adds	r0, r2, r1
 8003b5e:	4283      	cmp	r3, r0
 8003b60:	6011      	str	r1, [r2, #0]
 8003b62:	d1e0      	bne.n	8003b26 <_free_r+0x22>
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4401      	add	r1, r0
 8003b6a:	6011      	str	r1, [r2, #0]
 8003b6c:	6053      	str	r3, [r2, #4]
 8003b6e:	e7da      	b.n	8003b26 <_free_r+0x22>
 8003b70:	d902      	bls.n	8003b78 <_free_r+0x74>
 8003b72:	230c      	movs	r3, #12
 8003b74:	602b      	str	r3, [r5, #0]
 8003b76:	e7d6      	b.n	8003b26 <_free_r+0x22>
 8003b78:	6820      	ldr	r0, [r4, #0]
 8003b7a:	1821      	adds	r1, r4, r0
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	bf01      	itttt	eq
 8003b80:	6819      	ldreq	r1, [r3, #0]
 8003b82:	685b      	ldreq	r3, [r3, #4]
 8003b84:	1809      	addeq	r1, r1, r0
 8003b86:	6021      	streq	r1, [r4, #0]
 8003b88:	6063      	str	r3, [r4, #4]
 8003b8a:	6054      	str	r4, [r2, #4]
 8003b8c:	e7cb      	b.n	8003b26 <_free_r+0x22>
 8003b8e:	bd38      	pop	{r3, r4, r5, pc}
 8003b90:	20000310 	.word	0x20000310

08003b94 <sbrk_aligned>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	4e0e      	ldr	r6, [pc, #56]	; (8003bd0 <sbrk_aligned+0x3c>)
 8003b98:	460c      	mov	r4, r1
 8003b9a:	6831      	ldr	r1, [r6, #0]
 8003b9c:	4605      	mov	r5, r0
 8003b9e:	b911      	cbnz	r1, 8003ba6 <sbrk_aligned+0x12>
 8003ba0:	f000 f88c 	bl	8003cbc <_sbrk_r>
 8003ba4:	6030      	str	r0, [r6, #0]
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	4628      	mov	r0, r5
 8003baa:	f000 f887 	bl	8003cbc <_sbrk_r>
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	d00a      	beq.n	8003bc8 <sbrk_aligned+0x34>
 8003bb2:	1cc4      	adds	r4, r0, #3
 8003bb4:	f024 0403 	bic.w	r4, r4, #3
 8003bb8:	42a0      	cmp	r0, r4
 8003bba:	d007      	beq.n	8003bcc <sbrk_aligned+0x38>
 8003bbc:	1a21      	subs	r1, r4, r0
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f000 f87c 	bl	8003cbc <_sbrk_r>
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d101      	bne.n	8003bcc <sbrk_aligned+0x38>
 8003bc8:	f04f 34ff 	mov.w	r4, #4294967295
 8003bcc:	4620      	mov	r0, r4
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	20000314 	.word	0x20000314

08003bd4 <_malloc_r>:
 8003bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd8:	1ccd      	adds	r5, r1, #3
 8003bda:	f025 0503 	bic.w	r5, r5, #3
 8003bde:	3508      	adds	r5, #8
 8003be0:	2d0c      	cmp	r5, #12
 8003be2:	bf38      	it	cc
 8003be4:	250c      	movcc	r5, #12
 8003be6:	2d00      	cmp	r5, #0
 8003be8:	4607      	mov	r7, r0
 8003bea:	db01      	blt.n	8003bf0 <_malloc_r+0x1c>
 8003bec:	42a9      	cmp	r1, r5
 8003bee:	d905      	bls.n	8003bfc <_malloc_r+0x28>
 8003bf0:	230c      	movs	r3, #12
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bfc:	4e2e      	ldr	r6, [pc, #184]	; (8003cb8 <_malloc_r+0xe4>)
 8003bfe:	f000 f917 	bl	8003e30 <__malloc_lock>
 8003c02:	6833      	ldr	r3, [r6, #0]
 8003c04:	461c      	mov	r4, r3
 8003c06:	bb34      	cbnz	r4, 8003c56 <_malloc_r+0x82>
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	f7ff ffc2 	bl	8003b94 <sbrk_aligned>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	4604      	mov	r4, r0
 8003c14:	d14d      	bne.n	8003cb2 <_malloc_r+0xde>
 8003c16:	6834      	ldr	r4, [r6, #0]
 8003c18:	4626      	mov	r6, r4
 8003c1a:	2e00      	cmp	r6, #0
 8003c1c:	d140      	bne.n	8003ca0 <_malloc_r+0xcc>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	4631      	mov	r1, r6
 8003c22:	4638      	mov	r0, r7
 8003c24:	eb04 0803 	add.w	r8, r4, r3
 8003c28:	f000 f848 	bl	8003cbc <_sbrk_r>
 8003c2c:	4580      	cmp	r8, r0
 8003c2e:	d13a      	bne.n	8003ca6 <_malloc_r+0xd2>
 8003c30:	6821      	ldr	r1, [r4, #0]
 8003c32:	3503      	adds	r5, #3
 8003c34:	1a6d      	subs	r5, r5, r1
 8003c36:	f025 0503 	bic.w	r5, r5, #3
 8003c3a:	3508      	adds	r5, #8
 8003c3c:	2d0c      	cmp	r5, #12
 8003c3e:	bf38      	it	cc
 8003c40:	250c      	movcc	r5, #12
 8003c42:	4638      	mov	r0, r7
 8003c44:	4629      	mov	r1, r5
 8003c46:	f7ff ffa5 	bl	8003b94 <sbrk_aligned>
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d02b      	beq.n	8003ca6 <_malloc_r+0xd2>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	442b      	add	r3, r5
 8003c52:	6023      	str	r3, [r4, #0]
 8003c54:	e00e      	b.n	8003c74 <_malloc_r+0xa0>
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	1b52      	subs	r2, r2, r5
 8003c5a:	d41e      	bmi.n	8003c9a <_malloc_r+0xc6>
 8003c5c:	2a0b      	cmp	r2, #11
 8003c5e:	d916      	bls.n	8003c8e <_malloc_r+0xba>
 8003c60:	1961      	adds	r1, r4, r5
 8003c62:	42a3      	cmp	r3, r4
 8003c64:	6025      	str	r5, [r4, #0]
 8003c66:	bf18      	it	ne
 8003c68:	6059      	strne	r1, [r3, #4]
 8003c6a:	6863      	ldr	r3, [r4, #4]
 8003c6c:	bf08      	it	eq
 8003c6e:	6031      	streq	r1, [r6, #0]
 8003c70:	5162      	str	r2, [r4, r5]
 8003c72:	604b      	str	r3, [r1, #4]
 8003c74:	4638      	mov	r0, r7
 8003c76:	f104 060b 	add.w	r6, r4, #11
 8003c7a:	f000 f8df 	bl	8003e3c <__malloc_unlock>
 8003c7e:	f026 0607 	bic.w	r6, r6, #7
 8003c82:	1d23      	adds	r3, r4, #4
 8003c84:	1af2      	subs	r2, r6, r3
 8003c86:	d0b6      	beq.n	8003bf6 <_malloc_r+0x22>
 8003c88:	1b9b      	subs	r3, r3, r6
 8003c8a:	50a3      	str	r3, [r4, r2]
 8003c8c:	e7b3      	b.n	8003bf6 <_malloc_r+0x22>
 8003c8e:	6862      	ldr	r2, [r4, #4]
 8003c90:	42a3      	cmp	r3, r4
 8003c92:	bf0c      	ite	eq
 8003c94:	6032      	streq	r2, [r6, #0]
 8003c96:	605a      	strne	r2, [r3, #4]
 8003c98:	e7ec      	b.n	8003c74 <_malloc_r+0xa0>
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	6864      	ldr	r4, [r4, #4]
 8003c9e:	e7b2      	b.n	8003c06 <_malloc_r+0x32>
 8003ca0:	4634      	mov	r4, r6
 8003ca2:	6876      	ldr	r6, [r6, #4]
 8003ca4:	e7b9      	b.n	8003c1a <_malloc_r+0x46>
 8003ca6:	230c      	movs	r3, #12
 8003ca8:	4638      	mov	r0, r7
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	f000 f8c6 	bl	8003e3c <__malloc_unlock>
 8003cb0:	e7a1      	b.n	8003bf6 <_malloc_r+0x22>
 8003cb2:	6025      	str	r5, [r4, #0]
 8003cb4:	e7de      	b.n	8003c74 <_malloc_r+0xa0>
 8003cb6:	bf00      	nop
 8003cb8:	20000310 	.word	0x20000310

08003cbc <_sbrk_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	4d05      	ldr	r5, [pc, #20]	; (8003cd8 <_sbrk_r+0x1c>)
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	602b      	str	r3, [r5, #0]
 8003cc8:	f7fe f82e 	bl	8001d28 <_sbrk>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d102      	bne.n	8003cd6 <_sbrk_r+0x1a>
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	b103      	cbz	r3, 8003cd6 <_sbrk_r+0x1a>
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	bd38      	pop	{r3, r4, r5, pc}
 8003cd8:	20000318 	.word	0x20000318

08003cdc <strcpy>:
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ce2:	f803 2b01 	strb.w	r2, [r3], #1
 8003ce6:	2a00      	cmp	r2, #0
 8003ce8:	d1f9      	bne.n	8003cde <strcpy+0x2>
 8003cea:	4770      	bx	lr

08003cec <strstr>:
 8003cec:	780a      	ldrb	r2, [r1, #0]
 8003cee:	b570      	push	{r4, r5, r6, lr}
 8003cf0:	b96a      	cbnz	r2, 8003d0e <strstr+0x22>
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d109      	bne.n	8003d0c <strstr+0x20>
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f6      	beq.n	8003cf2 <strstr+0x6>
 8003d04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003d08:	429e      	cmp	r6, r3
 8003d0a:	d0f7      	beq.n	8003cfc <strstr+0x10>
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	7803      	ldrb	r3, [r0, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ef      	bne.n	8003cf4 <strstr+0x8>
 8003d14:	4618      	mov	r0, r3
 8003d16:	e7ec      	b.n	8003cf2 <strstr+0x6>

08003d18 <strtok>:
 8003d18:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <strtok+0x5c>)
 8003d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1e:	681f      	ldr	r7, [r3, #0]
 8003d20:	4605      	mov	r5, r0
 8003d22:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003d24:	460e      	mov	r6, r1
 8003d26:	b9ec      	cbnz	r4, 8003d64 <strtok+0x4c>
 8003d28:	2050      	movs	r0, #80	; 0x50
 8003d2a:	f7ff fedb 	bl	8003ae4 <malloc>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	65b8      	str	r0, [r7, #88]	; 0x58
 8003d32:	b920      	cbnz	r0, 8003d3e <strtok+0x26>
 8003d34:	2157      	movs	r1, #87	; 0x57
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <strtok+0x60>)
 8003d38:	4810      	ldr	r0, [pc, #64]	; (8003d7c <strtok+0x64>)
 8003d3a:	f000 f849 	bl	8003dd0 <__assert_func>
 8003d3e:	e9c0 4400 	strd	r4, r4, [r0]
 8003d42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003d46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003d4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003d4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003d52:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003d56:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003d5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003d5e:	6184      	str	r4, [r0, #24]
 8003d60:	7704      	strb	r4, [r0, #28]
 8003d62:	6244      	str	r4, [r0, #36]	; 0x24
 8003d64:	4631      	mov	r1, r6
 8003d66:	4628      	mov	r0, r5
 8003d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d70:	f000 b806 	b.w	8003d80 <__strtok_r>
 8003d74:	200001c8 	.word	0x200001c8
 8003d78:	08007080 	.word	0x08007080
 8003d7c:	08007097 	.word	0x08007097

08003d80 <__strtok_r>:
 8003d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d82:	b908      	cbnz	r0, 8003d88 <__strtok_r+0x8>
 8003d84:	6810      	ldr	r0, [r2, #0]
 8003d86:	b188      	cbz	r0, 8003dac <__strtok_r+0x2c>
 8003d88:	4604      	mov	r4, r0
 8003d8a:	460f      	mov	r7, r1
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003d92:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003d96:	b91e      	cbnz	r6, 8003da0 <__strtok_r+0x20>
 8003d98:	b965      	cbnz	r5, 8003db4 <__strtok_r+0x34>
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	6015      	str	r5, [r2, #0]
 8003d9e:	e005      	b.n	8003dac <__strtok_r+0x2c>
 8003da0:	42b5      	cmp	r5, r6
 8003da2:	d1f6      	bne.n	8003d92 <__strtok_r+0x12>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f0      	bne.n	8003d8a <__strtok_r+0xa>
 8003da8:	6014      	str	r4, [r2, #0]
 8003daa:	7003      	strb	r3, [r0, #0]
 8003dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dae:	461c      	mov	r4, r3
 8003db0:	e00c      	b.n	8003dcc <__strtok_r+0x4c>
 8003db2:	b915      	cbnz	r5, 8003dba <__strtok_r+0x3a>
 8003db4:	460e      	mov	r6, r1
 8003db6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003dba:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003dbe:	42ab      	cmp	r3, r5
 8003dc0:	d1f7      	bne.n	8003db2 <__strtok_r+0x32>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f3      	beq.n	8003dae <__strtok_r+0x2e>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003dcc:	6014      	str	r4, [r2, #0]
 8003dce:	e7ed      	b.n	8003dac <__strtok_r+0x2c>

08003dd0 <__assert_func>:
 8003dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003dd2:	4614      	mov	r4, r2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <__assert_func+0x2c>)
 8003dd8:	4605      	mov	r5, r0
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68d8      	ldr	r0, [r3, #12]
 8003dde:	b14c      	cbz	r4, 8003df4 <__assert_func+0x24>
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <__assert_func+0x30>)
 8003de2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003de6:	9100      	str	r1, [sp, #0]
 8003de8:	462b      	mov	r3, r5
 8003dea:	4906      	ldr	r1, [pc, #24]	; (8003e04 <__assert_func+0x34>)
 8003dec:	f000 f80e 	bl	8003e0c <fiprintf>
 8003df0:	f000 fbd8 	bl	80045a4 <abort>
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <__assert_func+0x38>)
 8003df6:	461c      	mov	r4, r3
 8003df8:	e7f3      	b.n	8003de2 <__assert_func+0x12>
 8003dfa:	bf00      	nop
 8003dfc:	200001c8 	.word	0x200001c8
 8003e00:	080070f4 	.word	0x080070f4
 8003e04:	08007101 	.word	0x08007101
 8003e08:	0800712f 	.word	0x0800712f

08003e0c <fiprintf>:
 8003e0c:	b40e      	push	{r1, r2, r3}
 8003e0e:	b503      	push	{r0, r1, lr}
 8003e10:	4601      	mov	r1, r0
 8003e12:	ab03      	add	r3, sp, #12
 8003e14:	4805      	ldr	r0, [pc, #20]	; (8003e2c <fiprintf+0x20>)
 8003e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e1a:	6800      	ldr	r0, [r0, #0]
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	f000 f83b 	bl	8003e98 <_vfiprintf_r>
 8003e22:	b002      	add	sp, #8
 8003e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e28:	b003      	add	sp, #12
 8003e2a:	4770      	bx	lr
 8003e2c:	200001c8 	.word	0x200001c8

08003e30 <__malloc_lock>:
 8003e30:	4801      	ldr	r0, [pc, #4]	; (8003e38 <__malloc_lock+0x8>)
 8003e32:	f000 bd73 	b.w	800491c <__retarget_lock_acquire_recursive>
 8003e36:	bf00      	nop
 8003e38:	2000031c 	.word	0x2000031c

08003e3c <__malloc_unlock>:
 8003e3c:	4801      	ldr	r0, [pc, #4]	; (8003e44 <__malloc_unlock+0x8>)
 8003e3e:	f000 bd6e 	b.w	800491e <__retarget_lock_release_recursive>
 8003e42:	bf00      	nop
 8003e44:	2000031c 	.word	0x2000031c

08003e48 <__sfputc_r>:
 8003e48:	6893      	ldr	r3, [r2, #8]
 8003e4a:	b410      	push	{r4}
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	6093      	str	r3, [r2, #8]
 8003e52:	da07      	bge.n	8003e64 <__sfputc_r+0x1c>
 8003e54:	6994      	ldr	r4, [r2, #24]
 8003e56:	42a3      	cmp	r3, r4
 8003e58:	db01      	blt.n	8003e5e <__sfputc_r+0x16>
 8003e5a:	290a      	cmp	r1, #10
 8003e5c:	d102      	bne.n	8003e64 <__sfputc_r+0x1c>
 8003e5e:	bc10      	pop	{r4}
 8003e60:	f000 bae0 	b.w	8004424 <__swbuf_r>
 8003e64:	6813      	ldr	r3, [r2, #0]
 8003e66:	1c58      	adds	r0, r3, #1
 8003e68:	6010      	str	r0, [r2, #0]
 8003e6a:	7019      	strb	r1, [r3, #0]
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	bc10      	pop	{r4}
 8003e70:	4770      	bx	lr

08003e72 <__sfputs_r>:
 8003e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e74:	4606      	mov	r6, r0
 8003e76:	460f      	mov	r7, r1
 8003e78:	4614      	mov	r4, r2
 8003e7a:	18d5      	adds	r5, r2, r3
 8003e7c:	42ac      	cmp	r4, r5
 8003e7e:	d101      	bne.n	8003e84 <__sfputs_r+0x12>
 8003e80:	2000      	movs	r0, #0
 8003e82:	e007      	b.n	8003e94 <__sfputs_r+0x22>
 8003e84:	463a      	mov	r2, r7
 8003e86:	4630      	mov	r0, r6
 8003e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e8c:	f7ff ffdc 	bl	8003e48 <__sfputc_r>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d1f3      	bne.n	8003e7c <__sfputs_r+0xa>
 8003e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e98 <_vfiprintf_r>:
 8003e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9c:	460d      	mov	r5, r1
 8003e9e:	4614      	mov	r4, r2
 8003ea0:	4698      	mov	r8, r3
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	b09d      	sub	sp, #116	; 0x74
 8003ea6:	b118      	cbz	r0, 8003eb0 <_vfiprintf_r+0x18>
 8003ea8:	6983      	ldr	r3, [r0, #24]
 8003eaa:	b90b      	cbnz	r3, 8003eb0 <_vfiprintf_r+0x18>
 8003eac:	f000 fc98 	bl	80047e0 <__sinit>
 8003eb0:	4b89      	ldr	r3, [pc, #548]	; (80040d8 <_vfiprintf_r+0x240>)
 8003eb2:	429d      	cmp	r5, r3
 8003eb4:	d11b      	bne.n	8003eee <_vfiprintf_r+0x56>
 8003eb6:	6875      	ldr	r5, [r6, #4]
 8003eb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eba:	07d9      	lsls	r1, r3, #31
 8003ebc:	d405      	bmi.n	8003eca <_vfiprintf_r+0x32>
 8003ebe:	89ab      	ldrh	r3, [r5, #12]
 8003ec0:	059a      	lsls	r2, r3, #22
 8003ec2:	d402      	bmi.n	8003eca <_vfiprintf_r+0x32>
 8003ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ec6:	f000 fd29 	bl	800491c <__retarget_lock_acquire_recursive>
 8003eca:	89ab      	ldrh	r3, [r5, #12]
 8003ecc:	071b      	lsls	r3, r3, #28
 8003ece:	d501      	bpl.n	8003ed4 <_vfiprintf_r+0x3c>
 8003ed0:	692b      	ldr	r3, [r5, #16]
 8003ed2:	b9eb      	cbnz	r3, 8003f10 <_vfiprintf_r+0x78>
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	f000 faf6 	bl	80044c8 <__swsetup_r>
 8003edc:	b1c0      	cbz	r0, 8003f10 <_vfiprintf_r+0x78>
 8003ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ee0:	07dc      	lsls	r4, r3, #31
 8003ee2:	d50e      	bpl.n	8003f02 <_vfiprintf_r+0x6a>
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	b01d      	add	sp, #116	; 0x74
 8003eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eee:	4b7b      	ldr	r3, [pc, #492]	; (80040dc <_vfiprintf_r+0x244>)
 8003ef0:	429d      	cmp	r5, r3
 8003ef2:	d101      	bne.n	8003ef8 <_vfiprintf_r+0x60>
 8003ef4:	68b5      	ldr	r5, [r6, #8]
 8003ef6:	e7df      	b.n	8003eb8 <_vfiprintf_r+0x20>
 8003ef8:	4b79      	ldr	r3, [pc, #484]	; (80040e0 <_vfiprintf_r+0x248>)
 8003efa:	429d      	cmp	r5, r3
 8003efc:	bf08      	it	eq
 8003efe:	68f5      	ldreq	r5, [r6, #12]
 8003f00:	e7da      	b.n	8003eb8 <_vfiprintf_r+0x20>
 8003f02:	89ab      	ldrh	r3, [r5, #12]
 8003f04:	0598      	lsls	r0, r3, #22
 8003f06:	d4ed      	bmi.n	8003ee4 <_vfiprintf_r+0x4c>
 8003f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f0a:	f000 fd08 	bl	800491e <__retarget_lock_release_recursive>
 8003f0e:	e7e9      	b.n	8003ee4 <_vfiprintf_r+0x4c>
 8003f10:	2300      	movs	r3, #0
 8003f12:	9309      	str	r3, [sp, #36]	; 0x24
 8003f14:	2320      	movs	r3, #32
 8003f16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f1a:	2330      	movs	r3, #48	; 0x30
 8003f1c:	f04f 0901 	mov.w	r9, #1
 8003f20:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f24:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80040e4 <_vfiprintf_r+0x24c>
 8003f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	469a      	mov	sl, r3
 8003f30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f34:	b10a      	cbz	r2, 8003f3a <_vfiprintf_r+0xa2>
 8003f36:	2a25      	cmp	r2, #37	; 0x25
 8003f38:	d1f9      	bne.n	8003f2e <_vfiprintf_r+0x96>
 8003f3a:	ebba 0b04 	subs.w	fp, sl, r4
 8003f3e:	d00b      	beq.n	8003f58 <_vfiprintf_r+0xc0>
 8003f40:	465b      	mov	r3, fp
 8003f42:	4622      	mov	r2, r4
 8003f44:	4629      	mov	r1, r5
 8003f46:	4630      	mov	r0, r6
 8003f48:	f7ff ff93 	bl	8003e72 <__sfputs_r>
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	f000 80aa 	beq.w	80040a6 <_vfiprintf_r+0x20e>
 8003f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f54:	445a      	add	r2, fp
 8003f56:	9209      	str	r2, [sp, #36]	; 0x24
 8003f58:	f89a 3000 	ldrb.w	r3, [sl]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a2 	beq.w	80040a6 <_vfiprintf_r+0x20e>
 8003f62:	2300      	movs	r3, #0
 8003f64:	f04f 32ff 	mov.w	r2, #4294967295
 8003f68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f6c:	f10a 0a01 	add.w	sl, sl, #1
 8003f70:	9304      	str	r3, [sp, #16]
 8003f72:	9307      	str	r3, [sp, #28]
 8003f74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f78:	931a      	str	r3, [sp, #104]	; 0x68
 8003f7a:	4654      	mov	r4, sl
 8003f7c:	2205      	movs	r2, #5
 8003f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f82:	4858      	ldr	r0, [pc, #352]	; (80040e4 <_vfiprintf_r+0x24c>)
 8003f84:	f000 fd32 	bl	80049ec <memchr>
 8003f88:	9a04      	ldr	r2, [sp, #16]
 8003f8a:	b9d8      	cbnz	r0, 8003fc4 <_vfiprintf_r+0x12c>
 8003f8c:	06d1      	lsls	r1, r2, #27
 8003f8e:	bf44      	itt	mi
 8003f90:	2320      	movmi	r3, #32
 8003f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f96:	0713      	lsls	r3, r2, #28
 8003f98:	bf44      	itt	mi
 8003f9a:	232b      	movmi	r3, #43	; 0x2b
 8003f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa6:	d015      	beq.n	8003fd4 <_vfiprintf_r+0x13c>
 8003fa8:	4654      	mov	r4, sl
 8003faa:	2000      	movs	r0, #0
 8003fac:	f04f 0c0a 	mov.w	ip, #10
 8003fb0:	9a07      	ldr	r2, [sp, #28]
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fb8:	3b30      	subs	r3, #48	; 0x30
 8003fba:	2b09      	cmp	r3, #9
 8003fbc:	d94e      	bls.n	800405c <_vfiprintf_r+0x1c4>
 8003fbe:	b1b0      	cbz	r0, 8003fee <_vfiprintf_r+0x156>
 8003fc0:	9207      	str	r2, [sp, #28]
 8003fc2:	e014      	b.n	8003fee <_vfiprintf_r+0x156>
 8003fc4:	eba0 0308 	sub.w	r3, r0, r8
 8003fc8:	fa09 f303 	lsl.w	r3, r9, r3
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	46a2      	mov	sl, r4
 8003fd0:	9304      	str	r3, [sp, #16]
 8003fd2:	e7d2      	b.n	8003f7a <_vfiprintf_r+0xe2>
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	1d19      	adds	r1, r3, #4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	9103      	str	r1, [sp, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bfbb      	ittet	lt
 8003fe0:	425b      	neglt	r3, r3
 8003fe2:	f042 0202 	orrlt.w	r2, r2, #2
 8003fe6:	9307      	strge	r3, [sp, #28]
 8003fe8:	9307      	strlt	r3, [sp, #28]
 8003fea:	bfb8      	it	lt
 8003fec:	9204      	strlt	r2, [sp, #16]
 8003fee:	7823      	ldrb	r3, [r4, #0]
 8003ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ff2:	d10c      	bne.n	800400e <_vfiprintf_r+0x176>
 8003ff4:	7863      	ldrb	r3, [r4, #1]
 8003ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ff8:	d135      	bne.n	8004066 <_vfiprintf_r+0x1ce>
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	3402      	adds	r4, #2
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	9203      	str	r2, [sp, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	bfb8      	it	lt
 8004008:	f04f 33ff 	movlt.w	r3, #4294967295
 800400c:	9305      	str	r3, [sp, #20]
 800400e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80040e8 <_vfiprintf_r+0x250>
 8004012:	2203      	movs	r2, #3
 8004014:	4650      	mov	r0, sl
 8004016:	7821      	ldrb	r1, [r4, #0]
 8004018:	f000 fce8 	bl	80049ec <memchr>
 800401c:	b140      	cbz	r0, 8004030 <_vfiprintf_r+0x198>
 800401e:	2340      	movs	r3, #64	; 0x40
 8004020:	eba0 000a 	sub.w	r0, r0, sl
 8004024:	fa03 f000 	lsl.w	r0, r3, r0
 8004028:	9b04      	ldr	r3, [sp, #16]
 800402a:	3401      	adds	r4, #1
 800402c:	4303      	orrs	r3, r0
 800402e:	9304      	str	r3, [sp, #16]
 8004030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004034:	2206      	movs	r2, #6
 8004036:	482d      	ldr	r0, [pc, #180]	; (80040ec <_vfiprintf_r+0x254>)
 8004038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800403c:	f000 fcd6 	bl	80049ec <memchr>
 8004040:	2800      	cmp	r0, #0
 8004042:	d03f      	beq.n	80040c4 <_vfiprintf_r+0x22c>
 8004044:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <_vfiprintf_r+0x258>)
 8004046:	bb1b      	cbnz	r3, 8004090 <_vfiprintf_r+0x1f8>
 8004048:	9b03      	ldr	r3, [sp, #12]
 800404a:	3307      	adds	r3, #7
 800404c:	f023 0307 	bic.w	r3, r3, #7
 8004050:	3308      	adds	r3, #8
 8004052:	9303      	str	r3, [sp, #12]
 8004054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004056:	443b      	add	r3, r7
 8004058:	9309      	str	r3, [sp, #36]	; 0x24
 800405a:	e767      	b.n	8003f2c <_vfiprintf_r+0x94>
 800405c:	460c      	mov	r4, r1
 800405e:	2001      	movs	r0, #1
 8004060:	fb0c 3202 	mla	r2, ip, r2, r3
 8004064:	e7a5      	b.n	8003fb2 <_vfiprintf_r+0x11a>
 8004066:	2300      	movs	r3, #0
 8004068:	f04f 0c0a 	mov.w	ip, #10
 800406c:	4619      	mov	r1, r3
 800406e:	3401      	adds	r4, #1
 8004070:	9305      	str	r3, [sp, #20]
 8004072:	4620      	mov	r0, r4
 8004074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004078:	3a30      	subs	r2, #48	; 0x30
 800407a:	2a09      	cmp	r2, #9
 800407c:	d903      	bls.n	8004086 <_vfiprintf_r+0x1ee>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0c5      	beq.n	800400e <_vfiprintf_r+0x176>
 8004082:	9105      	str	r1, [sp, #20]
 8004084:	e7c3      	b.n	800400e <_vfiprintf_r+0x176>
 8004086:	4604      	mov	r4, r0
 8004088:	2301      	movs	r3, #1
 800408a:	fb0c 2101 	mla	r1, ip, r1, r2
 800408e:	e7f0      	b.n	8004072 <_vfiprintf_r+0x1da>
 8004090:	ab03      	add	r3, sp, #12
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	462a      	mov	r2, r5
 8004096:	4630      	mov	r0, r6
 8004098:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <_vfiprintf_r+0x25c>)
 800409a:	a904      	add	r1, sp, #16
 800409c:	f3af 8000 	nop.w
 80040a0:	4607      	mov	r7, r0
 80040a2:	1c78      	adds	r0, r7, #1
 80040a4:	d1d6      	bne.n	8004054 <_vfiprintf_r+0x1bc>
 80040a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040a8:	07d9      	lsls	r1, r3, #31
 80040aa:	d405      	bmi.n	80040b8 <_vfiprintf_r+0x220>
 80040ac:	89ab      	ldrh	r3, [r5, #12]
 80040ae:	059a      	lsls	r2, r3, #22
 80040b0:	d402      	bmi.n	80040b8 <_vfiprintf_r+0x220>
 80040b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040b4:	f000 fc33 	bl	800491e <__retarget_lock_release_recursive>
 80040b8:	89ab      	ldrh	r3, [r5, #12]
 80040ba:	065b      	lsls	r3, r3, #25
 80040bc:	f53f af12 	bmi.w	8003ee4 <_vfiprintf_r+0x4c>
 80040c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040c2:	e711      	b.n	8003ee8 <_vfiprintf_r+0x50>
 80040c4:	ab03      	add	r3, sp, #12
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	462a      	mov	r2, r5
 80040ca:	4630      	mov	r0, r6
 80040cc:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <_vfiprintf_r+0x25c>)
 80040ce:	a904      	add	r1, sp, #16
 80040d0:	f000 f882 	bl	80041d8 <_printf_i>
 80040d4:	e7e4      	b.n	80040a0 <_vfiprintf_r+0x208>
 80040d6:	bf00      	nop
 80040d8:	08007184 	.word	0x08007184
 80040dc:	080071a4 	.word	0x080071a4
 80040e0:	08007164 	.word	0x08007164
 80040e4:	08007130 	.word	0x08007130
 80040e8:	08007136 	.word	0x08007136
 80040ec:	0800713a 	.word	0x0800713a
 80040f0:	00000000 	.word	0x00000000
 80040f4:	08003e73 	.word	0x08003e73

080040f8 <_printf_common>:
 80040f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	4616      	mov	r6, r2
 80040fe:	4699      	mov	r9, r3
 8004100:	688a      	ldr	r2, [r1, #8]
 8004102:	690b      	ldr	r3, [r1, #16]
 8004104:	4607      	mov	r7, r0
 8004106:	4293      	cmp	r3, r2
 8004108:	bfb8      	it	lt
 800410a:	4613      	movlt	r3, r2
 800410c:	6033      	str	r3, [r6, #0]
 800410e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004112:	460c      	mov	r4, r1
 8004114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004118:	b10a      	cbz	r2, 800411e <_printf_common+0x26>
 800411a:	3301      	adds	r3, #1
 800411c:	6033      	str	r3, [r6, #0]
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	0699      	lsls	r1, r3, #26
 8004122:	bf42      	ittt	mi
 8004124:	6833      	ldrmi	r3, [r6, #0]
 8004126:	3302      	addmi	r3, #2
 8004128:	6033      	strmi	r3, [r6, #0]
 800412a:	6825      	ldr	r5, [r4, #0]
 800412c:	f015 0506 	ands.w	r5, r5, #6
 8004130:	d106      	bne.n	8004140 <_printf_common+0x48>
 8004132:	f104 0a19 	add.w	sl, r4, #25
 8004136:	68e3      	ldr	r3, [r4, #12]
 8004138:	6832      	ldr	r2, [r6, #0]
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	42ab      	cmp	r3, r5
 800413e:	dc28      	bgt.n	8004192 <_printf_common+0x9a>
 8004140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004144:	1e13      	subs	r3, r2, #0
 8004146:	6822      	ldr	r2, [r4, #0]
 8004148:	bf18      	it	ne
 800414a:	2301      	movne	r3, #1
 800414c:	0692      	lsls	r2, r2, #26
 800414e:	d42d      	bmi.n	80041ac <_printf_common+0xb4>
 8004150:	4649      	mov	r1, r9
 8004152:	4638      	mov	r0, r7
 8004154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004158:	47c0      	blx	r8
 800415a:	3001      	adds	r0, #1
 800415c:	d020      	beq.n	80041a0 <_printf_common+0xa8>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	68e5      	ldr	r5, [r4, #12]
 8004162:	f003 0306 	and.w	r3, r3, #6
 8004166:	2b04      	cmp	r3, #4
 8004168:	bf18      	it	ne
 800416a:	2500      	movne	r5, #0
 800416c:	6832      	ldr	r2, [r6, #0]
 800416e:	f04f 0600 	mov.w	r6, #0
 8004172:	68a3      	ldr	r3, [r4, #8]
 8004174:	bf08      	it	eq
 8004176:	1aad      	subeq	r5, r5, r2
 8004178:	6922      	ldr	r2, [r4, #16]
 800417a:	bf08      	it	eq
 800417c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004180:	4293      	cmp	r3, r2
 8004182:	bfc4      	itt	gt
 8004184:	1a9b      	subgt	r3, r3, r2
 8004186:	18ed      	addgt	r5, r5, r3
 8004188:	341a      	adds	r4, #26
 800418a:	42b5      	cmp	r5, r6
 800418c:	d11a      	bne.n	80041c4 <_printf_common+0xcc>
 800418e:	2000      	movs	r0, #0
 8004190:	e008      	b.n	80041a4 <_printf_common+0xac>
 8004192:	2301      	movs	r3, #1
 8004194:	4652      	mov	r2, sl
 8004196:	4649      	mov	r1, r9
 8004198:	4638      	mov	r0, r7
 800419a:	47c0      	blx	r8
 800419c:	3001      	adds	r0, #1
 800419e:	d103      	bne.n	80041a8 <_printf_common+0xb0>
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295
 80041a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a8:	3501      	adds	r5, #1
 80041aa:	e7c4      	b.n	8004136 <_printf_common+0x3e>
 80041ac:	2030      	movs	r0, #48	; 0x30
 80041ae:	18e1      	adds	r1, r4, r3
 80041b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041ba:	4422      	add	r2, r4
 80041bc:	3302      	adds	r3, #2
 80041be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041c2:	e7c5      	b.n	8004150 <_printf_common+0x58>
 80041c4:	2301      	movs	r3, #1
 80041c6:	4622      	mov	r2, r4
 80041c8:	4649      	mov	r1, r9
 80041ca:	4638      	mov	r0, r7
 80041cc:	47c0      	blx	r8
 80041ce:	3001      	adds	r0, #1
 80041d0:	d0e6      	beq.n	80041a0 <_printf_common+0xa8>
 80041d2:	3601      	adds	r6, #1
 80041d4:	e7d9      	b.n	800418a <_printf_common+0x92>
	...

080041d8 <_printf_i>:
 80041d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041dc:	7e0f      	ldrb	r7, [r1, #24]
 80041de:	4691      	mov	r9, r2
 80041e0:	2f78      	cmp	r7, #120	; 0x78
 80041e2:	4680      	mov	r8, r0
 80041e4:	460c      	mov	r4, r1
 80041e6:	469a      	mov	sl, r3
 80041e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041ee:	d807      	bhi.n	8004200 <_printf_i+0x28>
 80041f0:	2f62      	cmp	r7, #98	; 0x62
 80041f2:	d80a      	bhi.n	800420a <_printf_i+0x32>
 80041f4:	2f00      	cmp	r7, #0
 80041f6:	f000 80d9 	beq.w	80043ac <_printf_i+0x1d4>
 80041fa:	2f58      	cmp	r7, #88	; 0x58
 80041fc:	f000 80a4 	beq.w	8004348 <_printf_i+0x170>
 8004200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004208:	e03a      	b.n	8004280 <_printf_i+0xa8>
 800420a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800420e:	2b15      	cmp	r3, #21
 8004210:	d8f6      	bhi.n	8004200 <_printf_i+0x28>
 8004212:	a101      	add	r1, pc, #4	; (adr r1, 8004218 <_printf_i+0x40>)
 8004214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004218:	08004271 	.word	0x08004271
 800421c:	08004285 	.word	0x08004285
 8004220:	08004201 	.word	0x08004201
 8004224:	08004201 	.word	0x08004201
 8004228:	08004201 	.word	0x08004201
 800422c:	08004201 	.word	0x08004201
 8004230:	08004285 	.word	0x08004285
 8004234:	08004201 	.word	0x08004201
 8004238:	08004201 	.word	0x08004201
 800423c:	08004201 	.word	0x08004201
 8004240:	08004201 	.word	0x08004201
 8004244:	08004393 	.word	0x08004393
 8004248:	080042b5 	.word	0x080042b5
 800424c:	08004375 	.word	0x08004375
 8004250:	08004201 	.word	0x08004201
 8004254:	08004201 	.word	0x08004201
 8004258:	080043b5 	.word	0x080043b5
 800425c:	08004201 	.word	0x08004201
 8004260:	080042b5 	.word	0x080042b5
 8004264:	08004201 	.word	0x08004201
 8004268:	08004201 	.word	0x08004201
 800426c:	0800437d 	.word	0x0800437d
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	1d1a      	adds	r2, r3, #4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	602a      	str	r2, [r5, #0]
 8004278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800427c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004280:	2301      	movs	r3, #1
 8004282:	e0a4      	b.n	80043ce <_printf_i+0x1f6>
 8004284:	6820      	ldr	r0, [r4, #0]
 8004286:	6829      	ldr	r1, [r5, #0]
 8004288:	0606      	lsls	r6, r0, #24
 800428a:	f101 0304 	add.w	r3, r1, #4
 800428e:	d50a      	bpl.n	80042a6 <_printf_i+0xce>
 8004290:	680e      	ldr	r6, [r1, #0]
 8004292:	602b      	str	r3, [r5, #0]
 8004294:	2e00      	cmp	r6, #0
 8004296:	da03      	bge.n	80042a0 <_printf_i+0xc8>
 8004298:	232d      	movs	r3, #45	; 0x2d
 800429a:	4276      	negs	r6, r6
 800429c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a0:	230a      	movs	r3, #10
 80042a2:	485e      	ldr	r0, [pc, #376]	; (800441c <_printf_i+0x244>)
 80042a4:	e019      	b.n	80042da <_printf_i+0x102>
 80042a6:	680e      	ldr	r6, [r1, #0]
 80042a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042ac:	602b      	str	r3, [r5, #0]
 80042ae:	bf18      	it	ne
 80042b0:	b236      	sxthne	r6, r6
 80042b2:	e7ef      	b.n	8004294 <_printf_i+0xbc>
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	6820      	ldr	r0, [r4, #0]
 80042b8:	1d19      	adds	r1, r3, #4
 80042ba:	6029      	str	r1, [r5, #0]
 80042bc:	0601      	lsls	r1, r0, #24
 80042be:	d501      	bpl.n	80042c4 <_printf_i+0xec>
 80042c0:	681e      	ldr	r6, [r3, #0]
 80042c2:	e002      	b.n	80042ca <_printf_i+0xf2>
 80042c4:	0646      	lsls	r6, r0, #25
 80042c6:	d5fb      	bpl.n	80042c0 <_printf_i+0xe8>
 80042c8:	881e      	ldrh	r6, [r3, #0]
 80042ca:	2f6f      	cmp	r7, #111	; 0x6f
 80042cc:	bf0c      	ite	eq
 80042ce:	2308      	moveq	r3, #8
 80042d0:	230a      	movne	r3, #10
 80042d2:	4852      	ldr	r0, [pc, #328]	; (800441c <_printf_i+0x244>)
 80042d4:	2100      	movs	r1, #0
 80042d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042da:	6865      	ldr	r5, [r4, #4]
 80042dc:	2d00      	cmp	r5, #0
 80042de:	bfa8      	it	ge
 80042e0:	6821      	ldrge	r1, [r4, #0]
 80042e2:	60a5      	str	r5, [r4, #8]
 80042e4:	bfa4      	itt	ge
 80042e6:	f021 0104 	bicge.w	r1, r1, #4
 80042ea:	6021      	strge	r1, [r4, #0]
 80042ec:	b90e      	cbnz	r6, 80042f2 <_printf_i+0x11a>
 80042ee:	2d00      	cmp	r5, #0
 80042f0:	d04d      	beq.n	800438e <_printf_i+0x1b6>
 80042f2:	4615      	mov	r5, r2
 80042f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80042f8:	fb03 6711 	mls	r7, r3, r1, r6
 80042fc:	5dc7      	ldrb	r7, [r0, r7]
 80042fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004302:	4637      	mov	r7, r6
 8004304:	42bb      	cmp	r3, r7
 8004306:	460e      	mov	r6, r1
 8004308:	d9f4      	bls.n	80042f4 <_printf_i+0x11c>
 800430a:	2b08      	cmp	r3, #8
 800430c:	d10b      	bne.n	8004326 <_printf_i+0x14e>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	07de      	lsls	r6, r3, #31
 8004312:	d508      	bpl.n	8004326 <_printf_i+0x14e>
 8004314:	6923      	ldr	r3, [r4, #16]
 8004316:	6861      	ldr	r1, [r4, #4]
 8004318:	4299      	cmp	r1, r3
 800431a:	bfde      	ittt	le
 800431c:	2330      	movle	r3, #48	; 0x30
 800431e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004322:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004326:	1b52      	subs	r2, r2, r5
 8004328:	6122      	str	r2, [r4, #16]
 800432a:	464b      	mov	r3, r9
 800432c:	4621      	mov	r1, r4
 800432e:	4640      	mov	r0, r8
 8004330:	f8cd a000 	str.w	sl, [sp]
 8004334:	aa03      	add	r2, sp, #12
 8004336:	f7ff fedf 	bl	80040f8 <_printf_common>
 800433a:	3001      	adds	r0, #1
 800433c:	d14c      	bne.n	80043d8 <_printf_i+0x200>
 800433e:	f04f 30ff 	mov.w	r0, #4294967295
 8004342:	b004      	add	sp, #16
 8004344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004348:	4834      	ldr	r0, [pc, #208]	; (800441c <_printf_i+0x244>)
 800434a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800434e:	6829      	ldr	r1, [r5, #0]
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	f851 6b04 	ldr.w	r6, [r1], #4
 8004356:	6029      	str	r1, [r5, #0]
 8004358:	061d      	lsls	r5, r3, #24
 800435a:	d514      	bpl.n	8004386 <_printf_i+0x1ae>
 800435c:	07df      	lsls	r7, r3, #31
 800435e:	bf44      	itt	mi
 8004360:	f043 0320 	orrmi.w	r3, r3, #32
 8004364:	6023      	strmi	r3, [r4, #0]
 8004366:	b91e      	cbnz	r6, 8004370 <_printf_i+0x198>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	f023 0320 	bic.w	r3, r3, #32
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	2310      	movs	r3, #16
 8004372:	e7af      	b.n	80042d4 <_printf_i+0xfc>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	f043 0320 	orr.w	r3, r3, #32
 800437a:	6023      	str	r3, [r4, #0]
 800437c:	2378      	movs	r3, #120	; 0x78
 800437e:	4828      	ldr	r0, [pc, #160]	; (8004420 <_printf_i+0x248>)
 8004380:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004384:	e7e3      	b.n	800434e <_printf_i+0x176>
 8004386:	0659      	lsls	r1, r3, #25
 8004388:	bf48      	it	mi
 800438a:	b2b6      	uxthmi	r6, r6
 800438c:	e7e6      	b.n	800435c <_printf_i+0x184>
 800438e:	4615      	mov	r5, r2
 8004390:	e7bb      	b.n	800430a <_printf_i+0x132>
 8004392:	682b      	ldr	r3, [r5, #0]
 8004394:	6826      	ldr	r6, [r4, #0]
 8004396:	1d18      	adds	r0, r3, #4
 8004398:	6961      	ldr	r1, [r4, #20]
 800439a:	6028      	str	r0, [r5, #0]
 800439c:	0635      	lsls	r5, r6, #24
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	d501      	bpl.n	80043a6 <_printf_i+0x1ce>
 80043a2:	6019      	str	r1, [r3, #0]
 80043a4:	e002      	b.n	80043ac <_printf_i+0x1d4>
 80043a6:	0670      	lsls	r0, r6, #25
 80043a8:	d5fb      	bpl.n	80043a2 <_printf_i+0x1ca>
 80043aa:	8019      	strh	r1, [r3, #0]
 80043ac:	2300      	movs	r3, #0
 80043ae:	4615      	mov	r5, r2
 80043b0:	6123      	str	r3, [r4, #16]
 80043b2:	e7ba      	b.n	800432a <_printf_i+0x152>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	2100      	movs	r1, #0
 80043b8:	1d1a      	adds	r2, r3, #4
 80043ba:	602a      	str	r2, [r5, #0]
 80043bc:	681d      	ldr	r5, [r3, #0]
 80043be:	6862      	ldr	r2, [r4, #4]
 80043c0:	4628      	mov	r0, r5
 80043c2:	f000 fb13 	bl	80049ec <memchr>
 80043c6:	b108      	cbz	r0, 80043cc <_printf_i+0x1f4>
 80043c8:	1b40      	subs	r0, r0, r5
 80043ca:	6060      	str	r0, [r4, #4]
 80043cc:	6863      	ldr	r3, [r4, #4]
 80043ce:	6123      	str	r3, [r4, #16]
 80043d0:	2300      	movs	r3, #0
 80043d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d6:	e7a8      	b.n	800432a <_printf_i+0x152>
 80043d8:	462a      	mov	r2, r5
 80043da:	4649      	mov	r1, r9
 80043dc:	4640      	mov	r0, r8
 80043de:	6923      	ldr	r3, [r4, #16]
 80043e0:	47d0      	blx	sl
 80043e2:	3001      	adds	r0, #1
 80043e4:	d0ab      	beq.n	800433e <_printf_i+0x166>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	079b      	lsls	r3, r3, #30
 80043ea:	d413      	bmi.n	8004414 <_printf_i+0x23c>
 80043ec:	68e0      	ldr	r0, [r4, #12]
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	4298      	cmp	r0, r3
 80043f2:	bfb8      	it	lt
 80043f4:	4618      	movlt	r0, r3
 80043f6:	e7a4      	b.n	8004342 <_printf_i+0x16a>
 80043f8:	2301      	movs	r3, #1
 80043fa:	4632      	mov	r2, r6
 80043fc:	4649      	mov	r1, r9
 80043fe:	4640      	mov	r0, r8
 8004400:	47d0      	blx	sl
 8004402:	3001      	adds	r0, #1
 8004404:	d09b      	beq.n	800433e <_printf_i+0x166>
 8004406:	3501      	adds	r5, #1
 8004408:	68e3      	ldr	r3, [r4, #12]
 800440a:	9903      	ldr	r1, [sp, #12]
 800440c:	1a5b      	subs	r3, r3, r1
 800440e:	42ab      	cmp	r3, r5
 8004410:	dcf2      	bgt.n	80043f8 <_printf_i+0x220>
 8004412:	e7eb      	b.n	80043ec <_printf_i+0x214>
 8004414:	2500      	movs	r5, #0
 8004416:	f104 0619 	add.w	r6, r4, #25
 800441a:	e7f5      	b.n	8004408 <_printf_i+0x230>
 800441c:	08007141 	.word	0x08007141
 8004420:	08007152 	.word	0x08007152

08004424 <__swbuf_r>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	460e      	mov	r6, r1
 8004428:	4614      	mov	r4, r2
 800442a:	4605      	mov	r5, r0
 800442c:	b118      	cbz	r0, 8004436 <__swbuf_r+0x12>
 800442e:	6983      	ldr	r3, [r0, #24]
 8004430:	b90b      	cbnz	r3, 8004436 <__swbuf_r+0x12>
 8004432:	f000 f9d5 	bl	80047e0 <__sinit>
 8004436:	4b21      	ldr	r3, [pc, #132]	; (80044bc <__swbuf_r+0x98>)
 8004438:	429c      	cmp	r4, r3
 800443a:	d12b      	bne.n	8004494 <__swbuf_r+0x70>
 800443c:	686c      	ldr	r4, [r5, #4]
 800443e:	69a3      	ldr	r3, [r4, #24]
 8004440:	60a3      	str	r3, [r4, #8]
 8004442:	89a3      	ldrh	r3, [r4, #12]
 8004444:	071a      	lsls	r2, r3, #28
 8004446:	d52f      	bpl.n	80044a8 <__swbuf_r+0x84>
 8004448:	6923      	ldr	r3, [r4, #16]
 800444a:	b36b      	cbz	r3, 80044a8 <__swbuf_r+0x84>
 800444c:	6923      	ldr	r3, [r4, #16]
 800444e:	6820      	ldr	r0, [r4, #0]
 8004450:	b2f6      	uxtb	r6, r6
 8004452:	1ac0      	subs	r0, r0, r3
 8004454:	6963      	ldr	r3, [r4, #20]
 8004456:	4637      	mov	r7, r6
 8004458:	4283      	cmp	r3, r0
 800445a:	dc04      	bgt.n	8004466 <__swbuf_r+0x42>
 800445c:	4621      	mov	r1, r4
 800445e:	4628      	mov	r0, r5
 8004460:	f000 f92a 	bl	80046b8 <_fflush_r>
 8004464:	bb30      	cbnz	r0, 80044b4 <__swbuf_r+0x90>
 8004466:	68a3      	ldr	r3, [r4, #8]
 8004468:	3001      	adds	r0, #1
 800446a:	3b01      	subs	r3, #1
 800446c:	60a3      	str	r3, [r4, #8]
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	6022      	str	r2, [r4, #0]
 8004474:	701e      	strb	r6, [r3, #0]
 8004476:	6963      	ldr	r3, [r4, #20]
 8004478:	4283      	cmp	r3, r0
 800447a:	d004      	beq.n	8004486 <__swbuf_r+0x62>
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	07db      	lsls	r3, r3, #31
 8004480:	d506      	bpl.n	8004490 <__swbuf_r+0x6c>
 8004482:	2e0a      	cmp	r6, #10
 8004484:	d104      	bne.n	8004490 <__swbuf_r+0x6c>
 8004486:	4621      	mov	r1, r4
 8004488:	4628      	mov	r0, r5
 800448a:	f000 f915 	bl	80046b8 <_fflush_r>
 800448e:	b988      	cbnz	r0, 80044b4 <__swbuf_r+0x90>
 8004490:	4638      	mov	r0, r7
 8004492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004494:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <__swbuf_r+0x9c>)
 8004496:	429c      	cmp	r4, r3
 8004498:	d101      	bne.n	800449e <__swbuf_r+0x7a>
 800449a:	68ac      	ldr	r4, [r5, #8]
 800449c:	e7cf      	b.n	800443e <__swbuf_r+0x1a>
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <__swbuf_r+0xa0>)
 80044a0:	429c      	cmp	r4, r3
 80044a2:	bf08      	it	eq
 80044a4:	68ec      	ldreq	r4, [r5, #12]
 80044a6:	e7ca      	b.n	800443e <__swbuf_r+0x1a>
 80044a8:	4621      	mov	r1, r4
 80044aa:	4628      	mov	r0, r5
 80044ac:	f000 f80c 	bl	80044c8 <__swsetup_r>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d0cb      	beq.n	800444c <__swbuf_r+0x28>
 80044b4:	f04f 37ff 	mov.w	r7, #4294967295
 80044b8:	e7ea      	b.n	8004490 <__swbuf_r+0x6c>
 80044ba:	bf00      	nop
 80044bc:	08007184 	.word	0x08007184
 80044c0:	080071a4 	.word	0x080071a4
 80044c4:	08007164 	.word	0x08007164

080044c8 <__swsetup_r>:
 80044c8:	4b32      	ldr	r3, [pc, #200]	; (8004594 <__swsetup_r+0xcc>)
 80044ca:	b570      	push	{r4, r5, r6, lr}
 80044cc:	681d      	ldr	r5, [r3, #0]
 80044ce:	4606      	mov	r6, r0
 80044d0:	460c      	mov	r4, r1
 80044d2:	b125      	cbz	r5, 80044de <__swsetup_r+0x16>
 80044d4:	69ab      	ldr	r3, [r5, #24]
 80044d6:	b913      	cbnz	r3, 80044de <__swsetup_r+0x16>
 80044d8:	4628      	mov	r0, r5
 80044da:	f000 f981 	bl	80047e0 <__sinit>
 80044de:	4b2e      	ldr	r3, [pc, #184]	; (8004598 <__swsetup_r+0xd0>)
 80044e0:	429c      	cmp	r4, r3
 80044e2:	d10f      	bne.n	8004504 <__swsetup_r+0x3c>
 80044e4:	686c      	ldr	r4, [r5, #4]
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044ec:	0719      	lsls	r1, r3, #28
 80044ee:	d42c      	bmi.n	800454a <__swsetup_r+0x82>
 80044f0:	06dd      	lsls	r5, r3, #27
 80044f2:	d411      	bmi.n	8004518 <__swsetup_r+0x50>
 80044f4:	2309      	movs	r3, #9
 80044f6:	6033      	str	r3, [r6, #0]
 80044f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004500:	81a3      	strh	r3, [r4, #12]
 8004502:	e03e      	b.n	8004582 <__swsetup_r+0xba>
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <__swsetup_r+0xd4>)
 8004506:	429c      	cmp	r4, r3
 8004508:	d101      	bne.n	800450e <__swsetup_r+0x46>
 800450a:	68ac      	ldr	r4, [r5, #8]
 800450c:	e7eb      	b.n	80044e6 <__swsetup_r+0x1e>
 800450e:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <__swsetup_r+0xd8>)
 8004510:	429c      	cmp	r4, r3
 8004512:	bf08      	it	eq
 8004514:	68ec      	ldreq	r4, [r5, #12]
 8004516:	e7e6      	b.n	80044e6 <__swsetup_r+0x1e>
 8004518:	0758      	lsls	r0, r3, #29
 800451a:	d512      	bpl.n	8004542 <__swsetup_r+0x7a>
 800451c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800451e:	b141      	cbz	r1, 8004532 <__swsetup_r+0x6a>
 8004520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004524:	4299      	cmp	r1, r3
 8004526:	d002      	beq.n	800452e <__swsetup_r+0x66>
 8004528:	4630      	mov	r0, r6
 800452a:	f7ff faeb 	bl	8003b04 <_free_r>
 800452e:	2300      	movs	r3, #0
 8004530:	6363      	str	r3, [r4, #52]	; 0x34
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004538:	81a3      	strh	r3, [r4, #12]
 800453a:	2300      	movs	r3, #0
 800453c:	6063      	str	r3, [r4, #4]
 800453e:	6923      	ldr	r3, [r4, #16]
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	89a3      	ldrh	r3, [r4, #12]
 8004544:	f043 0308 	orr.w	r3, r3, #8
 8004548:	81a3      	strh	r3, [r4, #12]
 800454a:	6923      	ldr	r3, [r4, #16]
 800454c:	b94b      	cbnz	r3, 8004562 <__swsetup_r+0x9a>
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004558:	d003      	beq.n	8004562 <__swsetup_r+0x9a>
 800455a:	4621      	mov	r1, r4
 800455c:	4630      	mov	r0, r6
 800455e:	f000 fa05 	bl	800496c <__smakebuf_r>
 8004562:	89a0      	ldrh	r0, [r4, #12]
 8004564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004568:	f010 0301 	ands.w	r3, r0, #1
 800456c:	d00a      	beq.n	8004584 <__swsetup_r+0xbc>
 800456e:	2300      	movs	r3, #0
 8004570:	60a3      	str	r3, [r4, #8]
 8004572:	6963      	ldr	r3, [r4, #20]
 8004574:	425b      	negs	r3, r3
 8004576:	61a3      	str	r3, [r4, #24]
 8004578:	6923      	ldr	r3, [r4, #16]
 800457a:	b943      	cbnz	r3, 800458e <__swsetup_r+0xc6>
 800457c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004580:	d1ba      	bne.n	80044f8 <__swsetup_r+0x30>
 8004582:	bd70      	pop	{r4, r5, r6, pc}
 8004584:	0781      	lsls	r1, r0, #30
 8004586:	bf58      	it	pl
 8004588:	6963      	ldrpl	r3, [r4, #20]
 800458a:	60a3      	str	r3, [r4, #8]
 800458c:	e7f4      	b.n	8004578 <__swsetup_r+0xb0>
 800458e:	2000      	movs	r0, #0
 8004590:	e7f7      	b.n	8004582 <__swsetup_r+0xba>
 8004592:	bf00      	nop
 8004594:	200001c8 	.word	0x200001c8
 8004598:	08007184 	.word	0x08007184
 800459c:	080071a4 	.word	0x080071a4
 80045a0:	08007164 	.word	0x08007164

080045a4 <abort>:
 80045a4:	2006      	movs	r0, #6
 80045a6:	b508      	push	{r3, lr}
 80045a8:	f000 fa56 	bl	8004a58 <raise>
 80045ac:	2001      	movs	r0, #1
 80045ae:	f7fd fb48 	bl	8001c42 <_exit>
	...

080045b4 <__sflush_r>:
 80045b4:	898a      	ldrh	r2, [r1, #12]
 80045b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b8:	4605      	mov	r5, r0
 80045ba:	0710      	lsls	r0, r2, #28
 80045bc:	460c      	mov	r4, r1
 80045be:	d457      	bmi.n	8004670 <__sflush_r+0xbc>
 80045c0:	684b      	ldr	r3, [r1, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	dc04      	bgt.n	80045d0 <__sflush_r+0x1c>
 80045c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	dc01      	bgt.n	80045d0 <__sflush_r+0x1c>
 80045cc:	2000      	movs	r0, #0
 80045ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045d2:	2e00      	cmp	r6, #0
 80045d4:	d0fa      	beq.n	80045cc <__sflush_r+0x18>
 80045d6:	2300      	movs	r3, #0
 80045d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045dc:	682f      	ldr	r7, [r5, #0]
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	d032      	beq.n	8004648 <__sflush_r+0x94>
 80045e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	075a      	lsls	r2, r3, #29
 80045e8:	d505      	bpl.n	80045f6 <__sflush_r+0x42>
 80045ea:	6863      	ldr	r3, [r4, #4]
 80045ec:	1ac0      	subs	r0, r0, r3
 80045ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045f0:	b10b      	cbz	r3, 80045f6 <__sflush_r+0x42>
 80045f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045f4:	1ac0      	subs	r0, r0, r3
 80045f6:	2300      	movs	r3, #0
 80045f8:	4602      	mov	r2, r0
 80045fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045fc:	4628      	mov	r0, r5
 80045fe:	6a21      	ldr	r1, [r4, #32]
 8004600:	47b0      	blx	r6
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	d106      	bne.n	8004616 <__sflush_r+0x62>
 8004608:	6829      	ldr	r1, [r5, #0]
 800460a:	291d      	cmp	r1, #29
 800460c:	d82c      	bhi.n	8004668 <__sflush_r+0xb4>
 800460e:	4a29      	ldr	r2, [pc, #164]	; (80046b4 <__sflush_r+0x100>)
 8004610:	40ca      	lsrs	r2, r1
 8004612:	07d6      	lsls	r6, r2, #31
 8004614:	d528      	bpl.n	8004668 <__sflush_r+0xb4>
 8004616:	2200      	movs	r2, #0
 8004618:	6062      	str	r2, [r4, #4]
 800461a:	6922      	ldr	r2, [r4, #16]
 800461c:	04d9      	lsls	r1, r3, #19
 800461e:	6022      	str	r2, [r4, #0]
 8004620:	d504      	bpl.n	800462c <__sflush_r+0x78>
 8004622:	1c42      	adds	r2, r0, #1
 8004624:	d101      	bne.n	800462a <__sflush_r+0x76>
 8004626:	682b      	ldr	r3, [r5, #0]
 8004628:	b903      	cbnz	r3, 800462c <__sflush_r+0x78>
 800462a:	6560      	str	r0, [r4, #84]	; 0x54
 800462c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800462e:	602f      	str	r7, [r5, #0]
 8004630:	2900      	cmp	r1, #0
 8004632:	d0cb      	beq.n	80045cc <__sflush_r+0x18>
 8004634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004638:	4299      	cmp	r1, r3
 800463a:	d002      	beq.n	8004642 <__sflush_r+0x8e>
 800463c:	4628      	mov	r0, r5
 800463e:	f7ff fa61 	bl	8003b04 <_free_r>
 8004642:	2000      	movs	r0, #0
 8004644:	6360      	str	r0, [r4, #52]	; 0x34
 8004646:	e7c2      	b.n	80045ce <__sflush_r+0x1a>
 8004648:	6a21      	ldr	r1, [r4, #32]
 800464a:	2301      	movs	r3, #1
 800464c:	4628      	mov	r0, r5
 800464e:	47b0      	blx	r6
 8004650:	1c41      	adds	r1, r0, #1
 8004652:	d1c7      	bne.n	80045e4 <__sflush_r+0x30>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0c4      	beq.n	80045e4 <__sflush_r+0x30>
 800465a:	2b1d      	cmp	r3, #29
 800465c:	d001      	beq.n	8004662 <__sflush_r+0xae>
 800465e:	2b16      	cmp	r3, #22
 8004660:	d101      	bne.n	8004666 <__sflush_r+0xb2>
 8004662:	602f      	str	r7, [r5, #0]
 8004664:	e7b2      	b.n	80045cc <__sflush_r+0x18>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466c:	81a3      	strh	r3, [r4, #12]
 800466e:	e7ae      	b.n	80045ce <__sflush_r+0x1a>
 8004670:	690f      	ldr	r7, [r1, #16]
 8004672:	2f00      	cmp	r7, #0
 8004674:	d0aa      	beq.n	80045cc <__sflush_r+0x18>
 8004676:	0793      	lsls	r3, r2, #30
 8004678:	bf18      	it	ne
 800467a:	2300      	movne	r3, #0
 800467c:	680e      	ldr	r6, [r1, #0]
 800467e:	bf08      	it	eq
 8004680:	694b      	ldreq	r3, [r1, #20]
 8004682:	1bf6      	subs	r6, r6, r7
 8004684:	600f      	str	r7, [r1, #0]
 8004686:	608b      	str	r3, [r1, #8]
 8004688:	2e00      	cmp	r6, #0
 800468a:	dd9f      	ble.n	80045cc <__sflush_r+0x18>
 800468c:	4633      	mov	r3, r6
 800468e:	463a      	mov	r2, r7
 8004690:	4628      	mov	r0, r5
 8004692:	6a21      	ldr	r1, [r4, #32]
 8004694:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004698:	47e0      	blx	ip
 800469a:	2800      	cmp	r0, #0
 800469c:	dc06      	bgt.n	80046ac <__sflush_r+0xf8>
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a8:	81a3      	strh	r3, [r4, #12]
 80046aa:	e790      	b.n	80045ce <__sflush_r+0x1a>
 80046ac:	4407      	add	r7, r0
 80046ae:	1a36      	subs	r6, r6, r0
 80046b0:	e7ea      	b.n	8004688 <__sflush_r+0xd4>
 80046b2:	bf00      	nop
 80046b4:	20400001 	.word	0x20400001

080046b8 <_fflush_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	690b      	ldr	r3, [r1, #16]
 80046bc:	4605      	mov	r5, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	b913      	cbnz	r3, 80046c8 <_fflush_r+0x10>
 80046c2:	2500      	movs	r5, #0
 80046c4:	4628      	mov	r0, r5
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	b118      	cbz	r0, 80046d2 <_fflush_r+0x1a>
 80046ca:	6983      	ldr	r3, [r0, #24]
 80046cc:	b90b      	cbnz	r3, 80046d2 <_fflush_r+0x1a>
 80046ce:	f000 f887 	bl	80047e0 <__sinit>
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <_fflush_r+0x6c>)
 80046d4:	429c      	cmp	r4, r3
 80046d6:	d11b      	bne.n	8004710 <_fflush_r+0x58>
 80046d8:	686c      	ldr	r4, [r5, #4]
 80046da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0ef      	beq.n	80046c2 <_fflush_r+0xa>
 80046e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046e4:	07d0      	lsls	r0, r2, #31
 80046e6:	d404      	bmi.n	80046f2 <_fflush_r+0x3a>
 80046e8:	0599      	lsls	r1, r3, #22
 80046ea:	d402      	bmi.n	80046f2 <_fflush_r+0x3a>
 80046ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ee:	f000 f915 	bl	800491c <__retarget_lock_acquire_recursive>
 80046f2:	4628      	mov	r0, r5
 80046f4:	4621      	mov	r1, r4
 80046f6:	f7ff ff5d 	bl	80045b4 <__sflush_r>
 80046fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046fc:	4605      	mov	r5, r0
 80046fe:	07da      	lsls	r2, r3, #31
 8004700:	d4e0      	bmi.n	80046c4 <_fflush_r+0xc>
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	059b      	lsls	r3, r3, #22
 8004706:	d4dd      	bmi.n	80046c4 <_fflush_r+0xc>
 8004708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800470a:	f000 f908 	bl	800491e <__retarget_lock_release_recursive>
 800470e:	e7d9      	b.n	80046c4 <_fflush_r+0xc>
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <_fflush_r+0x70>)
 8004712:	429c      	cmp	r4, r3
 8004714:	d101      	bne.n	800471a <_fflush_r+0x62>
 8004716:	68ac      	ldr	r4, [r5, #8]
 8004718:	e7df      	b.n	80046da <_fflush_r+0x22>
 800471a:	4b04      	ldr	r3, [pc, #16]	; (800472c <_fflush_r+0x74>)
 800471c:	429c      	cmp	r4, r3
 800471e:	bf08      	it	eq
 8004720:	68ec      	ldreq	r4, [r5, #12]
 8004722:	e7da      	b.n	80046da <_fflush_r+0x22>
 8004724:	08007184 	.word	0x08007184
 8004728:	080071a4 	.word	0x080071a4
 800472c:	08007164 	.word	0x08007164

08004730 <std>:
 8004730:	2300      	movs	r3, #0
 8004732:	b510      	push	{r4, lr}
 8004734:	4604      	mov	r4, r0
 8004736:	e9c0 3300 	strd	r3, r3, [r0]
 800473a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800473e:	6083      	str	r3, [r0, #8]
 8004740:	8181      	strh	r1, [r0, #12]
 8004742:	6643      	str	r3, [r0, #100]	; 0x64
 8004744:	81c2      	strh	r2, [r0, #14]
 8004746:	6183      	str	r3, [r0, #24]
 8004748:	4619      	mov	r1, r3
 800474a:	2208      	movs	r2, #8
 800474c:	305c      	adds	r0, #92	; 0x5c
 800474e:	f7ff f9d1 	bl	8003af4 <memset>
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <std+0x38>)
 8004754:	6224      	str	r4, [r4, #32]
 8004756:	6263      	str	r3, [r4, #36]	; 0x24
 8004758:	4b04      	ldr	r3, [pc, #16]	; (800476c <std+0x3c>)
 800475a:	62a3      	str	r3, [r4, #40]	; 0x28
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <std+0x40>)
 800475e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <std+0x44>)
 8004762:	6323      	str	r3, [r4, #48]	; 0x30
 8004764:	bd10      	pop	{r4, pc}
 8004766:	bf00      	nop
 8004768:	08004a91 	.word	0x08004a91
 800476c:	08004ab3 	.word	0x08004ab3
 8004770:	08004aeb 	.word	0x08004aeb
 8004774:	08004b0f 	.word	0x08004b0f

08004778 <_cleanup_r>:
 8004778:	4901      	ldr	r1, [pc, #4]	; (8004780 <_cleanup_r+0x8>)
 800477a:	f000 b8af 	b.w	80048dc <_fwalk_reent>
 800477e:	bf00      	nop
 8004780:	080046b9 	.word	0x080046b9

08004784 <__sfmoreglue>:
 8004784:	2268      	movs	r2, #104	; 0x68
 8004786:	b570      	push	{r4, r5, r6, lr}
 8004788:	1e4d      	subs	r5, r1, #1
 800478a:	4355      	muls	r5, r2
 800478c:	460e      	mov	r6, r1
 800478e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004792:	f7ff fa1f 	bl	8003bd4 <_malloc_r>
 8004796:	4604      	mov	r4, r0
 8004798:	b140      	cbz	r0, 80047ac <__sfmoreglue+0x28>
 800479a:	2100      	movs	r1, #0
 800479c:	e9c0 1600 	strd	r1, r6, [r0]
 80047a0:	300c      	adds	r0, #12
 80047a2:	60a0      	str	r0, [r4, #8]
 80047a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047a8:	f7ff f9a4 	bl	8003af4 <memset>
 80047ac:	4620      	mov	r0, r4
 80047ae:	bd70      	pop	{r4, r5, r6, pc}

080047b0 <__sfp_lock_acquire>:
 80047b0:	4801      	ldr	r0, [pc, #4]	; (80047b8 <__sfp_lock_acquire+0x8>)
 80047b2:	f000 b8b3 	b.w	800491c <__retarget_lock_acquire_recursive>
 80047b6:	bf00      	nop
 80047b8:	2000031d 	.word	0x2000031d

080047bc <__sfp_lock_release>:
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <__sfp_lock_release+0x8>)
 80047be:	f000 b8ae 	b.w	800491e <__retarget_lock_release_recursive>
 80047c2:	bf00      	nop
 80047c4:	2000031d 	.word	0x2000031d

080047c8 <__sinit_lock_acquire>:
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <__sinit_lock_acquire+0x8>)
 80047ca:	f000 b8a7 	b.w	800491c <__retarget_lock_acquire_recursive>
 80047ce:	bf00      	nop
 80047d0:	2000031e 	.word	0x2000031e

080047d4 <__sinit_lock_release>:
 80047d4:	4801      	ldr	r0, [pc, #4]	; (80047dc <__sinit_lock_release+0x8>)
 80047d6:	f000 b8a2 	b.w	800491e <__retarget_lock_release_recursive>
 80047da:	bf00      	nop
 80047dc:	2000031e 	.word	0x2000031e

080047e0 <__sinit>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4604      	mov	r4, r0
 80047e4:	f7ff fff0 	bl	80047c8 <__sinit_lock_acquire>
 80047e8:	69a3      	ldr	r3, [r4, #24]
 80047ea:	b11b      	cbz	r3, 80047f4 <__sinit+0x14>
 80047ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f0:	f7ff bff0 	b.w	80047d4 <__sinit_lock_release>
 80047f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047f8:	6523      	str	r3, [r4, #80]	; 0x50
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <__sinit+0x68>)
 80047fc:	4a13      	ldr	r2, [pc, #76]	; (800484c <__sinit+0x6c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	62a2      	str	r2, [r4, #40]	; 0x28
 8004802:	42a3      	cmp	r3, r4
 8004804:	bf08      	it	eq
 8004806:	2301      	moveq	r3, #1
 8004808:	4620      	mov	r0, r4
 800480a:	bf08      	it	eq
 800480c:	61a3      	streq	r3, [r4, #24]
 800480e:	f000 f81f 	bl	8004850 <__sfp>
 8004812:	6060      	str	r0, [r4, #4]
 8004814:	4620      	mov	r0, r4
 8004816:	f000 f81b 	bl	8004850 <__sfp>
 800481a:	60a0      	str	r0, [r4, #8]
 800481c:	4620      	mov	r0, r4
 800481e:	f000 f817 	bl	8004850 <__sfp>
 8004822:	2200      	movs	r2, #0
 8004824:	2104      	movs	r1, #4
 8004826:	60e0      	str	r0, [r4, #12]
 8004828:	6860      	ldr	r0, [r4, #4]
 800482a:	f7ff ff81 	bl	8004730 <std>
 800482e:	2201      	movs	r2, #1
 8004830:	2109      	movs	r1, #9
 8004832:	68a0      	ldr	r0, [r4, #8]
 8004834:	f7ff ff7c 	bl	8004730 <std>
 8004838:	2202      	movs	r2, #2
 800483a:	2112      	movs	r1, #18
 800483c:	68e0      	ldr	r0, [r4, #12]
 800483e:	f7ff ff77 	bl	8004730 <std>
 8004842:	2301      	movs	r3, #1
 8004844:	61a3      	str	r3, [r4, #24]
 8004846:	e7d1      	b.n	80047ec <__sinit+0xc>
 8004848:	0800707c 	.word	0x0800707c
 800484c:	08004779 	.word	0x08004779

08004850 <__sfp>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	4607      	mov	r7, r0
 8004854:	f7ff ffac 	bl	80047b0 <__sfp_lock_acquire>
 8004858:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <__sfp+0x84>)
 800485a:	681e      	ldr	r6, [r3, #0]
 800485c:	69b3      	ldr	r3, [r6, #24]
 800485e:	b913      	cbnz	r3, 8004866 <__sfp+0x16>
 8004860:	4630      	mov	r0, r6
 8004862:	f7ff ffbd 	bl	80047e0 <__sinit>
 8004866:	3648      	adds	r6, #72	; 0x48
 8004868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800486c:	3b01      	subs	r3, #1
 800486e:	d503      	bpl.n	8004878 <__sfp+0x28>
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	b30b      	cbz	r3, 80048b8 <__sfp+0x68>
 8004874:	6836      	ldr	r6, [r6, #0]
 8004876:	e7f7      	b.n	8004868 <__sfp+0x18>
 8004878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800487c:	b9d5      	cbnz	r5, 80048b4 <__sfp+0x64>
 800487e:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <__sfp+0x88>)
 8004880:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004884:	60e3      	str	r3, [r4, #12]
 8004886:	6665      	str	r5, [r4, #100]	; 0x64
 8004888:	f000 f847 	bl	800491a <__retarget_lock_init_recursive>
 800488c:	f7ff ff96 	bl	80047bc <__sfp_lock_release>
 8004890:	2208      	movs	r2, #8
 8004892:	4629      	mov	r1, r5
 8004894:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004898:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800489c:	6025      	str	r5, [r4, #0]
 800489e:	61a5      	str	r5, [r4, #24]
 80048a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048a4:	f7ff f926 	bl	8003af4 <memset>
 80048a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048b0:	4620      	mov	r0, r4
 80048b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b4:	3468      	adds	r4, #104	; 0x68
 80048b6:	e7d9      	b.n	800486c <__sfp+0x1c>
 80048b8:	2104      	movs	r1, #4
 80048ba:	4638      	mov	r0, r7
 80048bc:	f7ff ff62 	bl	8004784 <__sfmoreglue>
 80048c0:	4604      	mov	r4, r0
 80048c2:	6030      	str	r0, [r6, #0]
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d1d5      	bne.n	8004874 <__sfp+0x24>
 80048c8:	f7ff ff78 	bl	80047bc <__sfp_lock_release>
 80048cc:	230c      	movs	r3, #12
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	e7ee      	b.n	80048b0 <__sfp+0x60>
 80048d2:	bf00      	nop
 80048d4:	0800707c 	.word	0x0800707c
 80048d8:	ffff0001 	.word	0xffff0001

080048dc <_fwalk_reent>:
 80048dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e0:	4606      	mov	r6, r0
 80048e2:	4688      	mov	r8, r1
 80048e4:	2700      	movs	r7, #0
 80048e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048ee:	f1b9 0901 	subs.w	r9, r9, #1
 80048f2:	d505      	bpl.n	8004900 <_fwalk_reent+0x24>
 80048f4:	6824      	ldr	r4, [r4, #0]
 80048f6:	2c00      	cmp	r4, #0
 80048f8:	d1f7      	bne.n	80048ea <_fwalk_reent+0xe>
 80048fa:	4638      	mov	r0, r7
 80048fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004900:	89ab      	ldrh	r3, [r5, #12]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d907      	bls.n	8004916 <_fwalk_reent+0x3a>
 8004906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800490a:	3301      	adds	r3, #1
 800490c:	d003      	beq.n	8004916 <_fwalk_reent+0x3a>
 800490e:	4629      	mov	r1, r5
 8004910:	4630      	mov	r0, r6
 8004912:	47c0      	blx	r8
 8004914:	4307      	orrs	r7, r0
 8004916:	3568      	adds	r5, #104	; 0x68
 8004918:	e7e9      	b.n	80048ee <_fwalk_reent+0x12>

0800491a <__retarget_lock_init_recursive>:
 800491a:	4770      	bx	lr

0800491c <__retarget_lock_acquire_recursive>:
 800491c:	4770      	bx	lr

0800491e <__retarget_lock_release_recursive>:
 800491e:	4770      	bx	lr

08004920 <__swhatbuf_r>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	460e      	mov	r6, r1
 8004924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004928:	4614      	mov	r4, r2
 800492a:	2900      	cmp	r1, #0
 800492c:	461d      	mov	r5, r3
 800492e:	b096      	sub	sp, #88	; 0x58
 8004930:	da08      	bge.n	8004944 <__swhatbuf_r+0x24>
 8004932:	2200      	movs	r2, #0
 8004934:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004938:	602a      	str	r2, [r5, #0]
 800493a:	061a      	lsls	r2, r3, #24
 800493c:	d410      	bmi.n	8004960 <__swhatbuf_r+0x40>
 800493e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004942:	e00e      	b.n	8004962 <__swhatbuf_r+0x42>
 8004944:	466a      	mov	r2, sp
 8004946:	f000 f909 	bl	8004b5c <_fstat_r>
 800494a:	2800      	cmp	r0, #0
 800494c:	dbf1      	blt.n	8004932 <__swhatbuf_r+0x12>
 800494e:	9a01      	ldr	r2, [sp, #4]
 8004950:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004954:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004958:	425a      	negs	r2, r3
 800495a:	415a      	adcs	r2, r3
 800495c:	602a      	str	r2, [r5, #0]
 800495e:	e7ee      	b.n	800493e <__swhatbuf_r+0x1e>
 8004960:	2340      	movs	r3, #64	; 0x40
 8004962:	2000      	movs	r0, #0
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	b016      	add	sp, #88	; 0x58
 8004968:	bd70      	pop	{r4, r5, r6, pc}
	...

0800496c <__smakebuf_r>:
 800496c:	898b      	ldrh	r3, [r1, #12]
 800496e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004970:	079d      	lsls	r5, r3, #30
 8004972:	4606      	mov	r6, r0
 8004974:	460c      	mov	r4, r1
 8004976:	d507      	bpl.n	8004988 <__smakebuf_r+0x1c>
 8004978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	2301      	movs	r3, #1
 8004982:	6163      	str	r3, [r4, #20]
 8004984:	b002      	add	sp, #8
 8004986:	bd70      	pop	{r4, r5, r6, pc}
 8004988:	466a      	mov	r2, sp
 800498a:	ab01      	add	r3, sp, #4
 800498c:	f7ff ffc8 	bl	8004920 <__swhatbuf_r>
 8004990:	9900      	ldr	r1, [sp, #0]
 8004992:	4605      	mov	r5, r0
 8004994:	4630      	mov	r0, r6
 8004996:	f7ff f91d 	bl	8003bd4 <_malloc_r>
 800499a:	b948      	cbnz	r0, 80049b0 <__smakebuf_r+0x44>
 800499c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a0:	059a      	lsls	r2, r3, #22
 80049a2:	d4ef      	bmi.n	8004984 <__smakebuf_r+0x18>
 80049a4:	f023 0303 	bic.w	r3, r3, #3
 80049a8:	f043 0302 	orr.w	r3, r3, #2
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	e7e3      	b.n	8004978 <__smakebuf_r+0xc>
 80049b0:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <__smakebuf_r+0x7c>)
 80049b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	6020      	str	r0, [r4, #0]
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	9b00      	ldr	r3, [sp, #0]
 80049c0:	6120      	str	r0, [r4, #16]
 80049c2:	6163      	str	r3, [r4, #20]
 80049c4:	9b01      	ldr	r3, [sp, #4]
 80049c6:	b15b      	cbz	r3, 80049e0 <__smakebuf_r+0x74>
 80049c8:	4630      	mov	r0, r6
 80049ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049ce:	f000 f8d7 	bl	8004b80 <_isatty_r>
 80049d2:	b128      	cbz	r0, 80049e0 <__smakebuf_r+0x74>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	89a0      	ldrh	r0, [r4, #12]
 80049e2:	4305      	orrs	r5, r0
 80049e4:	81a5      	strh	r5, [r4, #12]
 80049e6:	e7cd      	b.n	8004984 <__smakebuf_r+0x18>
 80049e8:	08004779 	.word	0x08004779

080049ec <memchr>:
 80049ec:	4603      	mov	r3, r0
 80049ee:	b510      	push	{r4, lr}
 80049f0:	b2c9      	uxtb	r1, r1
 80049f2:	4402      	add	r2, r0
 80049f4:	4293      	cmp	r3, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	d101      	bne.n	80049fe <memchr+0x12>
 80049fa:	2000      	movs	r0, #0
 80049fc:	e003      	b.n	8004a06 <memchr+0x1a>
 80049fe:	7804      	ldrb	r4, [r0, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	428c      	cmp	r4, r1
 8004a04:	d1f6      	bne.n	80049f4 <memchr+0x8>
 8004a06:	bd10      	pop	{r4, pc}

08004a08 <_raise_r>:
 8004a08:	291f      	cmp	r1, #31
 8004a0a:	b538      	push	{r3, r4, r5, lr}
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	460d      	mov	r5, r1
 8004a10:	d904      	bls.n	8004a1c <_raise_r+0x14>
 8004a12:	2316      	movs	r3, #22
 8004a14:	6003      	str	r3, [r0, #0]
 8004a16:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a1e:	b112      	cbz	r2, 8004a26 <_raise_r+0x1e>
 8004a20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a24:	b94b      	cbnz	r3, 8004a3a <_raise_r+0x32>
 8004a26:	4620      	mov	r0, r4
 8004a28:	f000 f830 	bl	8004a8c <_getpid_r>
 8004a2c:	462a      	mov	r2, r5
 8004a2e:	4601      	mov	r1, r0
 8004a30:	4620      	mov	r0, r4
 8004a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a36:	f000 b817 	b.w	8004a68 <_kill_r>
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d00a      	beq.n	8004a54 <_raise_r+0x4c>
 8004a3e:	1c59      	adds	r1, r3, #1
 8004a40:	d103      	bne.n	8004a4a <_raise_r+0x42>
 8004a42:	2316      	movs	r3, #22
 8004a44:	6003      	str	r3, [r0, #0]
 8004a46:	2001      	movs	r0, #1
 8004a48:	e7e7      	b.n	8004a1a <_raise_r+0x12>
 8004a4a:	2400      	movs	r4, #0
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004a52:	4798      	blx	r3
 8004a54:	2000      	movs	r0, #0
 8004a56:	e7e0      	b.n	8004a1a <_raise_r+0x12>

08004a58 <raise>:
 8004a58:	4b02      	ldr	r3, [pc, #8]	; (8004a64 <raise+0xc>)
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	f7ff bfd3 	b.w	8004a08 <_raise_r>
 8004a62:	bf00      	nop
 8004a64:	200001c8 	.word	0x200001c8

08004a68 <_kill_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	4d06      	ldr	r5, [pc, #24]	; (8004a88 <_kill_r+0x20>)
 8004a6e:	4604      	mov	r4, r0
 8004a70:	4608      	mov	r0, r1
 8004a72:	4611      	mov	r1, r2
 8004a74:	602b      	str	r3, [r5, #0]
 8004a76:	f7fd f8d4 	bl	8001c22 <_kill>
 8004a7a:	1c43      	adds	r3, r0, #1
 8004a7c:	d102      	bne.n	8004a84 <_kill_r+0x1c>
 8004a7e:	682b      	ldr	r3, [r5, #0]
 8004a80:	b103      	cbz	r3, 8004a84 <_kill_r+0x1c>
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	bd38      	pop	{r3, r4, r5, pc}
 8004a86:	bf00      	nop
 8004a88:	20000318 	.word	0x20000318

08004a8c <_getpid_r>:
 8004a8c:	f7fd b8c2 	b.w	8001c14 <_getpid>

08004a90 <__sread>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	460c      	mov	r4, r1
 8004a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a98:	f000 f894 	bl	8004bc4 <_read_r>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	bfab      	itete	ge
 8004aa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8004aa4:	181b      	addge	r3, r3, r0
 8004aa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004aaa:	bfac      	ite	ge
 8004aac:	6563      	strge	r3, [r4, #84]	; 0x54
 8004aae:	81a3      	strhlt	r3, [r4, #12]
 8004ab0:	bd10      	pop	{r4, pc}

08004ab2 <__swrite>:
 8004ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab6:	461f      	mov	r7, r3
 8004ab8:	898b      	ldrh	r3, [r1, #12]
 8004aba:	4605      	mov	r5, r0
 8004abc:	05db      	lsls	r3, r3, #23
 8004abe:	460c      	mov	r4, r1
 8004ac0:	4616      	mov	r6, r2
 8004ac2:	d505      	bpl.n	8004ad0 <__swrite+0x1e>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004acc:	f000 f868 	bl	8004ba0 <_lseek_r>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	4632      	mov	r2, r6
 8004ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ad8:	81a3      	strh	r3, [r4, #12]
 8004ada:	4628      	mov	r0, r5
 8004adc:	463b      	mov	r3, r7
 8004ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae6:	f000 b817 	b.w	8004b18 <_write_r>

08004aea <__sseek>:
 8004aea:	b510      	push	{r4, lr}
 8004aec:	460c      	mov	r4, r1
 8004aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af2:	f000 f855 	bl	8004ba0 <_lseek_r>
 8004af6:	1c43      	adds	r3, r0, #1
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	bf15      	itete	ne
 8004afc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004afe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b06:	81a3      	strheq	r3, [r4, #12]
 8004b08:	bf18      	it	ne
 8004b0a:	81a3      	strhne	r3, [r4, #12]
 8004b0c:	bd10      	pop	{r4, pc}

08004b0e <__sclose>:
 8004b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b12:	f000 b813 	b.w	8004b3c <_close_r>
	...

08004b18 <_write_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	2200      	movs	r2, #0
 8004b22:	4d05      	ldr	r5, [pc, #20]	; (8004b38 <_write_r+0x20>)
 8004b24:	602a      	str	r2, [r5, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	f7fd f8b2 	bl	8001c90 <_write>
 8004b2c:	1c43      	adds	r3, r0, #1
 8004b2e:	d102      	bne.n	8004b36 <_write_r+0x1e>
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	b103      	cbz	r3, 8004b36 <_write_r+0x1e>
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	bd38      	pop	{r3, r4, r5, pc}
 8004b38:	20000318 	.word	0x20000318

08004b3c <_close_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	2300      	movs	r3, #0
 8004b40:	4d05      	ldr	r5, [pc, #20]	; (8004b58 <_close_r+0x1c>)
 8004b42:	4604      	mov	r4, r0
 8004b44:	4608      	mov	r0, r1
 8004b46:	602b      	str	r3, [r5, #0]
 8004b48:	f7fd f8be 	bl	8001cc8 <_close>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d102      	bne.n	8004b56 <_close_r+0x1a>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	b103      	cbz	r3, 8004b56 <_close_r+0x1a>
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	20000318 	.word	0x20000318

08004b5c <_fstat_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	2300      	movs	r3, #0
 8004b60:	4d06      	ldr	r5, [pc, #24]	; (8004b7c <_fstat_r+0x20>)
 8004b62:	4604      	mov	r4, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	602b      	str	r3, [r5, #0]
 8004b6a:	f7fd f8b8 	bl	8001cde <_fstat>
 8004b6e:	1c43      	adds	r3, r0, #1
 8004b70:	d102      	bne.n	8004b78 <_fstat_r+0x1c>
 8004b72:	682b      	ldr	r3, [r5, #0]
 8004b74:	b103      	cbz	r3, 8004b78 <_fstat_r+0x1c>
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	bd38      	pop	{r3, r4, r5, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000318 	.word	0x20000318

08004b80 <_isatty_r>:
 8004b80:	b538      	push	{r3, r4, r5, lr}
 8004b82:	2300      	movs	r3, #0
 8004b84:	4d05      	ldr	r5, [pc, #20]	; (8004b9c <_isatty_r+0x1c>)
 8004b86:	4604      	mov	r4, r0
 8004b88:	4608      	mov	r0, r1
 8004b8a:	602b      	str	r3, [r5, #0]
 8004b8c:	f7fd f8b6 	bl	8001cfc <_isatty>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_isatty_r+0x1a>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_isatty_r+0x1a>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	20000318 	.word	0x20000318

08004ba0 <_lseek_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4d05      	ldr	r5, [pc, #20]	; (8004bc0 <_lseek_r+0x20>)
 8004bac:	602a      	str	r2, [r5, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f7fd f8ae 	bl	8001d10 <_lseek>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d102      	bne.n	8004bbe <_lseek_r+0x1e>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	b103      	cbz	r3, 8004bbe <_lseek_r+0x1e>
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	bd38      	pop	{r3, r4, r5, pc}
 8004bc0:	20000318 	.word	0x20000318

08004bc4 <_read_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	4608      	mov	r0, r1
 8004bca:	4611      	mov	r1, r2
 8004bcc:	2200      	movs	r2, #0
 8004bce:	4d05      	ldr	r5, [pc, #20]	; (8004be4 <_read_r+0x20>)
 8004bd0:	602a      	str	r2, [r5, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f7fd f83f 	bl	8001c56 <_read>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_read_r+0x1e>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_read_r+0x1e>
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	20000318 	.word	0x20000318

08004be8 <cos>:
 8004be8:	b530      	push	{r4, r5, lr}
 8004bea:	4a20      	ldr	r2, [pc, #128]	; (8004c6c <cos+0x84>)
 8004bec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	dc06      	bgt.n	8004c04 <cos+0x1c>
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	b007      	add	sp, #28
 8004bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c00:	f001 b9a2 	b.w	8005f48 <__kernel_cos>
 8004c04:	4a1a      	ldr	r2, [pc, #104]	; (8004c70 <cos+0x88>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	dd05      	ble.n	8004c16 <cos+0x2e>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	f7fb faab 	bl	8000168 <__aeabi_dsub>
 8004c12:	b007      	add	sp, #28
 8004c14:	bd30      	pop	{r4, r5, pc}
 8004c16:	aa02      	add	r2, sp, #8
 8004c18:	f000 feee 	bl	80059f8 <__ieee754_rem_pio2>
 8004c1c:	f000 0003 	and.w	r0, r0, #3
 8004c20:	2801      	cmp	r0, #1
 8004c22:	d009      	beq.n	8004c38 <cos+0x50>
 8004c24:	2802      	cmp	r0, #2
 8004c26:	d011      	beq.n	8004c4c <cos+0x64>
 8004c28:	b9b8      	cbnz	r0, 8004c5a <cos+0x72>
 8004c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c32:	f001 f989 	bl	8005f48 <__kernel_cos>
 8004c36:	e7ec      	b.n	8004c12 <cos+0x2a>
 8004c38:	9000      	str	r0, [sp, #0]
 8004c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c42:	f001 fd81 	bl	8006748 <__kernel_sin>
 8004c46:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004c4a:	e7e2      	b.n	8004c12 <cos+0x2a>
 8004c4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c54:	f001 f978 	bl	8005f48 <__kernel_cos>
 8004c58:	e7f5      	b.n	8004c46 <cos+0x5e>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c66:	f001 fd6f 	bl	8006748 <__kernel_sin>
 8004c6a:	e7d2      	b.n	8004c12 <cos+0x2a>
 8004c6c:	3fe921fb 	.word	0x3fe921fb
 8004c70:	7fefffff 	.word	0x7fefffff

08004c74 <sin>:
 8004c74:	b530      	push	{r4, r5, lr}
 8004c76:	4a20      	ldr	r2, [pc, #128]	; (8004cf8 <sin+0x84>)
 8004c78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	b087      	sub	sp, #28
 8004c80:	dc06      	bgt.n	8004c90 <sin+0x1c>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2200      	movs	r2, #0
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f001 fd5d 	bl	8006748 <__kernel_sin>
 8004c8e:	e006      	b.n	8004c9e <sin+0x2a>
 8004c90:	4a1a      	ldr	r2, [pc, #104]	; (8004cfc <sin+0x88>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	dd05      	ble.n	8004ca2 <sin+0x2e>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	f7fb fa65 	bl	8000168 <__aeabi_dsub>
 8004c9e:	b007      	add	sp, #28
 8004ca0:	bd30      	pop	{r4, r5, pc}
 8004ca2:	aa02      	add	r2, sp, #8
 8004ca4:	f000 fea8 	bl	80059f8 <__ieee754_rem_pio2>
 8004ca8:	f000 0003 	and.w	r0, r0, #3
 8004cac:	2801      	cmp	r0, #1
 8004cae:	d009      	beq.n	8004cc4 <sin+0x50>
 8004cb0:	2802      	cmp	r0, #2
 8004cb2:	d00e      	beq.n	8004cd2 <sin+0x5e>
 8004cb4:	b9c0      	cbnz	r0, 8004ce8 <sin+0x74>
 8004cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cba:	2301      	movs	r3, #1
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cc2:	e7e2      	b.n	8004c8a <sin+0x16>
 8004cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ccc:	f001 f93c 	bl	8005f48 <__kernel_cos>
 8004cd0:	e7e5      	b.n	8004c9e <sin+0x2a>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cde:	f001 fd33 	bl	8006748 <__kernel_sin>
 8004ce2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004ce6:	e7da      	b.n	8004c9e <sin+0x2a>
 8004ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cf0:	f001 f92a 	bl	8005f48 <__kernel_cos>
 8004cf4:	e7f5      	b.n	8004ce2 <sin+0x6e>
 8004cf6:	bf00      	nop
 8004cf8:	3fe921fb 	.word	0x3fe921fb
 8004cfc:	7fefffff 	.word	0x7fefffff

08004d00 <atan2>:
 8004d00:	f000 b88e 	b.w	8004e20 <__ieee754_atan2>

08004d04 <pow>:
 8004d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d08:	4614      	mov	r4, r2
 8004d0a:	461d      	mov	r5, r3
 8004d0c:	4680      	mov	r8, r0
 8004d0e:	4689      	mov	r9, r1
 8004d10:	f000 f95a 	bl	8004fc8 <__ieee754_pow>
 8004d14:	4622      	mov	r2, r4
 8004d16:	4606      	mov	r6, r0
 8004d18:	460f      	mov	r7, r1
 8004d1a:	462b      	mov	r3, r5
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	4629      	mov	r1, r5
 8004d20:	f7fb fe74 	bl	8000a0c <__aeabi_dcmpun>
 8004d24:	bbc8      	cbnz	r0, 8004d9a <pow+0x96>
 8004d26:	2200      	movs	r2, #0
 8004d28:	2300      	movs	r3, #0
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	f7fb fe3b 	bl	80009a8 <__aeabi_dcmpeq>
 8004d32:	b1b8      	cbz	r0, 8004d64 <pow+0x60>
 8004d34:	2200      	movs	r2, #0
 8004d36:	2300      	movs	r3, #0
 8004d38:	4620      	mov	r0, r4
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	f7fb fe34 	bl	80009a8 <__aeabi_dcmpeq>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d141      	bne.n	8004dc8 <pow+0xc4>
 8004d44:	4620      	mov	r0, r4
 8004d46:	4629      	mov	r1, r5
 8004d48:	f001 ff6f 	bl	8006c2a <finite>
 8004d4c:	b328      	cbz	r0, 8004d9a <pow+0x96>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2300      	movs	r3, #0
 8004d52:	4620      	mov	r0, r4
 8004d54:	4629      	mov	r1, r5
 8004d56:	f7fb fe31 	bl	80009bc <__aeabi_dcmplt>
 8004d5a:	b1f0      	cbz	r0, 8004d9a <pow+0x96>
 8004d5c:	f7fe fe98 	bl	8003a90 <__errno>
 8004d60:	2322      	movs	r3, #34	; 0x22
 8004d62:	e019      	b.n	8004d98 <pow+0x94>
 8004d64:	4630      	mov	r0, r6
 8004d66:	4639      	mov	r1, r7
 8004d68:	f001 ff5f 	bl	8006c2a <finite>
 8004d6c:	b9c8      	cbnz	r0, 8004da2 <pow+0x9e>
 8004d6e:	4640      	mov	r0, r8
 8004d70:	4649      	mov	r1, r9
 8004d72:	f001 ff5a 	bl	8006c2a <finite>
 8004d76:	b1a0      	cbz	r0, 8004da2 <pow+0x9e>
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	f001 ff55 	bl	8006c2a <finite>
 8004d80:	b178      	cbz	r0, 8004da2 <pow+0x9e>
 8004d82:	4632      	mov	r2, r6
 8004d84:	463b      	mov	r3, r7
 8004d86:	4630      	mov	r0, r6
 8004d88:	4639      	mov	r1, r7
 8004d8a:	f7fb fe3f 	bl	8000a0c <__aeabi_dcmpun>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d0e4      	beq.n	8004d5c <pow+0x58>
 8004d92:	f7fe fe7d 	bl	8003a90 <__errno>
 8004d96:	2321      	movs	r3, #33	; 0x21
 8004d98:	6003      	str	r3, [r0, #0]
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	4639      	mov	r1, r7
 8004d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004da2:	2200      	movs	r2, #0
 8004da4:	2300      	movs	r3, #0
 8004da6:	4630      	mov	r0, r6
 8004da8:	4639      	mov	r1, r7
 8004daa:	f7fb fdfd 	bl	80009a8 <__aeabi_dcmpeq>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d0f3      	beq.n	8004d9a <pow+0x96>
 8004db2:	4640      	mov	r0, r8
 8004db4:	4649      	mov	r1, r9
 8004db6:	f001 ff38 	bl	8006c2a <finite>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d0ed      	beq.n	8004d9a <pow+0x96>
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	f001 ff32 	bl	8006c2a <finite>
 8004dc6:	e7c8      	b.n	8004d5a <pow+0x56>
 8004dc8:	2600      	movs	r6, #0
 8004dca:	4f01      	ldr	r7, [pc, #4]	; (8004dd0 <pow+0xcc>)
 8004dcc:	e7e5      	b.n	8004d9a <pow+0x96>
 8004dce:	bf00      	nop
 8004dd0:	3ff00000 	.word	0x3ff00000

08004dd4 <sqrt>:
 8004dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	460f      	mov	r7, r1
 8004dda:	f001 f805 	bl	8005de8 <__ieee754_sqrt>
 8004dde:	4632      	mov	r2, r6
 8004de0:	4604      	mov	r4, r0
 8004de2:	460d      	mov	r5, r1
 8004de4:	463b      	mov	r3, r7
 8004de6:	4630      	mov	r0, r6
 8004de8:	4639      	mov	r1, r7
 8004dea:	f7fb fe0f 	bl	8000a0c <__aeabi_dcmpun>
 8004dee:	b990      	cbnz	r0, 8004e16 <sqrt+0x42>
 8004df0:	2200      	movs	r2, #0
 8004df2:	2300      	movs	r3, #0
 8004df4:	4630      	mov	r0, r6
 8004df6:	4639      	mov	r1, r7
 8004df8:	f7fb fde0 	bl	80009bc <__aeabi_dcmplt>
 8004dfc:	b158      	cbz	r0, 8004e16 <sqrt+0x42>
 8004dfe:	f7fe fe47 	bl	8003a90 <__errno>
 8004e02:	2321      	movs	r3, #33	; 0x21
 8004e04:	2200      	movs	r2, #0
 8004e06:	6003      	str	r3, [r0, #0]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	f7fb fc8d 	bl	800072c <__aeabi_ddiv>
 8004e12:	4604      	mov	r4, r0
 8004e14:	460d      	mov	r5, r1
 8004e16:	4620      	mov	r0, r4
 8004e18:	4629      	mov	r1, r5
 8004e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e1c:	0000      	movs	r0, r0
	...

08004e20 <__ieee754_atan2>:
 8004e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e24:	4692      	mov	sl, r2
 8004e26:	4699      	mov	r9, r3
 8004e28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e2c:	461f      	mov	r7, r3
 8004e2e:	f1ca 0300 	rsb	r3, sl, #0
 8004e32:	f8df e184 	ldr.w	lr, [pc, #388]	; 8004fb8 <__ieee754_atan2+0x198>
 8004e36:	ea43 030a 	orr.w	r3, r3, sl
 8004e3a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004e3e:	4573      	cmp	r3, lr
 8004e40:	4604      	mov	r4, r0
 8004e42:	460d      	mov	r5, r1
 8004e44:	d808      	bhi.n	8004e58 <__ieee754_atan2+0x38>
 8004e46:	4246      	negs	r6, r0
 8004e48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004e4c:	4306      	orrs	r6, r0
 8004e4e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8004e52:	4576      	cmp	r6, lr
 8004e54:	468c      	mov	ip, r1
 8004e56:	d908      	bls.n	8004e6a <__ieee754_atan2+0x4a>
 8004e58:	4652      	mov	r2, sl
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	4629      	mov	r1, r5
 8004e60:	f7fb f984 	bl	800016c <__adddf3>
 8004e64:	4604      	mov	r4, r0
 8004e66:	460d      	mov	r5, r1
 8004e68:	e019      	b.n	8004e9e <__ieee754_atan2+0x7e>
 8004e6a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8004e6e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8004e72:	ea56 060a 	orrs.w	r6, r6, sl
 8004e76:	d103      	bne.n	8004e80 <__ieee754_atan2+0x60>
 8004e78:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7c:	f001 bd48 	b.w	8006910 <atan>
 8004e80:	17be      	asrs	r6, r7, #30
 8004e82:	f006 0602 	and.w	r6, r6, #2
 8004e86:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8004e8a:	ea53 0100 	orrs.w	r1, r3, r0
 8004e8e:	d10a      	bne.n	8004ea6 <__ieee754_atan2+0x86>
 8004e90:	2e02      	cmp	r6, #2
 8004e92:	d067      	beq.n	8004f64 <__ieee754_atan2+0x144>
 8004e94:	2e03      	cmp	r6, #3
 8004e96:	d102      	bne.n	8004e9e <__ieee754_atan2+0x7e>
 8004e98:	a53b      	add	r5, pc, #236	; (adr r5, 8004f88 <__ieee754_atan2+0x168>)
 8004e9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea6:	ea52 010a 	orrs.w	r1, r2, sl
 8004eaa:	d106      	bne.n	8004eba <__ieee754_atan2+0x9a>
 8004eac:	f1bc 0f00 	cmp.w	ip, #0
 8004eb0:	da63      	bge.n	8004f7a <__ieee754_atan2+0x15a>
 8004eb2:	a537      	add	r5, pc, #220	; (adr r5, 8004f90 <__ieee754_atan2+0x170>)
 8004eb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004eb8:	e7f1      	b.n	8004e9e <__ieee754_atan2+0x7e>
 8004eba:	4572      	cmp	r2, lr
 8004ebc:	d10f      	bne.n	8004ede <__ieee754_atan2+0xbe>
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	f106 36ff 	add.w	r6, r6, #4294967295
 8004ec4:	d107      	bne.n	8004ed6 <__ieee754_atan2+0xb6>
 8004ec6:	2e02      	cmp	r6, #2
 8004ec8:	d850      	bhi.n	8004f6c <__ieee754_atan2+0x14c>
 8004eca:	4b3c      	ldr	r3, [pc, #240]	; (8004fbc <__ieee754_atan2+0x19c>)
 8004ecc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004ed0:	e9d6 4500 	ldrd	r4, r5, [r6]
 8004ed4:	e7e3      	b.n	8004e9e <__ieee754_atan2+0x7e>
 8004ed6:	2e02      	cmp	r6, #2
 8004ed8:	d84c      	bhi.n	8004f74 <__ieee754_atan2+0x154>
 8004eda:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <__ieee754_atan2+0x1a0>)
 8004edc:	e7f6      	b.n	8004ecc <__ieee754_atan2+0xac>
 8004ede:	4573      	cmp	r3, lr
 8004ee0:	d0e4      	beq.n	8004eac <__ieee754_atan2+0x8c>
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004ee8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004eec:	da20      	bge.n	8004f30 <__ieee754_atan2+0x110>
 8004eee:	2f00      	cmp	r7, #0
 8004ef0:	da01      	bge.n	8004ef6 <__ieee754_atan2+0xd6>
 8004ef2:	323c      	adds	r2, #60	; 0x3c
 8004ef4:	db20      	blt.n	8004f38 <__ieee754_atan2+0x118>
 8004ef6:	4652      	mov	r2, sl
 8004ef8:	464b      	mov	r3, r9
 8004efa:	4620      	mov	r0, r4
 8004efc:	4629      	mov	r1, r5
 8004efe:	f7fb fc15 	bl	800072c <__aeabi_ddiv>
 8004f02:	f001 fe8f 	bl	8006c24 <fabs>
 8004f06:	f001 fd03 	bl	8006910 <atan>
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	460d      	mov	r5, r1
 8004f0e:	2e01      	cmp	r6, #1
 8004f10:	d015      	beq.n	8004f3e <__ieee754_atan2+0x11e>
 8004f12:	2e02      	cmp	r6, #2
 8004f14:	d017      	beq.n	8004f46 <__ieee754_atan2+0x126>
 8004f16:	2e00      	cmp	r6, #0
 8004f18:	d0c1      	beq.n	8004e9e <__ieee754_atan2+0x7e>
 8004f1a:	a31f      	add	r3, pc, #124	; (adr r3, 8004f98 <__ieee754_atan2+0x178>)
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	4620      	mov	r0, r4
 8004f22:	4629      	mov	r1, r5
 8004f24:	f7fb f920 	bl	8000168 <__aeabi_dsub>
 8004f28:	a31d      	add	r3, pc, #116	; (adr r3, 8004fa0 <__ieee754_atan2+0x180>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	e016      	b.n	8004f5e <__ieee754_atan2+0x13e>
 8004f30:	a51d      	add	r5, pc, #116	; (adr r5, 8004fa8 <__ieee754_atan2+0x188>)
 8004f32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004f36:	e7ea      	b.n	8004f0e <__ieee754_atan2+0xee>
 8004f38:	2400      	movs	r4, #0
 8004f3a:	2500      	movs	r5, #0
 8004f3c:	e7e7      	b.n	8004f0e <__ieee754_atan2+0xee>
 8004f3e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004f42:	461d      	mov	r5, r3
 8004f44:	e7ab      	b.n	8004e9e <__ieee754_atan2+0x7e>
 8004f46:	a314      	add	r3, pc, #80	; (adr r3, 8004f98 <__ieee754_atan2+0x178>)
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	4629      	mov	r1, r5
 8004f50:	f7fb f90a 	bl	8000168 <__aeabi_dsub>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	a111      	add	r1, pc, #68	; (adr r1, 8004fa0 <__ieee754_atan2+0x180>)
 8004f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f5e:	f7fb f903 	bl	8000168 <__aeabi_dsub>
 8004f62:	e77f      	b.n	8004e64 <__ieee754_atan2+0x44>
 8004f64:	a50e      	add	r5, pc, #56	; (adr r5, 8004fa0 <__ieee754_atan2+0x180>)
 8004f66:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004f6a:	e798      	b.n	8004e9e <__ieee754_atan2+0x7e>
 8004f6c:	a510      	add	r5, pc, #64	; (adr r5, 8004fb0 <__ieee754_atan2+0x190>)
 8004f6e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004f72:	e794      	b.n	8004e9e <__ieee754_atan2+0x7e>
 8004f74:	2400      	movs	r4, #0
 8004f76:	2500      	movs	r5, #0
 8004f78:	e791      	b.n	8004e9e <__ieee754_atan2+0x7e>
 8004f7a:	a50b      	add	r5, pc, #44	; (adr r5, 8004fa8 <__ieee754_atan2+0x188>)
 8004f7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004f80:	e78d      	b.n	8004e9e <__ieee754_atan2+0x7e>
 8004f82:	bf00      	nop
 8004f84:	f3af 8000 	nop.w
 8004f88:	54442d18 	.word	0x54442d18
 8004f8c:	c00921fb 	.word	0xc00921fb
 8004f90:	54442d18 	.word	0x54442d18
 8004f94:	bff921fb 	.word	0xbff921fb
 8004f98:	33145c07 	.word	0x33145c07
 8004f9c:	3ca1a626 	.word	0x3ca1a626
 8004fa0:	54442d18 	.word	0x54442d18
 8004fa4:	400921fb 	.word	0x400921fb
 8004fa8:	54442d18 	.word	0x54442d18
 8004fac:	3ff921fb 	.word	0x3ff921fb
 8004fb0:	54442d18 	.word	0x54442d18
 8004fb4:	3fe921fb 	.word	0x3fe921fb
 8004fb8:	7ff00000 	.word	0x7ff00000
 8004fbc:	080071c8 	.word	0x080071c8
 8004fc0:	080071e0 	.word	0x080071e0
 8004fc4:	00000000 	.word	0x00000000

08004fc8 <__ieee754_pow>:
 8004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	b093      	sub	sp, #76	; 0x4c
 8004fce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fd2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8004fd6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004fda:	4689      	mov	r9, r1
 8004fdc:	ea56 0102 	orrs.w	r1, r6, r2
 8004fe0:	4680      	mov	r8, r0
 8004fe2:	d111      	bne.n	8005008 <__ieee754_pow+0x40>
 8004fe4:	1803      	adds	r3, r0, r0
 8004fe6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8004fea:	4152      	adcs	r2, r2
 8004fec:	4299      	cmp	r1, r3
 8004fee:	4b82      	ldr	r3, [pc, #520]	; (80051f8 <__ieee754_pow+0x230>)
 8004ff0:	4193      	sbcs	r3, r2
 8004ff2:	f080 84b9 	bcs.w	8005968 <__ieee754_pow+0x9a0>
 8004ff6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	f7fb f8b5 	bl	800016c <__adddf3>
 8005002:	4683      	mov	fp, r0
 8005004:	468c      	mov	ip, r1
 8005006:	e06f      	b.n	80050e8 <__ieee754_pow+0x120>
 8005008:	4b7c      	ldr	r3, [pc, #496]	; (80051fc <__ieee754_pow+0x234>)
 800500a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800500e:	429c      	cmp	r4, r3
 8005010:	464d      	mov	r5, r9
 8005012:	4682      	mov	sl, r0
 8005014:	dc06      	bgt.n	8005024 <__ieee754_pow+0x5c>
 8005016:	d101      	bne.n	800501c <__ieee754_pow+0x54>
 8005018:	2800      	cmp	r0, #0
 800501a:	d1ec      	bne.n	8004ff6 <__ieee754_pow+0x2e>
 800501c:	429e      	cmp	r6, r3
 800501e:	dc01      	bgt.n	8005024 <__ieee754_pow+0x5c>
 8005020:	d10f      	bne.n	8005042 <__ieee754_pow+0x7a>
 8005022:	b172      	cbz	r2, 8005042 <__ieee754_pow+0x7a>
 8005024:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005028:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800502c:	ea55 050a 	orrs.w	r5, r5, sl
 8005030:	d1e1      	bne.n	8004ff6 <__ieee754_pow+0x2e>
 8005032:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005036:	18db      	adds	r3, r3, r3
 8005038:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800503c:	4152      	adcs	r2, r2
 800503e:	429d      	cmp	r5, r3
 8005040:	e7d5      	b.n	8004fee <__ieee754_pow+0x26>
 8005042:	2d00      	cmp	r5, #0
 8005044:	da39      	bge.n	80050ba <__ieee754_pow+0xf2>
 8005046:	4b6e      	ldr	r3, [pc, #440]	; (8005200 <__ieee754_pow+0x238>)
 8005048:	429e      	cmp	r6, r3
 800504a:	dc52      	bgt.n	80050f2 <__ieee754_pow+0x12a>
 800504c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005050:	429e      	cmp	r6, r3
 8005052:	f340 849c 	ble.w	800598e <__ieee754_pow+0x9c6>
 8005056:	1533      	asrs	r3, r6, #20
 8005058:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800505c:	2b14      	cmp	r3, #20
 800505e:	dd0f      	ble.n	8005080 <__ieee754_pow+0xb8>
 8005060:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005064:	fa22 f103 	lsr.w	r1, r2, r3
 8005068:	fa01 f303 	lsl.w	r3, r1, r3
 800506c:	4293      	cmp	r3, r2
 800506e:	f040 848e 	bne.w	800598e <__ieee754_pow+0x9c6>
 8005072:	f001 0101 	and.w	r1, r1, #1
 8005076:	f1c1 0302 	rsb	r3, r1, #2
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	b182      	cbz	r2, 80050a0 <__ieee754_pow+0xd8>
 800507e:	e05d      	b.n	800513c <__ieee754_pow+0x174>
 8005080:	2a00      	cmp	r2, #0
 8005082:	d159      	bne.n	8005138 <__ieee754_pow+0x170>
 8005084:	f1c3 0314 	rsb	r3, r3, #20
 8005088:	fa46 f103 	asr.w	r1, r6, r3
 800508c:	fa01 f303 	lsl.w	r3, r1, r3
 8005090:	42b3      	cmp	r3, r6
 8005092:	f040 8479 	bne.w	8005988 <__ieee754_pow+0x9c0>
 8005096:	f001 0101 	and.w	r1, r1, #1
 800509a:	f1c1 0302 	rsb	r3, r1, #2
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	4b58      	ldr	r3, [pc, #352]	; (8005204 <__ieee754_pow+0x23c>)
 80050a2:	429e      	cmp	r6, r3
 80050a4:	d132      	bne.n	800510c <__ieee754_pow+0x144>
 80050a6:	2f00      	cmp	r7, #0
 80050a8:	f280 846a 	bge.w	8005980 <__ieee754_pow+0x9b8>
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	2000      	movs	r0, #0
 80050b2:	4954      	ldr	r1, [pc, #336]	; (8005204 <__ieee754_pow+0x23c>)
 80050b4:	f7fb fb3a 	bl	800072c <__aeabi_ddiv>
 80050b8:	e7a3      	b.n	8005002 <__ieee754_pow+0x3a>
 80050ba:	2300      	movs	r3, #0
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	2a00      	cmp	r2, #0
 80050c0:	d13c      	bne.n	800513c <__ieee754_pow+0x174>
 80050c2:	4b4e      	ldr	r3, [pc, #312]	; (80051fc <__ieee754_pow+0x234>)
 80050c4:	429e      	cmp	r6, r3
 80050c6:	d1eb      	bne.n	80050a0 <__ieee754_pow+0xd8>
 80050c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80050cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80050d0:	ea53 030a 	orrs.w	r3, r3, sl
 80050d4:	f000 8448 	beq.w	8005968 <__ieee754_pow+0x9a0>
 80050d8:	4b4b      	ldr	r3, [pc, #300]	; (8005208 <__ieee754_pow+0x240>)
 80050da:	429c      	cmp	r4, r3
 80050dc:	dd0b      	ble.n	80050f6 <__ieee754_pow+0x12e>
 80050de:	2f00      	cmp	r7, #0
 80050e0:	f2c0 8448 	blt.w	8005974 <__ieee754_pow+0x9ac>
 80050e4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80050e8:	4658      	mov	r0, fp
 80050ea:	4661      	mov	r1, ip
 80050ec:	b013      	add	sp, #76	; 0x4c
 80050ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f2:	2302      	movs	r3, #2
 80050f4:	e7e2      	b.n	80050bc <__ieee754_pow+0xf4>
 80050f6:	2f00      	cmp	r7, #0
 80050f8:	f04f 0b00 	mov.w	fp, #0
 80050fc:	f04f 0c00 	mov.w	ip, #0
 8005100:	daf2      	bge.n	80050e8 <__ieee754_pow+0x120>
 8005102:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005106:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800510a:	e7ed      	b.n	80050e8 <__ieee754_pow+0x120>
 800510c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005110:	d106      	bne.n	8005120 <__ieee754_pow+0x158>
 8005112:	4642      	mov	r2, r8
 8005114:	464b      	mov	r3, r9
 8005116:	4640      	mov	r0, r8
 8005118:	4649      	mov	r1, r9
 800511a:	f7fb f9dd 	bl	80004d8 <__aeabi_dmul>
 800511e:	e770      	b.n	8005002 <__ieee754_pow+0x3a>
 8005120:	4b3a      	ldr	r3, [pc, #232]	; (800520c <__ieee754_pow+0x244>)
 8005122:	429f      	cmp	r7, r3
 8005124:	d10a      	bne.n	800513c <__ieee754_pow+0x174>
 8005126:	2d00      	cmp	r5, #0
 8005128:	db08      	blt.n	800513c <__ieee754_pow+0x174>
 800512a:	4640      	mov	r0, r8
 800512c:	4649      	mov	r1, r9
 800512e:	b013      	add	sp, #76	; 0x4c
 8005130:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005134:	f000 be58 	b.w	8005de8 <__ieee754_sqrt>
 8005138:	2300      	movs	r3, #0
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	4640      	mov	r0, r8
 800513e:	4649      	mov	r1, r9
 8005140:	f001 fd70 	bl	8006c24 <fabs>
 8005144:	4683      	mov	fp, r0
 8005146:	468c      	mov	ip, r1
 8005148:	f1ba 0f00 	cmp.w	sl, #0
 800514c:	d128      	bne.n	80051a0 <__ieee754_pow+0x1d8>
 800514e:	b124      	cbz	r4, 800515a <__ieee754_pow+0x192>
 8005150:	4b2c      	ldr	r3, [pc, #176]	; (8005204 <__ieee754_pow+0x23c>)
 8005152:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005156:	429a      	cmp	r2, r3
 8005158:	d122      	bne.n	80051a0 <__ieee754_pow+0x1d8>
 800515a:	2f00      	cmp	r7, #0
 800515c:	da07      	bge.n	800516e <__ieee754_pow+0x1a6>
 800515e:	465a      	mov	r2, fp
 8005160:	4663      	mov	r3, ip
 8005162:	2000      	movs	r0, #0
 8005164:	4927      	ldr	r1, [pc, #156]	; (8005204 <__ieee754_pow+0x23c>)
 8005166:	f7fb fae1 	bl	800072c <__aeabi_ddiv>
 800516a:	4683      	mov	fp, r0
 800516c:	468c      	mov	ip, r1
 800516e:	2d00      	cmp	r5, #0
 8005170:	daba      	bge.n	80050e8 <__ieee754_pow+0x120>
 8005172:	9b00      	ldr	r3, [sp, #0]
 8005174:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005178:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800517c:	4323      	orrs	r3, r4
 800517e:	d108      	bne.n	8005192 <__ieee754_pow+0x1ca>
 8005180:	465a      	mov	r2, fp
 8005182:	4663      	mov	r3, ip
 8005184:	4658      	mov	r0, fp
 8005186:	4661      	mov	r1, ip
 8005188:	f7fa ffee 	bl	8000168 <__aeabi_dsub>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	e790      	b.n	80050b4 <__ieee754_pow+0xec>
 8005192:	9b00      	ldr	r3, [sp, #0]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d1a7      	bne.n	80050e8 <__ieee754_pow+0x120>
 8005198:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800519c:	469c      	mov	ip, r3
 800519e:	e7a3      	b.n	80050e8 <__ieee754_pow+0x120>
 80051a0:	0feb      	lsrs	r3, r5, #31
 80051a2:	3b01      	subs	r3, #1
 80051a4:	930c      	str	r3, [sp, #48]	; 0x30
 80051a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051a8:	9b00      	ldr	r3, [sp, #0]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	d104      	bne.n	80051b8 <__ieee754_pow+0x1f0>
 80051ae:	4642      	mov	r2, r8
 80051b0:	464b      	mov	r3, r9
 80051b2:	4640      	mov	r0, r8
 80051b4:	4649      	mov	r1, r9
 80051b6:	e7e7      	b.n	8005188 <__ieee754_pow+0x1c0>
 80051b8:	4b15      	ldr	r3, [pc, #84]	; (8005210 <__ieee754_pow+0x248>)
 80051ba:	429e      	cmp	r6, r3
 80051bc:	f340 80f6 	ble.w	80053ac <__ieee754_pow+0x3e4>
 80051c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80051c4:	429e      	cmp	r6, r3
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <__ieee754_pow+0x240>)
 80051c8:	dd09      	ble.n	80051de <__ieee754_pow+0x216>
 80051ca:	429c      	cmp	r4, r3
 80051cc:	dc0c      	bgt.n	80051e8 <__ieee754_pow+0x220>
 80051ce:	2f00      	cmp	r7, #0
 80051d0:	da0c      	bge.n	80051ec <__ieee754_pow+0x224>
 80051d2:	2000      	movs	r0, #0
 80051d4:	b013      	add	sp, #76	; 0x4c
 80051d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051da:	f001 bb92 	b.w	8006902 <__math_oflow>
 80051de:	429c      	cmp	r4, r3
 80051e0:	dbf5      	blt.n	80051ce <__ieee754_pow+0x206>
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <__ieee754_pow+0x23c>)
 80051e4:	429c      	cmp	r4, r3
 80051e6:	dd15      	ble.n	8005214 <__ieee754_pow+0x24c>
 80051e8:	2f00      	cmp	r7, #0
 80051ea:	dcf2      	bgt.n	80051d2 <__ieee754_pow+0x20a>
 80051ec:	2000      	movs	r0, #0
 80051ee:	b013      	add	sp, #76	; 0x4c
 80051f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f4:	f001 bb80 	b.w	80068f8 <__math_uflow>
 80051f8:	fff00000 	.word	0xfff00000
 80051fc:	7ff00000 	.word	0x7ff00000
 8005200:	433fffff 	.word	0x433fffff
 8005204:	3ff00000 	.word	0x3ff00000
 8005208:	3fefffff 	.word	0x3fefffff
 800520c:	3fe00000 	.word	0x3fe00000
 8005210:	41e00000 	.word	0x41e00000
 8005214:	4661      	mov	r1, ip
 8005216:	2200      	movs	r2, #0
 8005218:	4658      	mov	r0, fp
 800521a:	4b5f      	ldr	r3, [pc, #380]	; (8005398 <__ieee754_pow+0x3d0>)
 800521c:	f7fa ffa4 	bl	8000168 <__aeabi_dsub>
 8005220:	a355      	add	r3, pc, #340	; (adr r3, 8005378 <__ieee754_pow+0x3b0>)
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	4604      	mov	r4, r0
 8005228:	460d      	mov	r5, r1
 800522a:	f7fb f955 	bl	80004d8 <__aeabi_dmul>
 800522e:	a354      	add	r3, pc, #336	; (adr r3, 8005380 <__ieee754_pow+0x3b8>)
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	4606      	mov	r6, r0
 8005236:	460f      	mov	r7, r1
 8005238:	4620      	mov	r0, r4
 800523a:	4629      	mov	r1, r5
 800523c:	f7fb f94c 	bl	80004d8 <__aeabi_dmul>
 8005240:	2200      	movs	r2, #0
 8005242:	4682      	mov	sl, r0
 8005244:	468b      	mov	fp, r1
 8005246:	4620      	mov	r0, r4
 8005248:	4629      	mov	r1, r5
 800524a:	4b54      	ldr	r3, [pc, #336]	; (800539c <__ieee754_pow+0x3d4>)
 800524c:	f7fb f944 	bl	80004d8 <__aeabi_dmul>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	a14c      	add	r1, pc, #304	; (adr r1, 8005388 <__ieee754_pow+0x3c0>)
 8005256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800525a:	f7fa ff85 	bl	8000168 <__aeabi_dsub>
 800525e:	4622      	mov	r2, r4
 8005260:	462b      	mov	r3, r5
 8005262:	f7fb f939 	bl	80004d8 <__aeabi_dmul>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	2000      	movs	r0, #0
 800526c:	494c      	ldr	r1, [pc, #304]	; (80053a0 <__ieee754_pow+0x3d8>)
 800526e:	f7fa ff7b 	bl	8000168 <__aeabi_dsub>
 8005272:	4622      	mov	r2, r4
 8005274:	462b      	mov	r3, r5
 8005276:	4680      	mov	r8, r0
 8005278:	4689      	mov	r9, r1
 800527a:	4620      	mov	r0, r4
 800527c:	4629      	mov	r1, r5
 800527e:	f7fb f92b 	bl	80004d8 <__aeabi_dmul>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4640      	mov	r0, r8
 8005288:	4649      	mov	r1, r9
 800528a:	f7fb f925 	bl	80004d8 <__aeabi_dmul>
 800528e:	a340      	add	r3, pc, #256	; (adr r3, 8005390 <__ieee754_pow+0x3c8>)
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f7fb f920 	bl	80004d8 <__aeabi_dmul>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4650      	mov	r0, sl
 800529e:	4659      	mov	r1, fp
 80052a0:	f7fa ff62 	bl	8000168 <__aeabi_dsub>
 80052a4:	f04f 0a00 	mov.w	sl, #0
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4604      	mov	r4, r0
 80052ae:	460d      	mov	r5, r1
 80052b0:	4630      	mov	r0, r6
 80052b2:	4639      	mov	r1, r7
 80052b4:	f7fa ff5a 	bl	800016c <__adddf3>
 80052b8:	4632      	mov	r2, r6
 80052ba:	463b      	mov	r3, r7
 80052bc:	4650      	mov	r0, sl
 80052be:	468b      	mov	fp, r1
 80052c0:	f7fa ff52 	bl	8000168 <__aeabi_dsub>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4620      	mov	r0, r4
 80052ca:	4629      	mov	r1, r5
 80052cc:	f7fa ff4c 	bl	8000168 <__aeabi_dsub>
 80052d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052d4:	9b00      	ldr	r3, [sp, #0]
 80052d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052d8:	3b01      	subs	r3, #1
 80052da:	4313      	orrs	r3, r2
 80052dc:	f04f 0600 	mov.w	r6, #0
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	bf0c      	ite	eq
 80052e6:	4b2f      	ldreq	r3, [pc, #188]	; (80053a4 <__ieee754_pow+0x3dc>)
 80052e8:	4b2b      	ldrne	r3, [pc, #172]	; (8005398 <__ieee754_pow+0x3d0>)
 80052ea:	4604      	mov	r4, r0
 80052ec:	460d      	mov	r5, r1
 80052ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052f2:	e9cd 2300 	strd	r2, r3, [sp]
 80052f6:	4632      	mov	r2, r6
 80052f8:	463b      	mov	r3, r7
 80052fa:	f7fa ff35 	bl	8000168 <__aeabi_dsub>
 80052fe:	4652      	mov	r2, sl
 8005300:	465b      	mov	r3, fp
 8005302:	f7fb f8e9 	bl	80004d8 <__aeabi_dmul>
 8005306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800530a:	4680      	mov	r8, r0
 800530c:	4689      	mov	r9, r1
 800530e:	4620      	mov	r0, r4
 8005310:	4629      	mov	r1, r5
 8005312:	f7fb f8e1 	bl	80004d8 <__aeabi_dmul>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4640      	mov	r0, r8
 800531c:	4649      	mov	r1, r9
 800531e:	f7fa ff25 	bl	800016c <__adddf3>
 8005322:	4632      	mov	r2, r6
 8005324:	463b      	mov	r3, r7
 8005326:	4680      	mov	r8, r0
 8005328:	4689      	mov	r9, r1
 800532a:	4650      	mov	r0, sl
 800532c:	4659      	mov	r1, fp
 800532e:	f7fb f8d3 	bl	80004d8 <__aeabi_dmul>
 8005332:	4604      	mov	r4, r0
 8005334:	460d      	mov	r5, r1
 8005336:	460b      	mov	r3, r1
 8005338:	4602      	mov	r2, r0
 800533a:	4649      	mov	r1, r9
 800533c:	4640      	mov	r0, r8
 800533e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005342:	f7fa ff13 	bl	800016c <__adddf3>
 8005346:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <__ieee754_pow+0x3e0>)
 8005348:	4682      	mov	sl, r0
 800534a:	4299      	cmp	r1, r3
 800534c:	460f      	mov	r7, r1
 800534e:	460e      	mov	r6, r1
 8005350:	f340 82e5 	ble.w	800591e <__ieee754_pow+0x956>
 8005354:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005358:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800535c:	4303      	orrs	r3, r0
 800535e:	f000 81df 	beq.w	8005720 <__ieee754_pow+0x758>
 8005362:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005366:	2200      	movs	r2, #0
 8005368:	2300      	movs	r3, #0
 800536a:	f7fb fb27 	bl	80009bc <__aeabi_dcmplt>
 800536e:	3800      	subs	r0, #0
 8005370:	bf18      	it	ne
 8005372:	2001      	movne	r0, #1
 8005374:	e72e      	b.n	80051d4 <__ieee754_pow+0x20c>
 8005376:	bf00      	nop
 8005378:	60000000 	.word	0x60000000
 800537c:	3ff71547 	.word	0x3ff71547
 8005380:	f85ddf44 	.word	0xf85ddf44
 8005384:	3e54ae0b 	.word	0x3e54ae0b
 8005388:	55555555 	.word	0x55555555
 800538c:	3fd55555 	.word	0x3fd55555
 8005390:	652b82fe 	.word	0x652b82fe
 8005394:	3ff71547 	.word	0x3ff71547
 8005398:	3ff00000 	.word	0x3ff00000
 800539c:	3fd00000 	.word	0x3fd00000
 80053a0:	3fe00000 	.word	0x3fe00000
 80053a4:	bff00000 	.word	0xbff00000
 80053a8:	408fffff 	.word	0x408fffff
 80053ac:	4bd2      	ldr	r3, [pc, #840]	; (80056f8 <__ieee754_pow+0x730>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	402b      	ands	r3, r5
 80053b2:	b943      	cbnz	r3, 80053c6 <__ieee754_pow+0x3fe>
 80053b4:	4658      	mov	r0, fp
 80053b6:	4661      	mov	r1, ip
 80053b8:	4bd0      	ldr	r3, [pc, #832]	; (80056fc <__ieee754_pow+0x734>)
 80053ba:	f7fb f88d 	bl	80004d8 <__aeabi_dmul>
 80053be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80053c2:	4683      	mov	fp, r0
 80053c4:	460c      	mov	r4, r1
 80053c6:	1523      	asrs	r3, r4, #20
 80053c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80053cc:	4413      	add	r3, r2
 80053ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80053d0:	4bcb      	ldr	r3, [pc, #812]	; (8005700 <__ieee754_pow+0x738>)
 80053d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80053d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80053da:	429c      	cmp	r4, r3
 80053dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80053e0:	dd08      	ble.n	80053f4 <__ieee754_pow+0x42c>
 80053e2:	4bc8      	ldr	r3, [pc, #800]	; (8005704 <__ieee754_pow+0x73c>)
 80053e4:	429c      	cmp	r4, r3
 80053e6:	f340 8199 	ble.w	800571c <__ieee754_pow+0x754>
 80053ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ec:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80053f0:	3301      	adds	r3, #1
 80053f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80053f4:	2600      	movs	r6, #0
 80053f6:	00f3      	lsls	r3, r6, #3
 80053f8:	930d      	str	r3, [sp, #52]	; 0x34
 80053fa:	4bc3      	ldr	r3, [pc, #780]	; (8005708 <__ieee754_pow+0x740>)
 80053fc:	4658      	mov	r0, fp
 80053fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005402:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005406:	4629      	mov	r1, r5
 8005408:	461a      	mov	r2, r3
 800540a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800540e:	4623      	mov	r3, r4
 8005410:	f7fa feaa 	bl	8000168 <__aeabi_dsub>
 8005414:	46da      	mov	sl, fp
 8005416:	462b      	mov	r3, r5
 8005418:	4652      	mov	r2, sl
 800541a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800541e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005422:	f7fa fea3 	bl	800016c <__adddf3>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	2000      	movs	r0, #0
 800542c:	49b7      	ldr	r1, [pc, #732]	; (800570c <__ieee754_pow+0x744>)
 800542e:	f7fb f97d 	bl	800072c <__aeabi_ddiv>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800543a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800543e:	f7fb f84b 	bl	80004d8 <__aeabi_dmul>
 8005442:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005446:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800544a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800544e:	2300      	movs	r3, #0
 8005450:	2200      	movs	r2, #0
 8005452:	46ab      	mov	fp, r5
 8005454:	106d      	asrs	r5, r5, #1
 8005456:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800545a:	9304      	str	r3, [sp, #16]
 800545c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005460:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005464:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005468:	4640      	mov	r0, r8
 800546a:	4649      	mov	r1, r9
 800546c:	4614      	mov	r4, r2
 800546e:	461d      	mov	r5, r3
 8005470:	f7fb f832 	bl	80004d8 <__aeabi_dmul>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800547c:	f7fa fe74 	bl	8000168 <__aeabi_dsub>
 8005480:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005484:	4606      	mov	r6, r0
 8005486:	460f      	mov	r7, r1
 8005488:	4620      	mov	r0, r4
 800548a:	4629      	mov	r1, r5
 800548c:	f7fa fe6c 	bl	8000168 <__aeabi_dsub>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4650      	mov	r0, sl
 8005496:	4659      	mov	r1, fp
 8005498:	f7fa fe66 	bl	8000168 <__aeabi_dsub>
 800549c:	4642      	mov	r2, r8
 800549e:	464b      	mov	r3, r9
 80054a0:	f7fb f81a 	bl	80004d8 <__aeabi_dmul>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4630      	mov	r0, r6
 80054aa:	4639      	mov	r1, r7
 80054ac:	f7fa fe5c 	bl	8000168 <__aeabi_dsub>
 80054b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054b4:	f7fb f810 	bl	80004d8 <__aeabi_dmul>
 80054b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80054c0:	4610      	mov	r0, r2
 80054c2:	4619      	mov	r1, r3
 80054c4:	f7fb f808 	bl	80004d8 <__aeabi_dmul>
 80054c8:	a379      	add	r3, pc, #484	; (adr r3, 80056b0 <__ieee754_pow+0x6e8>)
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	4604      	mov	r4, r0
 80054d0:	460d      	mov	r5, r1
 80054d2:	f7fb f801 	bl	80004d8 <__aeabi_dmul>
 80054d6:	a378      	add	r3, pc, #480	; (adr r3, 80056b8 <__ieee754_pow+0x6f0>)
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	f7fa fe46 	bl	800016c <__adddf3>
 80054e0:	4622      	mov	r2, r4
 80054e2:	462b      	mov	r3, r5
 80054e4:	f7fa fff8 	bl	80004d8 <__aeabi_dmul>
 80054e8:	a375      	add	r3, pc, #468	; (adr r3, 80056c0 <__ieee754_pow+0x6f8>)
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	f7fa fe3d 	bl	800016c <__adddf3>
 80054f2:	4622      	mov	r2, r4
 80054f4:	462b      	mov	r3, r5
 80054f6:	f7fa ffef 	bl	80004d8 <__aeabi_dmul>
 80054fa:	a373      	add	r3, pc, #460	; (adr r3, 80056c8 <__ieee754_pow+0x700>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f7fa fe34 	bl	800016c <__adddf3>
 8005504:	4622      	mov	r2, r4
 8005506:	462b      	mov	r3, r5
 8005508:	f7fa ffe6 	bl	80004d8 <__aeabi_dmul>
 800550c:	a370      	add	r3, pc, #448	; (adr r3, 80056d0 <__ieee754_pow+0x708>)
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f7fa fe2b 	bl	800016c <__adddf3>
 8005516:	4622      	mov	r2, r4
 8005518:	462b      	mov	r3, r5
 800551a:	f7fa ffdd 	bl	80004d8 <__aeabi_dmul>
 800551e:	a36e      	add	r3, pc, #440	; (adr r3, 80056d8 <__ieee754_pow+0x710>)
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	f7fa fe22 	bl	800016c <__adddf3>
 8005528:	4622      	mov	r2, r4
 800552a:	4606      	mov	r6, r0
 800552c:	460f      	mov	r7, r1
 800552e:	462b      	mov	r3, r5
 8005530:	4620      	mov	r0, r4
 8005532:	4629      	mov	r1, r5
 8005534:	f7fa ffd0 	bl	80004d8 <__aeabi_dmul>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4630      	mov	r0, r6
 800553e:	4639      	mov	r1, r7
 8005540:	f7fa ffca 	bl	80004d8 <__aeabi_dmul>
 8005544:	4604      	mov	r4, r0
 8005546:	460d      	mov	r5, r1
 8005548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800554c:	4642      	mov	r2, r8
 800554e:	464b      	mov	r3, r9
 8005550:	f7fa fe0c 	bl	800016c <__adddf3>
 8005554:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005558:	f7fa ffbe 	bl	80004d8 <__aeabi_dmul>
 800555c:	4622      	mov	r2, r4
 800555e:	462b      	mov	r3, r5
 8005560:	f7fa fe04 	bl	800016c <__adddf3>
 8005564:	4642      	mov	r2, r8
 8005566:	4606      	mov	r6, r0
 8005568:	460f      	mov	r7, r1
 800556a:	464b      	mov	r3, r9
 800556c:	4640      	mov	r0, r8
 800556e:	4649      	mov	r1, r9
 8005570:	f7fa ffb2 	bl	80004d8 <__aeabi_dmul>
 8005574:	2200      	movs	r2, #0
 8005576:	4b66      	ldr	r3, [pc, #408]	; (8005710 <__ieee754_pow+0x748>)
 8005578:	4682      	mov	sl, r0
 800557a:	468b      	mov	fp, r1
 800557c:	f7fa fdf6 	bl	800016c <__adddf3>
 8005580:	4632      	mov	r2, r6
 8005582:	463b      	mov	r3, r7
 8005584:	f7fa fdf2 	bl	800016c <__adddf3>
 8005588:	2400      	movs	r4, #0
 800558a:	460d      	mov	r5, r1
 800558c:	4622      	mov	r2, r4
 800558e:	460b      	mov	r3, r1
 8005590:	4640      	mov	r0, r8
 8005592:	4649      	mov	r1, r9
 8005594:	f7fa ffa0 	bl	80004d8 <__aeabi_dmul>
 8005598:	2200      	movs	r2, #0
 800559a:	4680      	mov	r8, r0
 800559c:	4689      	mov	r9, r1
 800559e:	4620      	mov	r0, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	4b5b      	ldr	r3, [pc, #364]	; (8005710 <__ieee754_pow+0x748>)
 80055a4:	f7fa fde0 	bl	8000168 <__aeabi_dsub>
 80055a8:	4652      	mov	r2, sl
 80055aa:	465b      	mov	r3, fp
 80055ac:	f7fa fddc 	bl	8000168 <__aeabi_dsub>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4630      	mov	r0, r6
 80055b6:	4639      	mov	r1, r7
 80055b8:	f7fa fdd6 	bl	8000168 <__aeabi_dsub>
 80055bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055c0:	f7fa ff8a 	bl	80004d8 <__aeabi_dmul>
 80055c4:	4622      	mov	r2, r4
 80055c6:	4606      	mov	r6, r0
 80055c8:	460f      	mov	r7, r1
 80055ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055ce:	462b      	mov	r3, r5
 80055d0:	f7fa ff82 	bl	80004d8 <__aeabi_dmul>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4630      	mov	r0, r6
 80055da:	4639      	mov	r1, r7
 80055dc:	f7fa fdc6 	bl	800016c <__adddf3>
 80055e0:	2400      	movs	r4, #0
 80055e2:	4606      	mov	r6, r0
 80055e4:	460f      	mov	r7, r1
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4640      	mov	r0, r8
 80055ec:	4649      	mov	r1, r9
 80055ee:	f7fa fdbd 	bl	800016c <__adddf3>
 80055f2:	a33b      	add	r3, pc, #236	; (adr r3, 80056e0 <__ieee754_pow+0x718>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	4620      	mov	r0, r4
 80055fa:	460d      	mov	r5, r1
 80055fc:	f7fa ff6c 	bl	80004d8 <__aeabi_dmul>
 8005600:	4642      	mov	r2, r8
 8005602:	464b      	mov	r3, r9
 8005604:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005608:	4620      	mov	r0, r4
 800560a:	4629      	mov	r1, r5
 800560c:	f7fa fdac 	bl	8000168 <__aeabi_dsub>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4630      	mov	r0, r6
 8005616:	4639      	mov	r1, r7
 8005618:	f7fa fda6 	bl	8000168 <__aeabi_dsub>
 800561c:	a332      	add	r3, pc, #200	; (adr r3, 80056e8 <__ieee754_pow+0x720>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fa ff59 	bl	80004d8 <__aeabi_dmul>
 8005626:	a332      	add	r3, pc, #200	; (adr r3, 80056f0 <__ieee754_pow+0x728>)
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	4606      	mov	r6, r0
 800562e:	460f      	mov	r7, r1
 8005630:	4620      	mov	r0, r4
 8005632:	4629      	mov	r1, r5
 8005634:	f7fa ff50 	bl	80004d8 <__aeabi_dmul>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4630      	mov	r0, r6
 800563e:	4639      	mov	r1, r7
 8005640:	f7fa fd94 	bl	800016c <__adddf3>
 8005644:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005646:	4b33      	ldr	r3, [pc, #204]	; (8005714 <__ieee754_pow+0x74c>)
 8005648:	f04f 0a00 	mov.w	sl, #0
 800564c:	4413      	add	r3, r2
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f7fa fd8b 	bl	800016c <__adddf3>
 8005656:	4680      	mov	r8, r0
 8005658:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800565a:	4689      	mov	r9, r1
 800565c:	f7fa fed2 	bl	8000404 <__aeabi_i2d>
 8005660:	4604      	mov	r4, r0
 8005662:	460d      	mov	r5, r1
 8005664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005666:	4b2c      	ldr	r3, [pc, #176]	; (8005718 <__ieee754_pow+0x750>)
 8005668:	4413      	add	r3, r2
 800566a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800566e:	4642      	mov	r2, r8
 8005670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005674:	464b      	mov	r3, r9
 8005676:	f7fa fd79 	bl	800016c <__adddf3>
 800567a:	4632      	mov	r2, r6
 800567c:	463b      	mov	r3, r7
 800567e:	f7fa fd75 	bl	800016c <__adddf3>
 8005682:	4622      	mov	r2, r4
 8005684:	462b      	mov	r3, r5
 8005686:	f7fa fd71 	bl	800016c <__adddf3>
 800568a:	4622      	mov	r2, r4
 800568c:	462b      	mov	r3, r5
 800568e:	4650      	mov	r0, sl
 8005690:	468b      	mov	fp, r1
 8005692:	f7fa fd69 	bl	8000168 <__aeabi_dsub>
 8005696:	4632      	mov	r2, r6
 8005698:	463b      	mov	r3, r7
 800569a:	f7fa fd65 	bl	8000168 <__aeabi_dsub>
 800569e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056a2:	f7fa fd61 	bl	8000168 <__aeabi_dsub>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4640      	mov	r0, r8
 80056ac:	4649      	mov	r1, r9
 80056ae:	e60d      	b.n	80052cc <__ieee754_pow+0x304>
 80056b0:	4a454eef 	.word	0x4a454eef
 80056b4:	3fca7e28 	.word	0x3fca7e28
 80056b8:	93c9db65 	.word	0x93c9db65
 80056bc:	3fcd864a 	.word	0x3fcd864a
 80056c0:	a91d4101 	.word	0xa91d4101
 80056c4:	3fd17460 	.word	0x3fd17460
 80056c8:	518f264d 	.word	0x518f264d
 80056cc:	3fd55555 	.word	0x3fd55555
 80056d0:	db6fabff 	.word	0xdb6fabff
 80056d4:	3fdb6db6 	.word	0x3fdb6db6
 80056d8:	33333303 	.word	0x33333303
 80056dc:	3fe33333 	.word	0x3fe33333
 80056e0:	e0000000 	.word	0xe0000000
 80056e4:	3feec709 	.word	0x3feec709
 80056e8:	dc3a03fd 	.word	0xdc3a03fd
 80056ec:	3feec709 	.word	0x3feec709
 80056f0:	145b01f5 	.word	0x145b01f5
 80056f4:	be3e2fe0 	.word	0xbe3e2fe0
 80056f8:	7ff00000 	.word	0x7ff00000
 80056fc:	43400000 	.word	0x43400000
 8005700:	0003988e 	.word	0x0003988e
 8005704:	000bb679 	.word	0x000bb679
 8005708:	080071f8 	.word	0x080071f8
 800570c:	3ff00000 	.word	0x3ff00000
 8005710:	40080000 	.word	0x40080000
 8005714:	08007218 	.word	0x08007218
 8005718:	08007208 	.word	0x08007208
 800571c:	2601      	movs	r6, #1
 800571e:	e66a      	b.n	80053f6 <__ieee754_pow+0x42e>
 8005720:	a39d      	add	r3, pc, #628	; (adr r3, 8005998 <__ieee754_pow+0x9d0>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	4640      	mov	r0, r8
 8005728:	4649      	mov	r1, r9
 800572a:	f7fa fd1f 	bl	800016c <__adddf3>
 800572e:	4622      	mov	r2, r4
 8005730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005734:	462b      	mov	r3, r5
 8005736:	4650      	mov	r0, sl
 8005738:	4639      	mov	r1, r7
 800573a:	f7fa fd15 	bl	8000168 <__aeabi_dsub>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005746:	f7fb f957 	bl	80009f8 <__aeabi_dcmpgt>
 800574a:	2800      	cmp	r0, #0
 800574c:	f47f ae09 	bne.w	8005362 <__ieee754_pow+0x39a>
 8005750:	4aa3      	ldr	r2, [pc, #652]	; (80059e0 <__ieee754_pow+0xa18>)
 8005752:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005756:	4293      	cmp	r3, r2
 8005758:	f340 8101 	ble.w	800595e <__ieee754_pow+0x996>
 800575c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005760:	2000      	movs	r0, #0
 8005762:	151b      	asrs	r3, r3, #20
 8005764:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005768:	fa4a f303 	asr.w	r3, sl, r3
 800576c:	4433      	add	r3, r6
 800576e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005772:	4f9c      	ldr	r7, [pc, #624]	; (80059e4 <__ieee754_pow+0xa1c>)
 8005774:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005778:	4117      	asrs	r7, r2
 800577a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800577e:	ea23 0107 	bic.w	r1, r3, r7
 8005782:	f1c2 0214 	rsb	r2, r2, #20
 8005786:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800578a:	460b      	mov	r3, r1
 800578c:	fa4a fa02 	asr.w	sl, sl, r2
 8005790:	2e00      	cmp	r6, #0
 8005792:	4602      	mov	r2, r0
 8005794:	4629      	mov	r1, r5
 8005796:	4620      	mov	r0, r4
 8005798:	bfb8      	it	lt
 800579a:	f1ca 0a00 	rsblt	sl, sl, #0
 800579e:	f7fa fce3 	bl	8000168 <__aeabi_dsub>
 80057a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057aa:	2400      	movs	r4, #0
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	f7fa fcdc 	bl	800016c <__adddf3>
 80057b4:	a37a      	add	r3, pc, #488	; (adr r3, 80059a0 <__ieee754_pow+0x9d8>)
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	4620      	mov	r0, r4
 80057bc:	460d      	mov	r5, r1
 80057be:	f7fa fe8b 	bl	80004d8 <__aeabi_dmul>
 80057c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057c6:	4606      	mov	r6, r0
 80057c8:	460f      	mov	r7, r1
 80057ca:	4620      	mov	r0, r4
 80057cc:	4629      	mov	r1, r5
 80057ce:	f7fa fccb 	bl	8000168 <__aeabi_dsub>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4640      	mov	r0, r8
 80057d8:	4649      	mov	r1, r9
 80057da:	f7fa fcc5 	bl	8000168 <__aeabi_dsub>
 80057de:	a372      	add	r3, pc, #456	; (adr r3, 80059a8 <__ieee754_pow+0x9e0>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f7fa fe78 	bl	80004d8 <__aeabi_dmul>
 80057e8:	a371      	add	r3, pc, #452	; (adr r3, 80059b0 <__ieee754_pow+0x9e8>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	4680      	mov	r8, r0
 80057f0:	4689      	mov	r9, r1
 80057f2:	4620      	mov	r0, r4
 80057f4:	4629      	mov	r1, r5
 80057f6:	f7fa fe6f 	bl	80004d8 <__aeabi_dmul>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4640      	mov	r0, r8
 8005800:	4649      	mov	r1, r9
 8005802:	f7fa fcb3 	bl	800016c <__adddf3>
 8005806:	4604      	mov	r4, r0
 8005808:	460d      	mov	r5, r1
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4630      	mov	r0, r6
 8005810:	4639      	mov	r1, r7
 8005812:	f7fa fcab 	bl	800016c <__adddf3>
 8005816:	4632      	mov	r2, r6
 8005818:	463b      	mov	r3, r7
 800581a:	4680      	mov	r8, r0
 800581c:	4689      	mov	r9, r1
 800581e:	f7fa fca3 	bl	8000168 <__aeabi_dsub>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4620      	mov	r0, r4
 8005828:	4629      	mov	r1, r5
 800582a:	f7fa fc9d 	bl	8000168 <__aeabi_dsub>
 800582e:	4642      	mov	r2, r8
 8005830:	4606      	mov	r6, r0
 8005832:	460f      	mov	r7, r1
 8005834:	464b      	mov	r3, r9
 8005836:	4640      	mov	r0, r8
 8005838:	4649      	mov	r1, r9
 800583a:	f7fa fe4d 	bl	80004d8 <__aeabi_dmul>
 800583e:	a35e      	add	r3, pc, #376	; (adr r3, 80059b8 <__ieee754_pow+0x9f0>)
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	4604      	mov	r4, r0
 8005846:	460d      	mov	r5, r1
 8005848:	f7fa fe46 	bl	80004d8 <__aeabi_dmul>
 800584c:	a35c      	add	r3, pc, #368	; (adr r3, 80059c0 <__ieee754_pow+0x9f8>)
 800584e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005852:	f7fa fc89 	bl	8000168 <__aeabi_dsub>
 8005856:	4622      	mov	r2, r4
 8005858:	462b      	mov	r3, r5
 800585a:	f7fa fe3d 	bl	80004d8 <__aeabi_dmul>
 800585e:	a35a      	add	r3, pc, #360	; (adr r3, 80059c8 <__ieee754_pow+0xa00>)
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	f7fa fc82 	bl	800016c <__adddf3>
 8005868:	4622      	mov	r2, r4
 800586a:	462b      	mov	r3, r5
 800586c:	f7fa fe34 	bl	80004d8 <__aeabi_dmul>
 8005870:	a357      	add	r3, pc, #348	; (adr r3, 80059d0 <__ieee754_pow+0xa08>)
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f7fa fc77 	bl	8000168 <__aeabi_dsub>
 800587a:	4622      	mov	r2, r4
 800587c:	462b      	mov	r3, r5
 800587e:	f7fa fe2b 	bl	80004d8 <__aeabi_dmul>
 8005882:	a355      	add	r3, pc, #340	; (adr r3, 80059d8 <__ieee754_pow+0xa10>)
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	f7fa fc70 	bl	800016c <__adddf3>
 800588c:	4622      	mov	r2, r4
 800588e:	462b      	mov	r3, r5
 8005890:	f7fa fe22 	bl	80004d8 <__aeabi_dmul>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4640      	mov	r0, r8
 800589a:	4649      	mov	r1, r9
 800589c:	f7fa fc64 	bl	8000168 <__aeabi_dsub>
 80058a0:	4604      	mov	r4, r0
 80058a2:	460d      	mov	r5, r1
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4640      	mov	r0, r8
 80058aa:	4649      	mov	r1, r9
 80058ac:	f7fa fe14 	bl	80004d8 <__aeabi_dmul>
 80058b0:	2200      	movs	r2, #0
 80058b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ba:	4620      	mov	r0, r4
 80058bc:	4629      	mov	r1, r5
 80058be:	f7fa fc53 	bl	8000168 <__aeabi_dsub>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ca:	f7fa ff2f 	bl	800072c <__aeabi_ddiv>
 80058ce:	4632      	mov	r2, r6
 80058d0:	4604      	mov	r4, r0
 80058d2:	460d      	mov	r5, r1
 80058d4:	463b      	mov	r3, r7
 80058d6:	4640      	mov	r0, r8
 80058d8:	4649      	mov	r1, r9
 80058da:	f7fa fdfd 	bl	80004d8 <__aeabi_dmul>
 80058de:	4632      	mov	r2, r6
 80058e0:	463b      	mov	r3, r7
 80058e2:	f7fa fc43 	bl	800016c <__adddf3>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4620      	mov	r0, r4
 80058ec:	4629      	mov	r1, r5
 80058ee:	f7fa fc3b 	bl	8000168 <__aeabi_dsub>
 80058f2:	4642      	mov	r2, r8
 80058f4:	464b      	mov	r3, r9
 80058f6:	f7fa fc37 	bl	8000168 <__aeabi_dsub>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	2000      	movs	r0, #0
 8005900:	4939      	ldr	r1, [pc, #228]	; (80059e8 <__ieee754_pow+0xa20>)
 8005902:	f7fa fc31 	bl	8000168 <__aeabi_dsub>
 8005906:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800590a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800590e:	da29      	bge.n	8005964 <__ieee754_pow+0x99c>
 8005910:	4652      	mov	r2, sl
 8005912:	f001 fa11 	bl	8006d38 <scalbn>
 8005916:	e9dd 2300 	ldrd	r2, r3, [sp]
 800591a:	f7ff bbfe 	b.w	800511a <__ieee754_pow+0x152>
 800591e:	4b33      	ldr	r3, [pc, #204]	; (80059ec <__ieee754_pow+0xa24>)
 8005920:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005924:	429f      	cmp	r7, r3
 8005926:	f77f af13 	ble.w	8005750 <__ieee754_pow+0x788>
 800592a:	4b31      	ldr	r3, [pc, #196]	; (80059f0 <__ieee754_pow+0xa28>)
 800592c:	440b      	add	r3, r1
 800592e:	4303      	orrs	r3, r0
 8005930:	d009      	beq.n	8005946 <__ieee754_pow+0x97e>
 8005932:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005936:	2200      	movs	r2, #0
 8005938:	2300      	movs	r3, #0
 800593a:	f7fb f83f 	bl	80009bc <__aeabi_dcmplt>
 800593e:	3800      	subs	r0, #0
 8005940:	bf18      	it	ne
 8005942:	2001      	movne	r0, #1
 8005944:	e453      	b.n	80051ee <__ieee754_pow+0x226>
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	f7fa fc0d 	bl	8000168 <__aeabi_dsub>
 800594e:	4642      	mov	r2, r8
 8005950:	464b      	mov	r3, r9
 8005952:	f7fb f847 	bl	80009e4 <__aeabi_dcmpge>
 8005956:	2800      	cmp	r0, #0
 8005958:	f43f aefa 	beq.w	8005750 <__ieee754_pow+0x788>
 800595c:	e7e9      	b.n	8005932 <__ieee754_pow+0x96a>
 800595e:	f04f 0a00 	mov.w	sl, #0
 8005962:	e720      	b.n	80057a6 <__ieee754_pow+0x7de>
 8005964:	4621      	mov	r1, r4
 8005966:	e7d6      	b.n	8005916 <__ieee754_pow+0x94e>
 8005968:	f04f 0b00 	mov.w	fp, #0
 800596c:	f8df c078 	ldr.w	ip, [pc, #120]	; 80059e8 <__ieee754_pow+0xa20>
 8005970:	f7ff bbba 	b.w	80050e8 <__ieee754_pow+0x120>
 8005974:	f04f 0b00 	mov.w	fp, #0
 8005978:	f04f 0c00 	mov.w	ip, #0
 800597c:	f7ff bbb4 	b.w	80050e8 <__ieee754_pow+0x120>
 8005980:	4640      	mov	r0, r8
 8005982:	4649      	mov	r1, r9
 8005984:	f7ff bb3d 	b.w	8005002 <__ieee754_pow+0x3a>
 8005988:	9200      	str	r2, [sp, #0]
 800598a:	f7ff bb89 	b.w	80050a0 <__ieee754_pow+0xd8>
 800598e:	2300      	movs	r3, #0
 8005990:	f7ff bb73 	b.w	800507a <__ieee754_pow+0xb2>
 8005994:	f3af 8000 	nop.w
 8005998:	652b82fe 	.word	0x652b82fe
 800599c:	3c971547 	.word	0x3c971547
 80059a0:	00000000 	.word	0x00000000
 80059a4:	3fe62e43 	.word	0x3fe62e43
 80059a8:	fefa39ef 	.word	0xfefa39ef
 80059ac:	3fe62e42 	.word	0x3fe62e42
 80059b0:	0ca86c39 	.word	0x0ca86c39
 80059b4:	be205c61 	.word	0xbe205c61
 80059b8:	72bea4d0 	.word	0x72bea4d0
 80059bc:	3e663769 	.word	0x3e663769
 80059c0:	c5d26bf1 	.word	0xc5d26bf1
 80059c4:	3ebbbd41 	.word	0x3ebbbd41
 80059c8:	af25de2c 	.word	0xaf25de2c
 80059cc:	3f11566a 	.word	0x3f11566a
 80059d0:	16bebd93 	.word	0x16bebd93
 80059d4:	3f66c16c 	.word	0x3f66c16c
 80059d8:	5555553e 	.word	0x5555553e
 80059dc:	3fc55555 	.word	0x3fc55555
 80059e0:	3fe00000 	.word	0x3fe00000
 80059e4:	000fffff 	.word	0x000fffff
 80059e8:	3ff00000 	.word	0x3ff00000
 80059ec:	4090cbff 	.word	0x4090cbff
 80059f0:	3f6f3400 	.word	0x3f6f3400
 80059f4:	00000000 	.word	0x00000000

080059f8 <__ieee754_rem_pio2>:
 80059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fc:	4614      	mov	r4, r2
 80059fe:	4ac4      	ldr	r2, [pc, #784]	; (8005d10 <__ieee754_rem_pio2+0x318>)
 8005a00:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005a04:	b08d      	sub	sp, #52	; 0x34
 8005a06:	4592      	cmp	sl, r2
 8005a08:	9104      	str	r1, [sp, #16]
 8005a0a:	dc07      	bgt.n	8005a1c <__ieee754_rem_pio2+0x24>
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e9c4 0100 	strd	r0, r1, [r4]
 8005a14:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005a18:	2500      	movs	r5, #0
 8005a1a:	e024      	b.n	8005a66 <__ieee754_rem_pio2+0x6e>
 8005a1c:	4abd      	ldr	r2, [pc, #756]	; (8005d14 <__ieee754_rem_pio2+0x31c>)
 8005a1e:	4592      	cmp	sl, r2
 8005a20:	dc72      	bgt.n	8005b08 <__ieee754_rem_pio2+0x110>
 8005a22:	9b04      	ldr	r3, [sp, #16]
 8005a24:	4dbc      	ldr	r5, [pc, #752]	; (8005d18 <__ieee754_rem_pio2+0x320>)
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	a3ab      	add	r3, pc, #684	; (adr r3, 8005cd8 <__ieee754_rem_pio2+0x2e0>)
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	dd36      	ble.n	8005a9e <__ieee754_rem_pio2+0xa6>
 8005a30:	f7fa fb9a 	bl	8000168 <__aeabi_dsub>
 8005a34:	45aa      	cmp	sl, r5
 8005a36:	4606      	mov	r6, r0
 8005a38:	460f      	mov	r7, r1
 8005a3a:	d018      	beq.n	8005a6e <__ieee754_rem_pio2+0x76>
 8005a3c:	a3a8      	add	r3, pc, #672	; (adr r3, 8005ce0 <__ieee754_rem_pio2+0x2e8>)
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f7fa fb91 	bl	8000168 <__aeabi_dsub>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	e9c4 2300 	strd	r2, r3, [r4]
 8005a50:	4639      	mov	r1, r7
 8005a52:	f7fa fb89 	bl	8000168 <__aeabi_dsub>
 8005a56:	a3a2      	add	r3, pc, #648	; (adr r3, 8005ce0 <__ieee754_rem_pio2+0x2e8>)
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f7fa fb84 	bl	8000168 <__aeabi_dsub>
 8005a60:	2501      	movs	r5, #1
 8005a62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005a66:	4628      	mov	r0, r5
 8005a68:	b00d      	add	sp, #52	; 0x34
 8005a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6e:	a39e      	add	r3, pc, #632	; (adr r3, 8005ce8 <__ieee754_rem_pio2+0x2f0>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f7fa fb78 	bl	8000168 <__aeabi_dsub>
 8005a78:	a39d      	add	r3, pc, #628	; (adr r3, 8005cf0 <__ieee754_rem_pio2+0x2f8>)
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	4606      	mov	r6, r0
 8005a80:	460f      	mov	r7, r1
 8005a82:	f7fa fb71 	bl	8000168 <__aeabi_dsub>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	e9c4 2300 	strd	r2, r3, [r4]
 8005a90:	4639      	mov	r1, r7
 8005a92:	f7fa fb69 	bl	8000168 <__aeabi_dsub>
 8005a96:	a396      	add	r3, pc, #600	; (adr r3, 8005cf0 <__ieee754_rem_pio2+0x2f8>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	e7de      	b.n	8005a5c <__ieee754_rem_pio2+0x64>
 8005a9e:	f7fa fb65 	bl	800016c <__adddf3>
 8005aa2:	45aa      	cmp	sl, r5
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	460f      	mov	r7, r1
 8005aa8:	d016      	beq.n	8005ad8 <__ieee754_rem_pio2+0xe0>
 8005aaa:	a38d      	add	r3, pc, #564	; (adr r3, 8005ce0 <__ieee754_rem_pio2+0x2e8>)
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	f7fa fb5c 	bl	800016c <__adddf3>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4630      	mov	r0, r6
 8005aba:	e9c4 2300 	strd	r2, r3, [r4]
 8005abe:	4639      	mov	r1, r7
 8005ac0:	f7fa fb52 	bl	8000168 <__aeabi_dsub>
 8005ac4:	a386      	add	r3, pc, #536	; (adr r3, 8005ce0 <__ieee754_rem_pio2+0x2e8>)
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f7fa fb4f 	bl	800016c <__adddf3>
 8005ace:	f04f 35ff 	mov.w	r5, #4294967295
 8005ad2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ad6:	e7c6      	b.n	8005a66 <__ieee754_rem_pio2+0x6e>
 8005ad8:	a383      	add	r3, pc, #524	; (adr r3, 8005ce8 <__ieee754_rem_pio2+0x2f0>)
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	f7fa fb45 	bl	800016c <__adddf3>
 8005ae2:	a383      	add	r3, pc, #524	; (adr r3, 8005cf0 <__ieee754_rem_pio2+0x2f8>)
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	4606      	mov	r6, r0
 8005aea:	460f      	mov	r7, r1
 8005aec:	f7fa fb3e 	bl	800016c <__adddf3>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4630      	mov	r0, r6
 8005af6:	e9c4 2300 	strd	r2, r3, [r4]
 8005afa:	4639      	mov	r1, r7
 8005afc:	f7fa fb34 	bl	8000168 <__aeabi_dsub>
 8005b00:	a37b      	add	r3, pc, #492	; (adr r3, 8005cf0 <__ieee754_rem_pio2+0x2f8>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	e7e0      	b.n	8005aca <__ieee754_rem_pio2+0xd2>
 8005b08:	4a84      	ldr	r2, [pc, #528]	; (8005d1c <__ieee754_rem_pio2+0x324>)
 8005b0a:	4592      	cmp	sl, r2
 8005b0c:	f300 80d5 	bgt.w	8005cba <__ieee754_rem_pio2+0x2c2>
 8005b10:	f001 f888 	bl	8006c24 <fabs>
 8005b14:	a378      	add	r3, pc, #480	; (adr r3, 8005cf8 <__ieee754_rem_pio2+0x300>)
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	460f      	mov	r7, r1
 8005b1e:	f7fa fcdb 	bl	80004d8 <__aeabi_dmul>
 8005b22:	2200      	movs	r2, #0
 8005b24:	4b7e      	ldr	r3, [pc, #504]	; (8005d20 <__ieee754_rem_pio2+0x328>)
 8005b26:	f7fa fb21 	bl	800016c <__adddf3>
 8005b2a:	f7fa ff85 	bl	8000a38 <__aeabi_d2iz>
 8005b2e:	4605      	mov	r5, r0
 8005b30:	f7fa fc68 	bl	8000404 <__aeabi_i2d>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b3c:	a366      	add	r3, pc, #408	; (adr r3, 8005cd8 <__ieee754_rem_pio2+0x2e0>)
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	f7fa fcc9 	bl	80004d8 <__aeabi_dmul>
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	f7fa fb0b 	bl	8000168 <__aeabi_dsub>
 8005b52:	a363      	add	r3, pc, #396	; (adr r3, 8005ce0 <__ieee754_rem_pio2+0x2e8>)
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	4680      	mov	r8, r0
 8005b5a:	4689      	mov	r9, r1
 8005b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b60:	f7fa fcba 	bl	80004d8 <__aeabi_dmul>
 8005b64:	2d1f      	cmp	r5, #31
 8005b66:	4606      	mov	r6, r0
 8005b68:	460f      	mov	r7, r1
 8005b6a:	dc0e      	bgt.n	8005b8a <__ieee754_rem_pio2+0x192>
 8005b6c:	4b6d      	ldr	r3, [pc, #436]	; (8005d24 <__ieee754_rem_pio2+0x32c>)
 8005b6e:	1e6a      	subs	r2, r5, #1
 8005b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b74:	4553      	cmp	r3, sl
 8005b76:	d008      	beq.n	8005b8a <__ieee754_rem_pio2+0x192>
 8005b78:	4632      	mov	r2, r6
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	4640      	mov	r0, r8
 8005b7e:	4649      	mov	r1, r9
 8005b80:	f7fa faf2 	bl	8000168 <__aeabi_dsub>
 8005b84:	e9c4 0100 	strd	r0, r1, [r4]
 8005b88:	e013      	b.n	8005bb2 <__ieee754_rem_pio2+0x1ba>
 8005b8a:	463b      	mov	r3, r7
 8005b8c:	4632      	mov	r2, r6
 8005b8e:	4640      	mov	r0, r8
 8005b90:	4649      	mov	r1, r9
 8005b92:	f7fa fae9 	bl	8000168 <__aeabi_dsub>
 8005b96:	ea4f 532a 	mov.w	r3, sl, asr #20
 8005b9a:	9305      	str	r3, [sp, #20]
 8005b9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005ba0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8005ba4:	f1ba 0f10 	cmp.w	sl, #16
 8005ba8:	dc1f      	bgt.n	8005bea <__ieee754_rem_pio2+0x1f2>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	e9c4 2300 	strd	r2, r3, [r4]
 8005bb2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005bb6:	4640      	mov	r0, r8
 8005bb8:	4653      	mov	r3, sl
 8005bba:	4649      	mov	r1, r9
 8005bbc:	f7fa fad4 	bl	8000168 <__aeabi_dsub>
 8005bc0:	4632      	mov	r2, r6
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	f7fa fad0 	bl	8000168 <__aeabi_dsub>
 8005bc8:	460b      	mov	r3, r1
 8005bca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005bce:	9904      	ldr	r1, [sp, #16]
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	2900      	cmp	r1, #0
 8005bd4:	f6bf af47 	bge.w	8005a66 <__ieee754_rem_pio2+0x6e>
 8005bd8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8005bdc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8005be0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005be4:	60e3      	str	r3, [r4, #12]
 8005be6:	426d      	negs	r5, r5
 8005be8:	e73d      	b.n	8005a66 <__ieee754_rem_pio2+0x6e>
 8005bea:	a33f      	add	r3, pc, #252	; (adr r3, 8005ce8 <__ieee754_rem_pio2+0x2f0>)
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf4:	f7fa fc70 	bl	80004d8 <__aeabi_dmul>
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	460f      	mov	r7, r1
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4640      	mov	r0, r8
 8005c02:	4649      	mov	r1, r9
 8005c04:	f7fa fab0 	bl	8000168 <__aeabi_dsub>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4682      	mov	sl, r0
 8005c0e:	468b      	mov	fp, r1
 8005c10:	4640      	mov	r0, r8
 8005c12:	4649      	mov	r1, r9
 8005c14:	f7fa faa8 	bl	8000168 <__aeabi_dsub>
 8005c18:	4632      	mov	r2, r6
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	f7fa faa4 	bl	8000168 <__aeabi_dsub>
 8005c20:	a333      	add	r3, pc, #204	; (adr r3, 8005cf0 <__ieee754_rem_pio2+0x2f8>)
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	4606      	mov	r6, r0
 8005c28:	460f      	mov	r7, r1
 8005c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c2e:	f7fa fc53 	bl	80004d8 <__aeabi_dmul>
 8005c32:	4632      	mov	r2, r6
 8005c34:	463b      	mov	r3, r7
 8005c36:	f7fa fa97 	bl	8000168 <__aeabi_dsub>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4606      	mov	r6, r0
 8005c40:	460f      	mov	r7, r1
 8005c42:	4650      	mov	r0, sl
 8005c44:	4659      	mov	r1, fp
 8005c46:	f7fa fa8f 	bl	8000168 <__aeabi_dsub>
 8005c4a:	9a05      	ldr	r2, [sp, #20]
 8005c4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b31      	cmp	r3, #49	; 0x31
 8005c54:	dc06      	bgt.n	8005c64 <__ieee754_rem_pio2+0x26c>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	46d0      	mov	r8, sl
 8005c5c:	46d9      	mov	r9, fp
 8005c5e:	e9c4 2300 	strd	r2, r3, [r4]
 8005c62:	e7a6      	b.n	8005bb2 <__ieee754_rem_pio2+0x1ba>
 8005c64:	a326      	add	r3, pc, #152	; (adr r3, 8005d00 <__ieee754_rem_pio2+0x308>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c6e:	f7fa fc33 	bl	80004d8 <__aeabi_dmul>
 8005c72:	4606      	mov	r6, r0
 8005c74:	460f      	mov	r7, r1
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4650      	mov	r0, sl
 8005c7c:	4659      	mov	r1, fp
 8005c7e:	f7fa fa73 	bl	8000168 <__aeabi_dsub>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4680      	mov	r8, r0
 8005c88:	4689      	mov	r9, r1
 8005c8a:	4650      	mov	r0, sl
 8005c8c:	4659      	mov	r1, fp
 8005c8e:	f7fa fa6b 	bl	8000168 <__aeabi_dsub>
 8005c92:	4632      	mov	r2, r6
 8005c94:	463b      	mov	r3, r7
 8005c96:	f7fa fa67 	bl	8000168 <__aeabi_dsub>
 8005c9a:	a31b      	add	r3, pc, #108	; (adr r3, 8005d08 <__ieee754_rem_pio2+0x310>)
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	4606      	mov	r6, r0
 8005ca2:	460f      	mov	r7, r1
 8005ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca8:	f7fa fc16 	bl	80004d8 <__aeabi_dmul>
 8005cac:	4632      	mov	r2, r6
 8005cae:	463b      	mov	r3, r7
 8005cb0:	f7fa fa5a 	bl	8000168 <__aeabi_dsub>
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	460f      	mov	r7, r1
 8005cb8:	e75e      	b.n	8005b78 <__ieee754_rem_pio2+0x180>
 8005cba:	4a1b      	ldr	r2, [pc, #108]	; (8005d28 <__ieee754_rem_pio2+0x330>)
 8005cbc:	4592      	cmp	sl, r2
 8005cbe:	dd35      	ble.n	8005d2c <__ieee754_rem_pio2+0x334>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	f7fa fa50 	bl	8000168 <__aeabi_dsub>
 8005cc8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ccc:	e9c4 0100 	strd	r0, r1, [r4]
 8005cd0:	e6a2      	b.n	8005a18 <__ieee754_rem_pio2+0x20>
 8005cd2:	bf00      	nop
 8005cd4:	f3af 8000 	nop.w
 8005cd8:	54400000 	.word	0x54400000
 8005cdc:	3ff921fb 	.word	0x3ff921fb
 8005ce0:	1a626331 	.word	0x1a626331
 8005ce4:	3dd0b461 	.word	0x3dd0b461
 8005ce8:	1a600000 	.word	0x1a600000
 8005cec:	3dd0b461 	.word	0x3dd0b461
 8005cf0:	2e037073 	.word	0x2e037073
 8005cf4:	3ba3198a 	.word	0x3ba3198a
 8005cf8:	6dc9c883 	.word	0x6dc9c883
 8005cfc:	3fe45f30 	.word	0x3fe45f30
 8005d00:	2e000000 	.word	0x2e000000
 8005d04:	3ba3198a 	.word	0x3ba3198a
 8005d08:	252049c1 	.word	0x252049c1
 8005d0c:	397b839a 	.word	0x397b839a
 8005d10:	3fe921fb 	.word	0x3fe921fb
 8005d14:	4002d97b 	.word	0x4002d97b
 8005d18:	3ff921fb 	.word	0x3ff921fb
 8005d1c:	413921fb 	.word	0x413921fb
 8005d20:	3fe00000 	.word	0x3fe00000
 8005d24:	08007228 	.word	0x08007228
 8005d28:	7fefffff 	.word	0x7fefffff
 8005d2c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005d30:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005d34:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005d38:	460f      	mov	r7, r1
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	f7fa fe7c 	bl	8000a38 <__aeabi_d2iz>
 8005d40:	f7fa fb60 	bl	8000404 <__aeabi_i2d>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4630      	mov	r0, r6
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d50:	f7fa fa0a 	bl	8000168 <__aeabi_dsub>
 8005d54:	2200      	movs	r2, #0
 8005d56:	4b22      	ldr	r3, [pc, #136]	; (8005de0 <__ieee754_rem_pio2+0x3e8>)
 8005d58:	f7fa fbbe 	bl	80004d8 <__aeabi_dmul>
 8005d5c:	460f      	mov	r7, r1
 8005d5e:	4606      	mov	r6, r0
 8005d60:	f7fa fe6a 	bl	8000a38 <__aeabi_d2iz>
 8005d64:	f7fa fb4e 	bl	8000404 <__aeabi_i2d>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	4639      	mov	r1, r7
 8005d70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005d74:	f7fa f9f8 	bl	8000168 <__aeabi_dsub>
 8005d78:	2200      	movs	r2, #0
 8005d7a:	4b19      	ldr	r3, [pc, #100]	; (8005de0 <__ieee754_rem_pio2+0x3e8>)
 8005d7c:	f7fa fbac 	bl	80004d8 <__aeabi_dmul>
 8005d80:	f04f 0803 	mov.w	r8, #3
 8005d84:	2600      	movs	r6, #0
 8005d86:	2700      	movs	r7, #0
 8005d88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d8c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8005d90:	4632      	mov	r2, r6
 8005d92:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8005d96:	463b      	mov	r3, r7
 8005d98:	46c2      	mov	sl, r8
 8005d9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d9e:	f7fa fe03 	bl	80009a8 <__aeabi_dcmpeq>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	d1f4      	bne.n	8005d90 <__ieee754_rem_pio2+0x398>
 8005da6:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <__ieee754_rem_pio2+0x3ec>)
 8005da8:	462a      	mov	r2, r5
 8005daa:	9301      	str	r3, [sp, #4]
 8005dac:	2302      	movs	r3, #2
 8005dae:	4621      	mov	r1, r4
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	a806      	add	r0, sp, #24
 8005db4:	4653      	mov	r3, sl
 8005db6:	f000 f985 	bl	80060c4 <__kernel_rem_pio2>
 8005dba:	9b04      	ldr	r3, [sp, #16]
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f6bf ae51 	bge.w	8005a66 <__ieee754_rem_pio2+0x6e>
 8005dc4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005dc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dcc:	e9c4 2300 	strd	r2, r3, [r4]
 8005dd0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005dd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dd8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005ddc:	e703      	b.n	8005be6 <__ieee754_rem_pio2+0x1ee>
 8005dde:	bf00      	nop
 8005de0:	41700000 	.word	0x41700000
 8005de4:	080072a8 	.word	0x080072a8

08005de8 <__ieee754_sqrt>:
 8005de8:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005f44 <__ieee754_sqrt+0x15c>
 8005dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df0:	ea3c 0c01 	bics.w	ip, ip, r1
 8005df4:	4606      	mov	r6, r0
 8005df6:	460d      	mov	r5, r1
 8005df8:	460c      	mov	r4, r1
 8005dfa:	460a      	mov	r2, r1
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	d10f      	bne.n	8005e22 <__ieee754_sqrt+0x3a>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	f7fa fb67 	bl	80004d8 <__aeabi_dmul>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4630      	mov	r0, r6
 8005e10:	4629      	mov	r1, r5
 8005e12:	f7fa f9ab 	bl	800016c <__adddf3>
 8005e16:	4606      	mov	r6, r0
 8005e18:	460d      	mov	r5, r1
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e22:	2900      	cmp	r1, #0
 8005e24:	dc0e      	bgt.n	8005e44 <__ieee754_sqrt+0x5c>
 8005e26:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005e2a:	ea5c 0707 	orrs.w	r7, ip, r7
 8005e2e:	d0f4      	beq.n	8005e1a <__ieee754_sqrt+0x32>
 8005e30:	b141      	cbz	r1, 8005e44 <__ieee754_sqrt+0x5c>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	f7fa f997 	bl	8000168 <__aeabi_dsub>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	f7fa fc75 	bl	800072c <__aeabi_ddiv>
 8005e42:	e7e8      	b.n	8005e16 <__ieee754_sqrt+0x2e>
 8005e44:	1521      	asrs	r1, r4, #20
 8005e46:	d075      	beq.n	8005f34 <__ieee754_sqrt+0x14c>
 8005e48:	07cc      	lsls	r4, r1, #31
 8005e4a:	f04f 0400 	mov.w	r4, #0
 8005e4e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005e52:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8005e56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e5a:	bf5e      	ittt	pl
 8005e5c:	0fd9      	lsrpl	r1, r3, #31
 8005e5e:	005b      	lslpl	r3, r3, #1
 8005e60:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8005e64:	0fd9      	lsrs	r1, r3, #31
 8005e66:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005e6a:	2516      	movs	r5, #22
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e72:	107f      	asrs	r7, r7, #1
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	1846      	adds	r6, r0, r1
 8005e78:	4296      	cmp	r6, r2
 8005e7a:	bfde      	ittt	le
 8005e7c:	1b92      	suble	r2, r2, r6
 8005e7e:	1870      	addle	r0, r6, r1
 8005e80:	1864      	addle	r4, r4, r1
 8005e82:	0052      	lsls	r2, r2, #1
 8005e84:	3d01      	subs	r5, #1
 8005e86:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005e8a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005e8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005e92:	d1f0      	bne.n	8005e76 <__ieee754_sqrt+0x8e>
 8005e94:	4629      	mov	r1, r5
 8005e96:	f04f 0e20 	mov.w	lr, #32
 8005e9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005e9e:	4282      	cmp	r2, r0
 8005ea0:	eb06 0c05 	add.w	ip, r6, r5
 8005ea4:	dc02      	bgt.n	8005eac <__ieee754_sqrt+0xc4>
 8005ea6:	d113      	bne.n	8005ed0 <__ieee754_sqrt+0xe8>
 8005ea8:	459c      	cmp	ip, r3
 8005eaa:	d811      	bhi.n	8005ed0 <__ieee754_sqrt+0xe8>
 8005eac:	f1bc 0f00 	cmp.w	ip, #0
 8005eb0:	eb0c 0506 	add.w	r5, ip, r6
 8005eb4:	da43      	bge.n	8005f3e <__ieee754_sqrt+0x156>
 8005eb6:	2d00      	cmp	r5, #0
 8005eb8:	db41      	blt.n	8005f3e <__ieee754_sqrt+0x156>
 8005eba:	f100 0801 	add.w	r8, r0, #1
 8005ebe:	1a12      	subs	r2, r2, r0
 8005ec0:	4640      	mov	r0, r8
 8005ec2:	459c      	cmp	ip, r3
 8005ec4:	bf88      	it	hi
 8005ec6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005eca:	eba3 030c 	sub.w	r3, r3, ip
 8005ece:	4431      	add	r1, r6
 8005ed0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005ed4:	f1be 0e01 	subs.w	lr, lr, #1
 8005ed8:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8005edc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005ee0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005ee4:	d1db      	bne.n	8005e9e <__ieee754_sqrt+0xb6>
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	d006      	beq.n	8005ef8 <__ieee754_sqrt+0x110>
 8005eea:	1c48      	adds	r0, r1, #1
 8005eec:	bf0b      	itete	eq
 8005eee:	4671      	moveq	r1, lr
 8005ef0:	3101      	addne	r1, #1
 8005ef2:	3401      	addeq	r4, #1
 8005ef4:	f021 0101 	bicne.w	r1, r1, #1
 8005ef8:	1063      	asrs	r3, r4, #1
 8005efa:	0849      	lsrs	r1, r1, #1
 8005efc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005f00:	07e2      	lsls	r2, r4, #31
 8005f02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005f06:	bf48      	it	mi
 8005f08:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005f0c:	460e      	mov	r6, r1
 8005f0e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005f12:	e782      	b.n	8005e1a <__ieee754_sqrt+0x32>
 8005f14:	0ada      	lsrs	r2, r3, #11
 8005f16:	3815      	subs	r0, #21
 8005f18:	055b      	lsls	r3, r3, #21
 8005f1a:	2a00      	cmp	r2, #0
 8005f1c:	d0fa      	beq.n	8005f14 <__ieee754_sqrt+0x12c>
 8005f1e:	02d5      	lsls	r5, r2, #11
 8005f20:	d50a      	bpl.n	8005f38 <__ieee754_sqrt+0x150>
 8005f22:	f1c1 0420 	rsb	r4, r1, #32
 8005f26:	fa23 f404 	lsr.w	r4, r3, r4
 8005f2a:	1e4d      	subs	r5, r1, #1
 8005f2c:	408b      	lsls	r3, r1
 8005f2e:	4322      	orrs	r2, r4
 8005f30:	1b41      	subs	r1, r0, r5
 8005f32:	e789      	b.n	8005e48 <__ieee754_sqrt+0x60>
 8005f34:	4608      	mov	r0, r1
 8005f36:	e7f0      	b.n	8005f1a <__ieee754_sqrt+0x132>
 8005f38:	0052      	lsls	r2, r2, #1
 8005f3a:	3101      	adds	r1, #1
 8005f3c:	e7ef      	b.n	8005f1e <__ieee754_sqrt+0x136>
 8005f3e:	4680      	mov	r8, r0
 8005f40:	e7bd      	b.n	8005ebe <__ieee754_sqrt+0xd6>
 8005f42:	bf00      	nop
 8005f44:	7ff00000 	.word	0x7ff00000

08005f48 <__kernel_cos>:
 8005f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005f50:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005f54:	4680      	mov	r8, r0
 8005f56:	460f      	mov	r7, r1
 8005f58:	e9cd 2300 	strd	r2, r3, [sp]
 8005f5c:	da04      	bge.n	8005f68 <__kernel_cos+0x20>
 8005f5e:	f7fa fd6b 	bl	8000a38 <__aeabi_d2iz>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	f000 8086 	beq.w	8006074 <__kernel_cos+0x12c>
 8005f68:	4642      	mov	r2, r8
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	4639      	mov	r1, r7
 8005f70:	f7fa fab2 	bl	80004d8 <__aeabi_dmul>
 8005f74:	2200      	movs	r2, #0
 8005f76:	4b4e      	ldr	r3, [pc, #312]	; (80060b0 <__kernel_cos+0x168>)
 8005f78:	4604      	mov	r4, r0
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	f7fa faac 	bl	80004d8 <__aeabi_dmul>
 8005f80:	a33f      	add	r3, pc, #252	; (adr r3, 8006080 <__kernel_cos+0x138>)
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	4682      	mov	sl, r0
 8005f88:	468b      	mov	fp, r1
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	f7fa faa3 	bl	80004d8 <__aeabi_dmul>
 8005f92:	a33d      	add	r3, pc, #244	; (adr r3, 8006088 <__kernel_cos+0x140>)
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f7fa f8e8 	bl	800016c <__adddf3>
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	462b      	mov	r3, r5
 8005fa0:	f7fa fa9a 	bl	80004d8 <__aeabi_dmul>
 8005fa4:	a33a      	add	r3, pc, #232	; (adr r3, 8006090 <__kernel_cos+0x148>)
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	f7fa f8dd 	bl	8000168 <__aeabi_dsub>
 8005fae:	4622      	mov	r2, r4
 8005fb0:	462b      	mov	r3, r5
 8005fb2:	f7fa fa91 	bl	80004d8 <__aeabi_dmul>
 8005fb6:	a338      	add	r3, pc, #224	; (adr r3, 8006098 <__kernel_cos+0x150>)
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	f7fa f8d6 	bl	800016c <__adddf3>
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	462b      	mov	r3, r5
 8005fc4:	f7fa fa88 	bl	80004d8 <__aeabi_dmul>
 8005fc8:	a335      	add	r3, pc, #212	; (adr r3, 80060a0 <__kernel_cos+0x158>)
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f7fa f8cb 	bl	8000168 <__aeabi_dsub>
 8005fd2:	4622      	mov	r2, r4
 8005fd4:	462b      	mov	r3, r5
 8005fd6:	f7fa fa7f 	bl	80004d8 <__aeabi_dmul>
 8005fda:	a333      	add	r3, pc, #204	; (adr r3, 80060a8 <__kernel_cos+0x160>)
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f7fa f8c4 	bl	800016c <__adddf3>
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	462b      	mov	r3, r5
 8005fe8:	f7fa fa76 	bl	80004d8 <__aeabi_dmul>
 8005fec:	4622      	mov	r2, r4
 8005fee:	462b      	mov	r3, r5
 8005ff0:	f7fa fa72 	bl	80004d8 <__aeabi_dmul>
 8005ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	460d      	mov	r5, r1
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4639      	mov	r1, r7
 8006000:	f7fa fa6a 	bl	80004d8 <__aeabi_dmul>
 8006004:	460b      	mov	r3, r1
 8006006:	4602      	mov	r2, r0
 8006008:	4629      	mov	r1, r5
 800600a:	4620      	mov	r0, r4
 800600c:	f7fa f8ac 	bl	8000168 <__aeabi_dsub>
 8006010:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <__kernel_cos+0x16c>)
 8006012:	4680      	mov	r8, r0
 8006014:	429e      	cmp	r6, r3
 8006016:	4689      	mov	r9, r1
 8006018:	dc0e      	bgt.n	8006038 <__kernel_cos+0xf0>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4650      	mov	r0, sl
 8006020:	4659      	mov	r1, fp
 8006022:	f7fa f8a1 	bl	8000168 <__aeabi_dsub>
 8006026:	4602      	mov	r2, r0
 8006028:	2000      	movs	r0, #0
 800602a:	460b      	mov	r3, r1
 800602c:	4922      	ldr	r1, [pc, #136]	; (80060b8 <__kernel_cos+0x170>)
 800602e:	f7fa f89b 	bl	8000168 <__aeabi_dsub>
 8006032:	b003      	add	sp, #12
 8006034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006038:	2400      	movs	r4, #0
 800603a:	4b20      	ldr	r3, [pc, #128]	; (80060bc <__kernel_cos+0x174>)
 800603c:	4622      	mov	r2, r4
 800603e:	429e      	cmp	r6, r3
 8006040:	bfcc      	ite	gt
 8006042:	4d1f      	ldrgt	r5, [pc, #124]	; (80060c0 <__kernel_cos+0x178>)
 8006044:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006048:	462b      	mov	r3, r5
 800604a:	2000      	movs	r0, #0
 800604c:	491a      	ldr	r1, [pc, #104]	; (80060b8 <__kernel_cos+0x170>)
 800604e:	f7fa f88b 	bl	8000168 <__aeabi_dsub>
 8006052:	4622      	mov	r2, r4
 8006054:	4606      	mov	r6, r0
 8006056:	460f      	mov	r7, r1
 8006058:	462b      	mov	r3, r5
 800605a:	4650      	mov	r0, sl
 800605c:	4659      	mov	r1, fp
 800605e:	f7fa f883 	bl	8000168 <__aeabi_dsub>
 8006062:	4642      	mov	r2, r8
 8006064:	464b      	mov	r3, r9
 8006066:	f7fa f87f 	bl	8000168 <__aeabi_dsub>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4630      	mov	r0, r6
 8006070:	4639      	mov	r1, r7
 8006072:	e7dc      	b.n	800602e <__kernel_cos+0xe6>
 8006074:	2000      	movs	r0, #0
 8006076:	4910      	ldr	r1, [pc, #64]	; (80060b8 <__kernel_cos+0x170>)
 8006078:	e7db      	b.n	8006032 <__kernel_cos+0xea>
 800607a:	bf00      	nop
 800607c:	f3af 8000 	nop.w
 8006080:	be8838d4 	.word	0xbe8838d4
 8006084:	bda8fae9 	.word	0xbda8fae9
 8006088:	bdb4b1c4 	.word	0xbdb4b1c4
 800608c:	3e21ee9e 	.word	0x3e21ee9e
 8006090:	809c52ad 	.word	0x809c52ad
 8006094:	3e927e4f 	.word	0x3e927e4f
 8006098:	19cb1590 	.word	0x19cb1590
 800609c:	3efa01a0 	.word	0x3efa01a0
 80060a0:	16c15177 	.word	0x16c15177
 80060a4:	3f56c16c 	.word	0x3f56c16c
 80060a8:	5555554c 	.word	0x5555554c
 80060ac:	3fa55555 	.word	0x3fa55555
 80060b0:	3fe00000 	.word	0x3fe00000
 80060b4:	3fd33332 	.word	0x3fd33332
 80060b8:	3ff00000 	.word	0x3ff00000
 80060bc:	3fe90000 	.word	0x3fe90000
 80060c0:	3fd20000 	.word	0x3fd20000

080060c4 <__kernel_rem_pio2>:
 80060c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80060cc:	9308      	str	r3, [sp, #32]
 80060ce:	9106      	str	r1, [sp, #24]
 80060d0:	4bb6      	ldr	r3, [pc, #728]	; (80063ac <__kernel_rem_pio2+0x2e8>)
 80060d2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80060d4:	f112 0f14 	cmn.w	r2, #20
 80060d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060dc:	bfa8      	it	ge
 80060de:	1ed4      	subge	r4, r2, #3
 80060e0:	9302      	str	r3, [sp, #8]
 80060e2:	9b08      	ldr	r3, [sp, #32]
 80060e4:	bfb8      	it	lt
 80060e6:	2400      	movlt	r4, #0
 80060e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	bfa4      	itt	ge
 80060f0:	2318      	movge	r3, #24
 80060f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80060f6:	f06f 0317 	mvn.w	r3, #23
 80060fa:	fb04 3303 	mla	r3, r4, r3, r3
 80060fe:	eb03 0b02 	add.w	fp, r3, r2
 8006102:	9a07      	ldr	r2, [sp, #28]
 8006104:	9b02      	ldr	r3, [sp, #8]
 8006106:	1aa7      	subs	r7, r4, r2
 8006108:	eb03 0802 	add.w	r8, r3, r2
 800610c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800610e:	2500      	movs	r5, #0
 8006110:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006114:	2200      	movs	r2, #0
 8006116:	2300      	movs	r3, #0
 8006118:	9009      	str	r0, [sp, #36]	; 0x24
 800611a:	ae20      	add	r6, sp, #128	; 0x80
 800611c:	4545      	cmp	r5, r8
 800611e:	dd14      	ble.n	800614a <__kernel_rem_pio2+0x86>
 8006120:	f04f 0800 	mov.w	r8, #0
 8006124:	9a08      	ldr	r2, [sp, #32]
 8006126:	ab20      	add	r3, sp, #128	; 0x80
 8006128:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800612c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8006130:	9b02      	ldr	r3, [sp, #8]
 8006132:	4598      	cmp	r8, r3
 8006134:	dc35      	bgt.n	80061a2 <__kernel_rem_pio2+0xde>
 8006136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006138:	2200      	movs	r2, #0
 800613a:	f1a3 0908 	sub.w	r9, r3, #8
 800613e:	2300      	movs	r3, #0
 8006140:	462f      	mov	r7, r5
 8006142:	2600      	movs	r6, #0
 8006144:	e9cd 2300 	strd	r2, r3, [sp]
 8006148:	e01f      	b.n	800618a <__kernel_rem_pio2+0xc6>
 800614a:	42ef      	cmn	r7, r5
 800614c:	d40b      	bmi.n	8006166 <__kernel_rem_pio2+0xa2>
 800614e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006152:	e9cd 2300 	strd	r2, r3, [sp]
 8006156:	f7fa f955 	bl	8000404 <__aeabi_i2d>
 800615a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800615e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006162:	3501      	adds	r5, #1
 8006164:	e7da      	b.n	800611c <__kernel_rem_pio2+0x58>
 8006166:	4610      	mov	r0, r2
 8006168:	4619      	mov	r1, r3
 800616a:	e7f8      	b.n	800615e <__kernel_rem_pio2+0x9a>
 800616c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006170:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006174:	f7fa f9b0 	bl	80004d8 <__aeabi_dmul>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006180:	f7f9 fff4 	bl	800016c <__adddf3>
 8006184:	e9cd 0100 	strd	r0, r1, [sp]
 8006188:	3601      	adds	r6, #1
 800618a:	9b07      	ldr	r3, [sp, #28]
 800618c:	3f08      	subs	r7, #8
 800618e:	429e      	cmp	r6, r3
 8006190:	ddec      	ble.n	800616c <__kernel_rem_pio2+0xa8>
 8006192:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006196:	f108 0801 	add.w	r8, r8, #1
 800619a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800619e:	3508      	adds	r5, #8
 80061a0:	e7c6      	b.n	8006130 <__kernel_rem_pio2+0x6c>
 80061a2:	9b02      	ldr	r3, [sp, #8]
 80061a4:	aa0c      	add	r2, sp, #48	; 0x30
 80061a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80061aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80061ac:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80061ae:	9e02      	ldr	r6, [sp, #8]
 80061b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80061b4:	930a      	str	r3, [sp, #40]	; 0x28
 80061b6:	ab98      	add	r3, sp, #608	; 0x260
 80061b8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061bc:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80061c0:	ab70      	add	r3, sp, #448	; 0x1c0
 80061c2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80061c6:	46d0      	mov	r8, sl
 80061c8:	46b1      	mov	r9, r6
 80061ca:	af0c      	add	r7, sp, #48	; 0x30
 80061cc:	9700      	str	r7, [sp, #0]
 80061ce:	f1b9 0f00 	cmp.w	r9, #0
 80061d2:	f1a8 0808 	sub.w	r8, r8, #8
 80061d6:	dc71      	bgt.n	80062bc <__kernel_rem_pio2+0x1f8>
 80061d8:	465a      	mov	r2, fp
 80061da:	4620      	mov	r0, r4
 80061dc:	4629      	mov	r1, r5
 80061de:	f000 fdab 	bl	8006d38 <scalbn>
 80061e2:	2200      	movs	r2, #0
 80061e4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80061e8:	4604      	mov	r4, r0
 80061ea:	460d      	mov	r5, r1
 80061ec:	f7fa f974 	bl	80004d8 <__aeabi_dmul>
 80061f0:	f000 fd22 	bl	8006c38 <floor>
 80061f4:	2200      	movs	r2, #0
 80061f6:	4b6e      	ldr	r3, [pc, #440]	; (80063b0 <__kernel_rem_pio2+0x2ec>)
 80061f8:	f7fa f96e 	bl	80004d8 <__aeabi_dmul>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4620      	mov	r0, r4
 8006202:	4629      	mov	r1, r5
 8006204:	f7f9 ffb0 	bl	8000168 <__aeabi_dsub>
 8006208:	460d      	mov	r5, r1
 800620a:	4604      	mov	r4, r0
 800620c:	f7fa fc14 	bl	8000a38 <__aeabi_d2iz>
 8006210:	9004      	str	r0, [sp, #16]
 8006212:	f7fa f8f7 	bl	8000404 <__aeabi_i2d>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4620      	mov	r0, r4
 800621c:	4629      	mov	r1, r5
 800621e:	f7f9 ffa3 	bl	8000168 <__aeabi_dsub>
 8006222:	f1bb 0f00 	cmp.w	fp, #0
 8006226:	4680      	mov	r8, r0
 8006228:	4689      	mov	r9, r1
 800622a:	dd70      	ble.n	800630e <__kernel_rem_pio2+0x24a>
 800622c:	1e72      	subs	r2, r6, #1
 800622e:	ab0c      	add	r3, sp, #48	; 0x30
 8006230:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006234:	9c04      	ldr	r4, [sp, #16]
 8006236:	f1cb 0118 	rsb	r1, fp, #24
 800623a:	fa40 f301 	asr.w	r3, r0, r1
 800623e:	441c      	add	r4, r3
 8006240:	408b      	lsls	r3, r1
 8006242:	1ac0      	subs	r0, r0, r3
 8006244:	ab0c      	add	r3, sp, #48	; 0x30
 8006246:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800624a:	f1cb 0317 	rsb	r3, fp, #23
 800624e:	9404      	str	r4, [sp, #16]
 8006250:	fa40 f303 	asr.w	r3, r0, r3
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	9b00      	ldr	r3, [sp, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	dd66      	ble.n	800632a <__kernel_rem_pio2+0x266>
 800625c:	2200      	movs	r2, #0
 800625e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006262:	4614      	mov	r4, r2
 8006264:	9b04      	ldr	r3, [sp, #16]
 8006266:	3301      	adds	r3, #1
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	4296      	cmp	r6, r2
 800626c:	f300 80ac 	bgt.w	80063c8 <__kernel_rem_pio2+0x304>
 8006270:	f1bb 0f00 	cmp.w	fp, #0
 8006274:	dd07      	ble.n	8006286 <__kernel_rem_pio2+0x1c2>
 8006276:	f1bb 0f01 	cmp.w	fp, #1
 800627a:	f000 80b4 	beq.w	80063e6 <__kernel_rem_pio2+0x322>
 800627e:	f1bb 0f02 	cmp.w	fp, #2
 8006282:	f000 80ba 	beq.w	80063fa <__kernel_rem_pio2+0x336>
 8006286:	9b00      	ldr	r3, [sp, #0]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d14e      	bne.n	800632a <__kernel_rem_pio2+0x266>
 800628c:	4642      	mov	r2, r8
 800628e:	464b      	mov	r3, r9
 8006290:	2000      	movs	r0, #0
 8006292:	4948      	ldr	r1, [pc, #288]	; (80063b4 <__kernel_rem_pio2+0x2f0>)
 8006294:	f7f9 ff68 	bl	8000168 <__aeabi_dsub>
 8006298:	4680      	mov	r8, r0
 800629a:	4689      	mov	r9, r1
 800629c:	2c00      	cmp	r4, #0
 800629e:	d044      	beq.n	800632a <__kernel_rem_pio2+0x266>
 80062a0:	465a      	mov	r2, fp
 80062a2:	2000      	movs	r0, #0
 80062a4:	4943      	ldr	r1, [pc, #268]	; (80063b4 <__kernel_rem_pio2+0x2f0>)
 80062a6:	f000 fd47 	bl	8006d38 <scalbn>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4640      	mov	r0, r8
 80062b0:	4649      	mov	r1, r9
 80062b2:	f7f9 ff59 	bl	8000168 <__aeabi_dsub>
 80062b6:	4680      	mov	r8, r0
 80062b8:	4689      	mov	r9, r1
 80062ba:	e036      	b.n	800632a <__kernel_rem_pio2+0x266>
 80062bc:	2200      	movs	r2, #0
 80062be:	4b3e      	ldr	r3, [pc, #248]	; (80063b8 <__kernel_rem_pio2+0x2f4>)
 80062c0:	4620      	mov	r0, r4
 80062c2:	4629      	mov	r1, r5
 80062c4:	f7fa f908 	bl	80004d8 <__aeabi_dmul>
 80062c8:	f7fa fbb6 	bl	8000a38 <__aeabi_d2iz>
 80062cc:	f7fa f89a 	bl	8000404 <__aeabi_i2d>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062d8:	2200      	movs	r2, #0
 80062da:	4b38      	ldr	r3, [pc, #224]	; (80063bc <__kernel_rem_pio2+0x2f8>)
 80062dc:	f7fa f8fc 	bl	80004d8 <__aeabi_dmul>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4620      	mov	r0, r4
 80062e6:	4629      	mov	r1, r5
 80062e8:	f7f9 ff3e 	bl	8000168 <__aeabi_dsub>
 80062ec:	f7fa fba4 	bl	8000a38 <__aeabi_d2iz>
 80062f0:	9b00      	ldr	r3, [sp, #0]
 80062f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80062f6:	f843 0b04 	str.w	r0, [r3], #4
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006300:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006304:	f7f9 ff32 	bl	800016c <__adddf3>
 8006308:	4604      	mov	r4, r0
 800630a:	460d      	mov	r5, r1
 800630c:	e75f      	b.n	80061ce <__kernel_rem_pio2+0x10a>
 800630e:	d105      	bne.n	800631c <__kernel_rem_pio2+0x258>
 8006310:	1e73      	subs	r3, r6, #1
 8006312:	aa0c      	add	r2, sp, #48	; 0x30
 8006314:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006318:	15c3      	asrs	r3, r0, #23
 800631a:	e79b      	b.n	8006254 <__kernel_rem_pio2+0x190>
 800631c:	2200      	movs	r2, #0
 800631e:	4b28      	ldr	r3, [pc, #160]	; (80063c0 <__kernel_rem_pio2+0x2fc>)
 8006320:	f7fa fb60 	bl	80009e4 <__aeabi_dcmpge>
 8006324:	2800      	cmp	r0, #0
 8006326:	d13e      	bne.n	80063a6 <__kernel_rem_pio2+0x2e2>
 8006328:	9000      	str	r0, [sp, #0]
 800632a:	2200      	movs	r2, #0
 800632c:	2300      	movs	r3, #0
 800632e:	4640      	mov	r0, r8
 8006330:	4649      	mov	r1, r9
 8006332:	f7fa fb39 	bl	80009a8 <__aeabi_dcmpeq>
 8006336:	2800      	cmp	r0, #0
 8006338:	f000 80b1 	beq.w	800649e <__kernel_rem_pio2+0x3da>
 800633c:	1e74      	subs	r4, r6, #1
 800633e:	4623      	mov	r3, r4
 8006340:	2200      	movs	r2, #0
 8006342:	9902      	ldr	r1, [sp, #8]
 8006344:	428b      	cmp	r3, r1
 8006346:	da5f      	bge.n	8006408 <__kernel_rem_pio2+0x344>
 8006348:	2a00      	cmp	r2, #0
 800634a:	d074      	beq.n	8006436 <__kernel_rem_pio2+0x372>
 800634c:	ab0c      	add	r3, sp, #48	; 0x30
 800634e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006352:	f1ab 0b18 	sub.w	fp, fp, #24
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 809f 	beq.w	800649a <__kernel_rem_pio2+0x3d6>
 800635c:	465a      	mov	r2, fp
 800635e:	2000      	movs	r0, #0
 8006360:	4914      	ldr	r1, [pc, #80]	; (80063b4 <__kernel_rem_pio2+0x2f0>)
 8006362:	f000 fce9 	bl	8006d38 <scalbn>
 8006366:	46a2      	mov	sl, r4
 8006368:	4606      	mov	r6, r0
 800636a:	460f      	mov	r7, r1
 800636c:	f04f 0800 	mov.w	r8, #0
 8006370:	ab70      	add	r3, sp, #448	; 0x1c0
 8006372:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80063b8 <__kernel_rem_pio2+0x2f4>
 8006376:	00e5      	lsls	r5, r4, #3
 8006378:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800637c:	f1ba 0f00 	cmp.w	sl, #0
 8006380:	f280 80c3 	bge.w	800650a <__kernel_rem_pio2+0x446>
 8006384:	4626      	mov	r6, r4
 8006386:	2e00      	cmp	r6, #0
 8006388:	f2c0 80f5 	blt.w	8006576 <__kernel_rem_pio2+0x4b2>
 800638c:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <__kernel_rem_pio2+0x300>)
 800638e:	f04f 0a00 	mov.w	sl, #0
 8006392:	9307      	str	r3, [sp, #28]
 8006394:	ab70      	add	r3, sp, #448	; 0x1c0
 8006396:	f04f 0b00 	mov.w	fp, #0
 800639a:	f04f 0800 	mov.w	r8, #0
 800639e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80063a2:	1ba7      	subs	r7, r4, r6
 80063a4:	e0db      	b.n	800655e <__kernel_rem_pio2+0x49a>
 80063a6:	2302      	movs	r3, #2
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	e757      	b.n	800625c <__kernel_rem_pio2+0x198>
 80063ac:	080073f0 	.word	0x080073f0
 80063b0:	40200000 	.word	0x40200000
 80063b4:	3ff00000 	.word	0x3ff00000
 80063b8:	3e700000 	.word	0x3e700000
 80063bc:	41700000 	.word	0x41700000
 80063c0:	3fe00000 	.word	0x3fe00000
 80063c4:	080073b0 	.word	0x080073b0
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	b944      	cbnz	r4, 80063de <__kernel_rem_pio2+0x31a>
 80063cc:	b11b      	cbz	r3, 80063d6 <__kernel_rem_pio2+0x312>
 80063ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	2301      	movs	r3, #1
 80063d6:	461c      	mov	r4, r3
 80063d8:	3201      	adds	r2, #1
 80063da:	3704      	adds	r7, #4
 80063dc:	e745      	b.n	800626a <__kernel_rem_pio2+0x1a6>
 80063de:	1acb      	subs	r3, r1, r3
 80063e0:	603b      	str	r3, [r7, #0]
 80063e2:	4623      	mov	r3, r4
 80063e4:	e7f7      	b.n	80063d6 <__kernel_rem_pio2+0x312>
 80063e6:	1e72      	subs	r2, r6, #1
 80063e8:	ab0c      	add	r3, sp, #48	; 0x30
 80063ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80063f2:	a90c      	add	r1, sp, #48	; 0x30
 80063f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80063f8:	e745      	b.n	8006286 <__kernel_rem_pio2+0x1c2>
 80063fa:	1e72      	subs	r2, r6, #1
 80063fc:	ab0c      	add	r3, sp, #48	; 0x30
 80063fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006402:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006406:	e7f4      	b.n	80063f2 <__kernel_rem_pio2+0x32e>
 8006408:	a90c      	add	r1, sp, #48	; 0x30
 800640a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800640e:	3b01      	subs	r3, #1
 8006410:	430a      	orrs	r2, r1
 8006412:	e796      	b.n	8006342 <__kernel_rem_pio2+0x27e>
 8006414:	3401      	adds	r4, #1
 8006416:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800641a:	2a00      	cmp	r2, #0
 800641c:	d0fa      	beq.n	8006414 <__kernel_rem_pio2+0x350>
 800641e:	9b08      	ldr	r3, [sp, #32]
 8006420:	f106 0801 	add.w	r8, r6, #1
 8006424:	18f5      	adds	r5, r6, r3
 8006426:	ab20      	add	r3, sp, #128	; 0x80
 8006428:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800642c:	4434      	add	r4, r6
 800642e:	4544      	cmp	r4, r8
 8006430:	da04      	bge.n	800643c <__kernel_rem_pio2+0x378>
 8006432:	4626      	mov	r6, r4
 8006434:	e6bf      	b.n	80061b6 <__kernel_rem_pio2+0xf2>
 8006436:	2401      	movs	r4, #1
 8006438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800643a:	e7ec      	b.n	8006416 <__kernel_rem_pio2+0x352>
 800643c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800643e:	f04f 0900 	mov.w	r9, #0
 8006442:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006446:	f7f9 ffdd 	bl	8000404 <__aeabi_i2d>
 800644a:	2600      	movs	r6, #0
 800644c:	2700      	movs	r7, #0
 800644e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006450:	e9c5 0100 	strd	r0, r1, [r5]
 8006454:	3b08      	subs	r3, #8
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	9504      	str	r5, [sp, #16]
 800645a:	9b07      	ldr	r3, [sp, #28]
 800645c:	4599      	cmp	r9, r3
 800645e:	dd05      	ble.n	800646c <__kernel_rem_pio2+0x3a8>
 8006460:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8006464:	f108 0801 	add.w	r8, r8, #1
 8006468:	3508      	adds	r5, #8
 800646a:	e7e0      	b.n	800642e <__kernel_rem_pio2+0x36a>
 800646c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006470:	9900      	ldr	r1, [sp, #0]
 8006472:	f109 0901 	add.w	r9, r9, #1
 8006476:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800647a:	9100      	str	r1, [sp, #0]
 800647c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8006480:	f8cd c010 	str.w	ip, [sp, #16]
 8006484:	f7fa f828 	bl	80004d8 <__aeabi_dmul>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4630      	mov	r0, r6
 800648e:	4639      	mov	r1, r7
 8006490:	f7f9 fe6c 	bl	800016c <__adddf3>
 8006494:	4606      	mov	r6, r0
 8006496:	460f      	mov	r7, r1
 8006498:	e7df      	b.n	800645a <__kernel_rem_pio2+0x396>
 800649a:	3c01      	subs	r4, #1
 800649c:	e756      	b.n	800634c <__kernel_rem_pio2+0x288>
 800649e:	f1cb 0200 	rsb	r2, fp, #0
 80064a2:	4640      	mov	r0, r8
 80064a4:	4649      	mov	r1, r9
 80064a6:	f000 fc47 	bl	8006d38 <scalbn>
 80064aa:	2200      	movs	r2, #0
 80064ac:	4ba4      	ldr	r3, [pc, #656]	; (8006740 <__kernel_rem_pio2+0x67c>)
 80064ae:	4604      	mov	r4, r0
 80064b0:	460d      	mov	r5, r1
 80064b2:	f7fa fa97 	bl	80009e4 <__aeabi_dcmpge>
 80064b6:	b1f8      	cbz	r0, 80064f8 <__kernel_rem_pio2+0x434>
 80064b8:	2200      	movs	r2, #0
 80064ba:	4ba2      	ldr	r3, [pc, #648]	; (8006744 <__kernel_rem_pio2+0x680>)
 80064bc:	4620      	mov	r0, r4
 80064be:	4629      	mov	r1, r5
 80064c0:	f7fa f80a 	bl	80004d8 <__aeabi_dmul>
 80064c4:	f7fa fab8 	bl	8000a38 <__aeabi_d2iz>
 80064c8:	4607      	mov	r7, r0
 80064ca:	f7f9 ff9b 	bl	8000404 <__aeabi_i2d>
 80064ce:	2200      	movs	r2, #0
 80064d0:	4b9b      	ldr	r3, [pc, #620]	; (8006740 <__kernel_rem_pio2+0x67c>)
 80064d2:	f7fa f801 	bl	80004d8 <__aeabi_dmul>
 80064d6:	460b      	mov	r3, r1
 80064d8:	4602      	mov	r2, r0
 80064da:	4629      	mov	r1, r5
 80064dc:	4620      	mov	r0, r4
 80064de:	f7f9 fe43 	bl	8000168 <__aeabi_dsub>
 80064e2:	f7fa faa9 	bl	8000a38 <__aeabi_d2iz>
 80064e6:	1c74      	adds	r4, r6, #1
 80064e8:	ab0c      	add	r3, sp, #48	; 0x30
 80064ea:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80064ee:	f10b 0b18 	add.w	fp, fp, #24
 80064f2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80064f6:	e731      	b.n	800635c <__kernel_rem_pio2+0x298>
 80064f8:	4620      	mov	r0, r4
 80064fa:	4629      	mov	r1, r5
 80064fc:	f7fa fa9c 	bl	8000a38 <__aeabi_d2iz>
 8006500:	ab0c      	add	r3, sp, #48	; 0x30
 8006502:	4634      	mov	r4, r6
 8006504:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8006508:	e728      	b.n	800635c <__kernel_rem_pio2+0x298>
 800650a:	ab0c      	add	r3, sp, #48	; 0x30
 800650c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006510:	f7f9 ff78 	bl	8000404 <__aeabi_i2d>
 8006514:	4632      	mov	r2, r6
 8006516:	463b      	mov	r3, r7
 8006518:	f7f9 ffde 	bl	80004d8 <__aeabi_dmul>
 800651c:	4642      	mov	r2, r8
 800651e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8006522:	464b      	mov	r3, r9
 8006524:	4630      	mov	r0, r6
 8006526:	4639      	mov	r1, r7
 8006528:	f7f9 ffd6 	bl	80004d8 <__aeabi_dmul>
 800652c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006530:	4606      	mov	r6, r0
 8006532:	460f      	mov	r7, r1
 8006534:	e722      	b.n	800637c <__kernel_rem_pio2+0x2b8>
 8006536:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800653a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800653e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8006542:	f8cd c01c 	str.w	ip, [sp, #28]
 8006546:	f7f9 ffc7 	bl	80004d8 <__aeabi_dmul>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4650      	mov	r0, sl
 8006550:	4659      	mov	r1, fp
 8006552:	f7f9 fe0b 	bl	800016c <__adddf3>
 8006556:	4682      	mov	sl, r0
 8006558:	468b      	mov	fp, r1
 800655a:	f108 0801 	add.w	r8, r8, #1
 800655e:	9b02      	ldr	r3, [sp, #8]
 8006560:	4598      	cmp	r8, r3
 8006562:	dc01      	bgt.n	8006568 <__kernel_rem_pio2+0x4a4>
 8006564:	45b8      	cmp	r8, r7
 8006566:	dde6      	ble.n	8006536 <__kernel_rem_pio2+0x472>
 8006568:	ab48      	add	r3, sp, #288	; 0x120
 800656a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800656e:	e9c7 ab00 	strd	sl, fp, [r7]
 8006572:	3e01      	subs	r6, #1
 8006574:	e707      	b.n	8006386 <__kernel_rem_pio2+0x2c2>
 8006576:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006578:	2b02      	cmp	r3, #2
 800657a:	dc09      	bgt.n	8006590 <__kernel_rem_pio2+0x4cc>
 800657c:	2b00      	cmp	r3, #0
 800657e:	dc32      	bgt.n	80065e6 <__kernel_rem_pio2+0x522>
 8006580:	d05a      	beq.n	8006638 <__kernel_rem_pio2+0x574>
 8006582:	9b04      	ldr	r3, [sp, #16]
 8006584:	f003 0007 	and.w	r0, r3, #7
 8006588:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800658c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006590:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006592:	2b03      	cmp	r3, #3
 8006594:	d1f5      	bne.n	8006582 <__kernel_rem_pio2+0x4be>
 8006596:	ab48      	add	r3, sp, #288	; 0x120
 8006598:	441d      	add	r5, r3
 800659a:	46aa      	mov	sl, r5
 800659c:	46a3      	mov	fp, r4
 800659e:	f1bb 0f00 	cmp.w	fp, #0
 80065a2:	dc76      	bgt.n	8006692 <__kernel_rem_pio2+0x5ce>
 80065a4:	46aa      	mov	sl, r5
 80065a6:	46a3      	mov	fp, r4
 80065a8:	f1bb 0f01 	cmp.w	fp, #1
 80065ac:	f300 8090 	bgt.w	80066d0 <__kernel_rem_pio2+0x60c>
 80065b0:	2700      	movs	r7, #0
 80065b2:	463e      	mov	r6, r7
 80065b4:	2c01      	cmp	r4, #1
 80065b6:	f300 80aa 	bgt.w	800670e <__kernel_rem_pio2+0x64a>
 80065ba:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80065be:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f040 80ac 	bne.w	8006722 <__kernel_rem_pio2+0x65e>
 80065ca:	4603      	mov	r3, r0
 80065cc:	462a      	mov	r2, r5
 80065ce:	9806      	ldr	r0, [sp, #24]
 80065d0:	e9c0 2300 	strd	r2, r3, [r0]
 80065d4:	4622      	mov	r2, r4
 80065d6:	460b      	mov	r3, r1
 80065d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80065dc:	463a      	mov	r2, r7
 80065de:	4633      	mov	r3, r6
 80065e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80065e4:	e7cd      	b.n	8006582 <__kernel_rem_pio2+0x4be>
 80065e6:	2000      	movs	r0, #0
 80065e8:	46a0      	mov	r8, r4
 80065ea:	4601      	mov	r1, r0
 80065ec:	ab48      	add	r3, sp, #288	; 0x120
 80065ee:	441d      	add	r5, r3
 80065f0:	f1b8 0f00 	cmp.w	r8, #0
 80065f4:	da3a      	bge.n	800666c <__kernel_rem_pio2+0x5a8>
 80065f6:	9b00      	ldr	r3, [sp, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d03e      	beq.n	800667a <__kernel_rem_pio2+0x5b6>
 80065fc:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8006600:	4602      	mov	r2, r0
 8006602:	462b      	mov	r3, r5
 8006604:	9d06      	ldr	r5, [sp, #24]
 8006606:	2601      	movs	r6, #1
 8006608:	e9c5 2300 	strd	r2, r3, [r5]
 800660c:	460b      	mov	r3, r1
 800660e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006612:	f7f9 fda9 	bl	8000168 <__aeabi_dsub>
 8006616:	4684      	mov	ip, r0
 8006618:	460f      	mov	r7, r1
 800661a:	ad48      	add	r5, sp, #288	; 0x120
 800661c:	42b4      	cmp	r4, r6
 800661e:	f105 0508 	add.w	r5, r5, #8
 8006622:	da2c      	bge.n	800667e <__kernel_rem_pio2+0x5ba>
 8006624:	9b00      	ldr	r3, [sp, #0]
 8006626:	b10b      	cbz	r3, 800662c <__kernel_rem_pio2+0x568>
 8006628:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800662c:	4662      	mov	r2, ip
 800662e:	463b      	mov	r3, r7
 8006630:	9906      	ldr	r1, [sp, #24]
 8006632:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006636:	e7a4      	b.n	8006582 <__kernel_rem_pio2+0x4be>
 8006638:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800663a:	ab48      	add	r3, sp, #288	; 0x120
 800663c:	4637      	mov	r7, r6
 800663e:	441d      	add	r5, r3
 8006640:	2c00      	cmp	r4, #0
 8006642:	da09      	bge.n	8006658 <__kernel_rem_pio2+0x594>
 8006644:	9b00      	ldr	r3, [sp, #0]
 8006646:	b10b      	cbz	r3, 800664c <__kernel_rem_pio2+0x588>
 8006648:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800664c:	4632      	mov	r2, r6
 800664e:	463b      	mov	r3, r7
 8006650:	9906      	ldr	r1, [sp, #24]
 8006652:	e9c1 2300 	strd	r2, r3, [r1]
 8006656:	e794      	b.n	8006582 <__kernel_rem_pio2+0x4be>
 8006658:	4630      	mov	r0, r6
 800665a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800665e:	4639      	mov	r1, r7
 8006660:	f7f9 fd84 	bl	800016c <__adddf3>
 8006664:	3c01      	subs	r4, #1
 8006666:	4606      	mov	r6, r0
 8006668:	460f      	mov	r7, r1
 800666a:	e7e9      	b.n	8006640 <__kernel_rem_pio2+0x57c>
 800666c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006670:	f7f9 fd7c 	bl	800016c <__adddf3>
 8006674:	f108 38ff 	add.w	r8, r8, #4294967295
 8006678:	e7ba      	b.n	80065f0 <__kernel_rem_pio2+0x52c>
 800667a:	460d      	mov	r5, r1
 800667c:	e7c0      	b.n	8006600 <__kernel_rem_pio2+0x53c>
 800667e:	4660      	mov	r0, ip
 8006680:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006684:	4639      	mov	r1, r7
 8006686:	f7f9 fd71 	bl	800016c <__adddf3>
 800668a:	3601      	adds	r6, #1
 800668c:	4684      	mov	ip, r0
 800668e:	460f      	mov	r7, r1
 8006690:	e7c4      	b.n	800661c <__kernel_rem_pio2+0x558>
 8006692:	e9da 6700 	ldrd	r6, r7, [sl]
 8006696:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800669a:	4632      	mov	r2, r6
 800669c:	463b      	mov	r3, r7
 800669e:	4640      	mov	r0, r8
 80066a0:	4649      	mov	r1, r9
 80066a2:	f7f9 fd63 	bl	800016c <__adddf3>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066ae:	4640      	mov	r0, r8
 80066b0:	4649      	mov	r1, r9
 80066b2:	f7f9 fd59 	bl	8000168 <__aeabi_dsub>
 80066b6:	4632      	mov	r2, r6
 80066b8:	463b      	mov	r3, r7
 80066ba:	f7f9 fd57 	bl	800016c <__adddf3>
 80066be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066c2:	e86a 0102 	strd	r0, r1, [sl], #-8
 80066c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066ca:	e9ca 2300 	strd	r2, r3, [sl]
 80066ce:	e766      	b.n	800659e <__kernel_rem_pio2+0x4da>
 80066d0:	e9da 8900 	ldrd	r8, r9, [sl]
 80066d4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80066d8:	4642      	mov	r2, r8
 80066da:	464b      	mov	r3, r9
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f7f9 fd44 	bl	800016c <__adddf3>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066ec:	4630      	mov	r0, r6
 80066ee:	4639      	mov	r1, r7
 80066f0:	f7f9 fd3a 	bl	8000168 <__aeabi_dsub>
 80066f4:	4642      	mov	r2, r8
 80066f6:	464b      	mov	r3, r9
 80066f8:	f7f9 fd38 	bl	800016c <__adddf3>
 80066fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006700:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006704:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006708:	e9ca 2300 	strd	r2, r3, [sl]
 800670c:	e74c      	b.n	80065a8 <__kernel_rem_pio2+0x4e4>
 800670e:	4638      	mov	r0, r7
 8006710:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006714:	4631      	mov	r1, r6
 8006716:	f7f9 fd29 	bl	800016c <__adddf3>
 800671a:	3c01      	subs	r4, #1
 800671c:	4607      	mov	r7, r0
 800671e:	460e      	mov	r6, r1
 8006720:	e748      	b.n	80065b4 <__kernel_rem_pio2+0x4f0>
 8006722:	9b06      	ldr	r3, [sp, #24]
 8006724:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006728:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800672c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8006730:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8006734:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8006738:	601d      	str	r5, [r3, #0]
 800673a:	615e      	str	r6, [r3, #20]
 800673c:	e721      	b.n	8006582 <__kernel_rem_pio2+0x4be>
 800673e:	bf00      	nop
 8006740:	41700000 	.word	0x41700000
 8006744:	3e700000 	.word	0x3e700000

08006748 <__kernel_sin>:
 8006748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800674c:	b086      	sub	sp, #24
 800674e:	e9cd 2300 	strd	r2, r3, [sp]
 8006752:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006756:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800675a:	4682      	mov	sl, r0
 800675c:	460c      	mov	r4, r1
 800675e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006760:	da03      	bge.n	800676a <__kernel_sin+0x22>
 8006762:	f7fa f969 	bl	8000a38 <__aeabi_d2iz>
 8006766:	2800      	cmp	r0, #0
 8006768:	d050      	beq.n	800680c <__kernel_sin+0xc4>
 800676a:	4652      	mov	r2, sl
 800676c:	4623      	mov	r3, r4
 800676e:	4650      	mov	r0, sl
 8006770:	4621      	mov	r1, r4
 8006772:	f7f9 feb1 	bl	80004d8 <__aeabi_dmul>
 8006776:	4606      	mov	r6, r0
 8006778:	460f      	mov	r7, r1
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4650      	mov	r0, sl
 8006780:	4621      	mov	r1, r4
 8006782:	f7f9 fea9 	bl	80004d8 <__aeabi_dmul>
 8006786:	a33e      	add	r3, pc, #248	; (adr r3, 8006880 <__kernel_sin+0x138>)
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	4680      	mov	r8, r0
 800678e:	4689      	mov	r9, r1
 8006790:	4630      	mov	r0, r6
 8006792:	4639      	mov	r1, r7
 8006794:	f7f9 fea0 	bl	80004d8 <__aeabi_dmul>
 8006798:	a33b      	add	r3, pc, #236	; (adr r3, 8006888 <__kernel_sin+0x140>)
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	f7f9 fce3 	bl	8000168 <__aeabi_dsub>
 80067a2:	4632      	mov	r2, r6
 80067a4:	463b      	mov	r3, r7
 80067a6:	f7f9 fe97 	bl	80004d8 <__aeabi_dmul>
 80067aa:	a339      	add	r3, pc, #228	; (adr r3, 8006890 <__kernel_sin+0x148>)
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	f7f9 fcdc 	bl	800016c <__adddf3>
 80067b4:	4632      	mov	r2, r6
 80067b6:	463b      	mov	r3, r7
 80067b8:	f7f9 fe8e 	bl	80004d8 <__aeabi_dmul>
 80067bc:	a336      	add	r3, pc, #216	; (adr r3, 8006898 <__kernel_sin+0x150>)
 80067be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c2:	f7f9 fcd1 	bl	8000168 <__aeabi_dsub>
 80067c6:	4632      	mov	r2, r6
 80067c8:	463b      	mov	r3, r7
 80067ca:	f7f9 fe85 	bl	80004d8 <__aeabi_dmul>
 80067ce:	a334      	add	r3, pc, #208	; (adr r3, 80068a0 <__kernel_sin+0x158>)
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f7f9 fcca 	bl	800016c <__adddf3>
 80067d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067dc:	b9dd      	cbnz	r5, 8006816 <__kernel_sin+0xce>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4630      	mov	r0, r6
 80067e4:	4639      	mov	r1, r7
 80067e6:	f7f9 fe77 	bl	80004d8 <__aeabi_dmul>
 80067ea:	a32f      	add	r3, pc, #188	; (adr r3, 80068a8 <__kernel_sin+0x160>)
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f7f9 fcba 	bl	8000168 <__aeabi_dsub>
 80067f4:	4642      	mov	r2, r8
 80067f6:	464b      	mov	r3, r9
 80067f8:	f7f9 fe6e 	bl	80004d8 <__aeabi_dmul>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4650      	mov	r0, sl
 8006802:	4621      	mov	r1, r4
 8006804:	f7f9 fcb2 	bl	800016c <__adddf3>
 8006808:	4682      	mov	sl, r0
 800680a:	460c      	mov	r4, r1
 800680c:	4650      	mov	r0, sl
 800680e:	4621      	mov	r1, r4
 8006810:	b006      	add	sp, #24
 8006812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006816:	2200      	movs	r2, #0
 8006818:	e9dd 0100 	ldrd	r0, r1, [sp]
 800681c:	4b24      	ldr	r3, [pc, #144]	; (80068b0 <__kernel_sin+0x168>)
 800681e:	f7f9 fe5b 	bl	80004d8 <__aeabi_dmul>
 8006822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006826:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800682a:	4640      	mov	r0, r8
 800682c:	4649      	mov	r1, r9
 800682e:	f7f9 fe53 	bl	80004d8 <__aeabi_dmul>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800683a:	f7f9 fc95 	bl	8000168 <__aeabi_dsub>
 800683e:	4632      	mov	r2, r6
 8006840:	463b      	mov	r3, r7
 8006842:	f7f9 fe49 	bl	80004d8 <__aeabi_dmul>
 8006846:	e9dd 2300 	ldrd	r2, r3, [sp]
 800684a:	f7f9 fc8d 	bl	8000168 <__aeabi_dsub>
 800684e:	a316      	add	r3, pc, #88	; (adr r3, 80068a8 <__kernel_sin+0x160>)
 8006850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
 8006858:	4640      	mov	r0, r8
 800685a:	4649      	mov	r1, r9
 800685c:	f7f9 fe3c 	bl	80004d8 <__aeabi_dmul>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4630      	mov	r0, r6
 8006866:	4639      	mov	r1, r7
 8006868:	f7f9 fc80 	bl	800016c <__adddf3>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4650      	mov	r0, sl
 8006872:	4621      	mov	r1, r4
 8006874:	f7f9 fc78 	bl	8000168 <__aeabi_dsub>
 8006878:	e7c6      	b.n	8006808 <__kernel_sin+0xc0>
 800687a:	bf00      	nop
 800687c:	f3af 8000 	nop.w
 8006880:	5acfd57c 	.word	0x5acfd57c
 8006884:	3de5d93a 	.word	0x3de5d93a
 8006888:	8a2b9ceb 	.word	0x8a2b9ceb
 800688c:	3e5ae5e6 	.word	0x3e5ae5e6
 8006890:	57b1fe7d 	.word	0x57b1fe7d
 8006894:	3ec71de3 	.word	0x3ec71de3
 8006898:	19c161d5 	.word	0x19c161d5
 800689c:	3f2a01a0 	.word	0x3f2a01a0
 80068a0:	1110f8a6 	.word	0x1110f8a6
 80068a4:	3f811111 	.word	0x3f811111
 80068a8:	55555549 	.word	0x55555549
 80068ac:	3fc55555 	.word	0x3fc55555
 80068b0:	3fe00000 	.word	0x3fe00000

080068b4 <with_errno>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	4604      	mov	r4, r0
 80068b8:	460d      	mov	r5, r1
 80068ba:	4616      	mov	r6, r2
 80068bc:	f7fd f8e8 	bl	8003a90 <__errno>
 80068c0:	4629      	mov	r1, r5
 80068c2:	6006      	str	r6, [r0, #0]
 80068c4:	4620      	mov	r0, r4
 80068c6:	bd70      	pop	{r4, r5, r6, pc}

080068c8 <xflow>:
 80068c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068ca:	4615      	mov	r5, r2
 80068cc:	461c      	mov	r4, r3
 80068ce:	b180      	cbz	r0, 80068f2 <xflow+0x2a>
 80068d0:	4610      	mov	r0, r2
 80068d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80068d6:	e9cd 0100 	strd	r0, r1, [sp]
 80068da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068de:	4628      	mov	r0, r5
 80068e0:	4621      	mov	r1, r4
 80068e2:	f7f9 fdf9 	bl	80004d8 <__aeabi_dmul>
 80068e6:	2222      	movs	r2, #34	; 0x22
 80068e8:	b003      	add	sp, #12
 80068ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068ee:	f7ff bfe1 	b.w	80068b4 <with_errno>
 80068f2:	4610      	mov	r0, r2
 80068f4:	4619      	mov	r1, r3
 80068f6:	e7ee      	b.n	80068d6 <xflow+0xe>

080068f8 <__math_uflow>:
 80068f8:	2200      	movs	r2, #0
 80068fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068fe:	f7ff bfe3 	b.w	80068c8 <xflow>

08006902 <__math_oflow>:
 8006902:	2200      	movs	r2, #0
 8006904:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006908:	f7ff bfde 	b.w	80068c8 <xflow>
 800690c:	0000      	movs	r0, r0
	...

08006910 <atan>:
 8006910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	4bb6      	ldr	r3, [pc, #728]	; (8006bf0 <atan+0x2e0>)
 8006916:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800691a:	429e      	cmp	r6, r3
 800691c:	4604      	mov	r4, r0
 800691e:	460d      	mov	r5, r1
 8006920:	468b      	mov	fp, r1
 8006922:	dd17      	ble.n	8006954 <atan+0x44>
 8006924:	4bb3      	ldr	r3, [pc, #716]	; (8006bf4 <atan+0x2e4>)
 8006926:	429e      	cmp	r6, r3
 8006928:	dc01      	bgt.n	800692e <atan+0x1e>
 800692a:	d109      	bne.n	8006940 <atan+0x30>
 800692c:	b140      	cbz	r0, 8006940 <atan+0x30>
 800692e:	4622      	mov	r2, r4
 8006930:	462b      	mov	r3, r5
 8006932:	4620      	mov	r0, r4
 8006934:	4629      	mov	r1, r5
 8006936:	f7f9 fc19 	bl	800016c <__adddf3>
 800693a:	4604      	mov	r4, r0
 800693c:	460d      	mov	r5, r1
 800693e:	e005      	b.n	800694c <atan+0x3c>
 8006940:	f1bb 0f00 	cmp.w	fp, #0
 8006944:	4cac      	ldr	r4, [pc, #688]	; (8006bf8 <atan+0x2e8>)
 8006946:	f300 8121 	bgt.w	8006b8c <atan+0x27c>
 800694a:	4dac      	ldr	r5, [pc, #688]	; (8006bfc <atan+0x2ec>)
 800694c:	4620      	mov	r0, r4
 800694e:	4629      	mov	r1, r5
 8006950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006954:	4baa      	ldr	r3, [pc, #680]	; (8006c00 <atan+0x2f0>)
 8006956:	429e      	cmp	r6, r3
 8006958:	dc11      	bgt.n	800697e <atan+0x6e>
 800695a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800695e:	429e      	cmp	r6, r3
 8006960:	dc0a      	bgt.n	8006978 <atan+0x68>
 8006962:	a38b      	add	r3, pc, #556	; (adr r3, 8006b90 <atan+0x280>)
 8006964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006968:	f7f9 fc00 	bl	800016c <__adddf3>
 800696c:	2200      	movs	r2, #0
 800696e:	4ba5      	ldr	r3, [pc, #660]	; (8006c04 <atan+0x2f4>)
 8006970:	f7fa f842 	bl	80009f8 <__aeabi_dcmpgt>
 8006974:	2800      	cmp	r0, #0
 8006976:	d1e9      	bne.n	800694c <atan+0x3c>
 8006978:	f04f 3aff 	mov.w	sl, #4294967295
 800697c:	e027      	b.n	80069ce <atan+0xbe>
 800697e:	f000 f951 	bl	8006c24 <fabs>
 8006982:	4ba1      	ldr	r3, [pc, #644]	; (8006c08 <atan+0x2f8>)
 8006984:	4604      	mov	r4, r0
 8006986:	429e      	cmp	r6, r3
 8006988:	460d      	mov	r5, r1
 800698a:	f300 80b8 	bgt.w	8006afe <atan+0x1ee>
 800698e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006992:	429e      	cmp	r6, r3
 8006994:	f300 809c 	bgt.w	8006ad0 <atan+0x1c0>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	f7f9 fbe6 	bl	800016c <__adddf3>
 80069a0:	2200      	movs	r2, #0
 80069a2:	4b98      	ldr	r3, [pc, #608]	; (8006c04 <atan+0x2f4>)
 80069a4:	f7f9 fbe0 	bl	8000168 <__aeabi_dsub>
 80069a8:	2200      	movs	r2, #0
 80069aa:	4606      	mov	r6, r0
 80069ac:	460f      	mov	r7, r1
 80069ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069b2:	4620      	mov	r0, r4
 80069b4:	4629      	mov	r1, r5
 80069b6:	f7f9 fbd9 	bl	800016c <__adddf3>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4630      	mov	r0, r6
 80069c0:	4639      	mov	r1, r7
 80069c2:	f7f9 feb3 	bl	800072c <__aeabi_ddiv>
 80069c6:	f04f 0a00 	mov.w	sl, #0
 80069ca:	4604      	mov	r4, r0
 80069cc:	460d      	mov	r5, r1
 80069ce:	4622      	mov	r2, r4
 80069d0:	462b      	mov	r3, r5
 80069d2:	4620      	mov	r0, r4
 80069d4:	4629      	mov	r1, r5
 80069d6:	f7f9 fd7f 	bl	80004d8 <__aeabi_dmul>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4680      	mov	r8, r0
 80069e0:	4689      	mov	r9, r1
 80069e2:	f7f9 fd79 	bl	80004d8 <__aeabi_dmul>
 80069e6:	a36c      	add	r3, pc, #432	; (adr r3, 8006b98 <atan+0x288>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	4606      	mov	r6, r0
 80069ee:	460f      	mov	r7, r1
 80069f0:	f7f9 fd72 	bl	80004d8 <__aeabi_dmul>
 80069f4:	a36a      	add	r3, pc, #424	; (adr r3, 8006ba0 <atan+0x290>)
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	f7f9 fbb7 	bl	800016c <__adddf3>
 80069fe:	4632      	mov	r2, r6
 8006a00:	463b      	mov	r3, r7
 8006a02:	f7f9 fd69 	bl	80004d8 <__aeabi_dmul>
 8006a06:	a368      	add	r3, pc, #416	; (adr r3, 8006ba8 <atan+0x298>)
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f7f9 fbae 	bl	800016c <__adddf3>
 8006a10:	4632      	mov	r2, r6
 8006a12:	463b      	mov	r3, r7
 8006a14:	f7f9 fd60 	bl	80004d8 <__aeabi_dmul>
 8006a18:	a365      	add	r3, pc, #404	; (adr r3, 8006bb0 <atan+0x2a0>)
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	f7f9 fba5 	bl	800016c <__adddf3>
 8006a22:	4632      	mov	r2, r6
 8006a24:	463b      	mov	r3, r7
 8006a26:	f7f9 fd57 	bl	80004d8 <__aeabi_dmul>
 8006a2a:	a363      	add	r3, pc, #396	; (adr r3, 8006bb8 <atan+0x2a8>)
 8006a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a30:	f7f9 fb9c 	bl	800016c <__adddf3>
 8006a34:	4632      	mov	r2, r6
 8006a36:	463b      	mov	r3, r7
 8006a38:	f7f9 fd4e 	bl	80004d8 <__aeabi_dmul>
 8006a3c:	a360      	add	r3, pc, #384	; (adr r3, 8006bc0 <atan+0x2b0>)
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f7f9 fb93 	bl	800016c <__adddf3>
 8006a46:	4642      	mov	r2, r8
 8006a48:	464b      	mov	r3, r9
 8006a4a:	f7f9 fd45 	bl	80004d8 <__aeabi_dmul>
 8006a4e:	a35e      	add	r3, pc, #376	; (adr r3, 8006bc8 <atan+0x2b8>)
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	4680      	mov	r8, r0
 8006a56:	4689      	mov	r9, r1
 8006a58:	4630      	mov	r0, r6
 8006a5a:	4639      	mov	r1, r7
 8006a5c:	f7f9 fd3c 	bl	80004d8 <__aeabi_dmul>
 8006a60:	a35b      	add	r3, pc, #364	; (adr r3, 8006bd0 <atan+0x2c0>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f7f9 fb7f 	bl	8000168 <__aeabi_dsub>
 8006a6a:	4632      	mov	r2, r6
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	f7f9 fd33 	bl	80004d8 <__aeabi_dmul>
 8006a72:	a359      	add	r3, pc, #356	; (adr r3, 8006bd8 <atan+0x2c8>)
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	f7f9 fb76 	bl	8000168 <__aeabi_dsub>
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	463b      	mov	r3, r7
 8006a80:	f7f9 fd2a 	bl	80004d8 <__aeabi_dmul>
 8006a84:	a356      	add	r3, pc, #344	; (adr r3, 8006be0 <atan+0x2d0>)
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	f7f9 fb6d 	bl	8000168 <__aeabi_dsub>
 8006a8e:	4632      	mov	r2, r6
 8006a90:	463b      	mov	r3, r7
 8006a92:	f7f9 fd21 	bl	80004d8 <__aeabi_dmul>
 8006a96:	a354      	add	r3, pc, #336	; (adr r3, 8006be8 <atan+0x2d8>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f7f9 fb64 	bl	8000168 <__aeabi_dsub>
 8006aa0:	4632      	mov	r2, r6
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	f7f9 fd18 	bl	80004d8 <__aeabi_dmul>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4640      	mov	r0, r8
 8006aae:	4649      	mov	r1, r9
 8006ab0:	f7f9 fb5c 	bl	800016c <__adddf3>
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	f7f9 fd0e 	bl	80004d8 <__aeabi_dmul>
 8006abc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	d144      	bne.n	8006b50 <atan+0x240>
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	4629      	mov	r1, r5
 8006aca:	f7f9 fb4d 	bl	8000168 <__aeabi_dsub>
 8006ace:	e734      	b.n	800693a <atan+0x2a>
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	4b4c      	ldr	r3, [pc, #304]	; (8006c04 <atan+0x2f4>)
 8006ad4:	f7f9 fb48 	bl	8000168 <__aeabi_dsub>
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4606      	mov	r6, r0
 8006adc:	460f      	mov	r7, r1
 8006ade:	4620      	mov	r0, r4
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4b48      	ldr	r3, [pc, #288]	; (8006c04 <atan+0x2f4>)
 8006ae4:	f7f9 fb42 	bl	800016c <__adddf3>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4630      	mov	r0, r6
 8006aee:	4639      	mov	r1, r7
 8006af0:	f7f9 fe1c 	bl	800072c <__aeabi_ddiv>
 8006af4:	f04f 0a01 	mov.w	sl, #1
 8006af8:	4604      	mov	r4, r0
 8006afa:	460d      	mov	r5, r1
 8006afc:	e767      	b.n	80069ce <atan+0xbe>
 8006afe:	4b43      	ldr	r3, [pc, #268]	; (8006c0c <atan+0x2fc>)
 8006b00:	429e      	cmp	r6, r3
 8006b02:	da1a      	bge.n	8006b3a <atan+0x22a>
 8006b04:	2200      	movs	r2, #0
 8006b06:	4b42      	ldr	r3, [pc, #264]	; (8006c10 <atan+0x300>)
 8006b08:	f7f9 fb2e 	bl	8000168 <__aeabi_dsub>
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	4606      	mov	r6, r0
 8006b10:	460f      	mov	r7, r1
 8006b12:	4620      	mov	r0, r4
 8006b14:	4629      	mov	r1, r5
 8006b16:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <atan+0x300>)
 8006b18:	f7f9 fcde 	bl	80004d8 <__aeabi_dmul>
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	4b39      	ldr	r3, [pc, #228]	; (8006c04 <atan+0x2f4>)
 8006b20:	f7f9 fb24 	bl	800016c <__adddf3>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7f9 fdfe 	bl	800072c <__aeabi_ddiv>
 8006b30:	f04f 0a02 	mov.w	sl, #2
 8006b34:	4604      	mov	r4, r0
 8006b36:	460d      	mov	r5, r1
 8006b38:	e749      	b.n	80069ce <atan+0xbe>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	2000      	movs	r0, #0
 8006b40:	4934      	ldr	r1, [pc, #208]	; (8006c14 <atan+0x304>)
 8006b42:	f7f9 fdf3 	bl	800072c <__aeabi_ddiv>
 8006b46:	f04f 0a03 	mov.w	sl, #3
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	460d      	mov	r5, r1
 8006b4e:	e73e      	b.n	80069ce <atan+0xbe>
 8006b50:	4b31      	ldr	r3, [pc, #196]	; (8006c18 <atan+0x308>)
 8006b52:	4e32      	ldr	r6, [pc, #200]	; (8006c1c <atan+0x30c>)
 8006b54:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006b58:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006b5c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b60:	f7f9 fb02 	bl	8000168 <__aeabi_dsub>
 8006b64:	4622      	mov	r2, r4
 8006b66:	462b      	mov	r3, r5
 8006b68:	f7f9 fafe 	bl	8000168 <__aeabi_dsub>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006b74:	f7f9 faf8 	bl	8000168 <__aeabi_dsub>
 8006b78:	f1bb 0f00 	cmp.w	fp, #0
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	460d      	mov	r5, r1
 8006b80:	f6bf aee4 	bge.w	800694c <atan+0x3c>
 8006b84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b88:	461d      	mov	r5, r3
 8006b8a:	e6df      	b.n	800694c <atan+0x3c>
 8006b8c:	4d24      	ldr	r5, [pc, #144]	; (8006c20 <atan+0x310>)
 8006b8e:	e6dd      	b.n	800694c <atan+0x3c>
 8006b90:	8800759c 	.word	0x8800759c
 8006b94:	7e37e43c 	.word	0x7e37e43c
 8006b98:	e322da11 	.word	0xe322da11
 8006b9c:	3f90ad3a 	.word	0x3f90ad3a
 8006ba0:	24760deb 	.word	0x24760deb
 8006ba4:	3fa97b4b 	.word	0x3fa97b4b
 8006ba8:	a0d03d51 	.word	0xa0d03d51
 8006bac:	3fb10d66 	.word	0x3fb10d66
 8006bb0:	c54c206e 	.word	0xc54c206e
 8006bb4:	3fb745cd 	.word	0x3fb745cd
 8006bb8:	920083ff 	.word	0x920083ff
 8006bbc:	3fc24924 	.word	0x3fc24924
 8006bc0:	5555550d 	.word	0x5555550d
 8006bc4:	3fd55555 	.word	0x3fd55555
 8006bc8:	2c6a6c2f 	.word	0x2c6a6c2f
 8006bcc:	bfa2b444 	.word	0xbfa2b444
 8006bd0:	52defd9a 	.word	0x52defd9a
 8006bd4:	3fadde2d 	.word	0x3fadde2d
 8006bd8:	af749a6d 	.word	0xaf749a6d
 8006bdc:	3fb3b0f2 	.word	0x3fb3b0f2
 8006be0:	fe231671 	.word	0xfe231671
 8006be4:	3fbc71c6 	.word	0x3fbc71c6
 8006be8:	9998ebc4 	.word	0x9998ebc4
 8006bec:	3fc99999 	.word	0x3fc99999
 8006bf0:	440fffff 	.word	0x440fffff
 8006bf4:	7ff00000 	.word	0x7ff00000
 8006bf8:	54442d18 	.word	0x54442d18
 8006bfc:	bff921fb 	.word	0xbff921fb
 8006c00:	3fdbffff 	.word	0x3fdbffff
 8006c04:	3ff00000 	.word	0x3ff00000
 8006c08:	3ff2ffff 	.word	0x3ff2ffff
 8006c0c:	40038000 	.word	0x40038000
 8006c10:	3ff80000 	.word	0x3ff80000
 8006c14:	bff00000 	.word	0xbff00000
 8006c18:	08007420 	.word	0x08007420
 8006c1c:	08007400 	.word	0x08007400
 8006c20:	3ff921fb 	.word	0x3ff921fb

08006c24 <fabs>:
 8006c24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006c28:	4770      	bx	lr

08006c2a <finite>:
 8006c2a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006c2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006c32:	0fc0      	lsrs	r0, r0, #31
 8006c34:	4770      	bx	lr
	...

08006c38 <floor>:
 8006c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c3c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006c40:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006c44:	2e13      	cmp	r6, #19
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	4605      	mov	r5, r0
 8006c50:	dc33      	bgt.n	8006cba <floor+0x82>
 8006c52:	2e00      	cmp	r6, #0
 8006c54:	da14      	bge.n	8006c80 <floor+0x48>
 8006c56:	a334      	add	r3, pc, #208	; (adr r3, 8006d28 <floor+0xf0>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	f7f9 fa86 	bl	800016c <__adddf3>
 8006c60:	2200      	movs	r2, #0
 8006c62:	2300      	movs	r3, #0
 8006c64:	f7f9 fec8 	bl	80009f8 <__aeabi_dcmpgt>
 8006c68:	b138      	cbz	r0, 8006c7a <floor+0x42>
 8006c6a:	2c00      	cmp	r4, #0
 8006c6c:	da58      	bge.n	8006d20 <floor+0xe8>
 8006c6e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006c72:	431d      	orrs	r5, r3
 8006c74:	d001      	beq.n	8006c7a <floor+0x42>
 8006c76:	2500      	movs	r5, #0
 8006c78:	4c2d      	ldr	r4, [pc, #180]	; (8006d30 <floor+0xf8>)
 8006c7a:	4623      	mov	r3, r4
 8006c7c:	462f      	mov	r7, r5
 8006c7e:	e025      	b.n	8006ccc <floor+0x94>
 8006c80:	4a2c      	ldr	r2, [pc, #176]	; (8006d34 <floor+0xfc>)
 8006c82:	fa42 f806 	asr.w	r8, r2, r6
 8006c86:	ea01 0208 	and.w	r2, r1, r8
 8006c8a:	4302      	orrs	r2, r0
 8006c8c:	d01e      	beq.n	8006ccc <floor+0x94>
 8006c8e:	a326      	add	r3, pc, #152	; (adr r3, 8006d28 <floor+0xf0>)
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	f7f9 fa6a 	bl	800016c <__adddf3>
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f7f9 feac 	bl	80009f8 <__aeabi_dcmpgt>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d0ea      	beq.n	8006c7a <floor+0x42>
 8006ca4:	2c00      	cmp	r4, #0
 8006ca6:	bfbe      	ittt	lt
 8006ca8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006cac:	fa43 f606 	asrlt.w	r6, r3, r6
 8006cb0:	19a4      	addlt	r4, r4, r6
 8006cb2:	2500      	movs	r5, #0
 8006cb4:	ea24 0408 	bic.w	r4, r4, r8
 8006cb8:	e7df      	b.n	8006c7a <floor+0x42>
 8006cba:	2e33      	cmp	r6, #51	; 0x33
 8006cbc:	dd0a      	ble.n	8006cd4 <floor+0x9c>
 8006cbe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006cc2:	d103      	bne.n	8006ccc <floor+0x94>
 8006cc4:	f7f9 fa52 	bl	800016c <__adddf3>
 8006cc8:	4607      	mov	r7, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4638      	mov	r0, r7
 8006cce:	4619      	mov	r1, r3
 8006cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006cdc:	fa22 f808 	lsr.w	r8, r2, r8
 8006ce0:	ea18 0f00 	tst.w	r8, r0
 8006ce4:	d0f2      	beq.n	8006ccc <floor+0x94>
 8006ce6:	a310      	add	r3, pc, #64	; (adr r3, 8006d28 <floor+0xf0>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f7f9 fa3e 	bl	800016c <__adddf3>
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f7f9 fe80 	bl	80009f8 <__aeabi_dcmpgt>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d0be      	beq.n	8006c7a <floor+0x42>
 8006cfc:	2c00      	cmp	r4, #0
 8006cfe:	da02      	bge.n	8006d06 <floor+0xce>
 8006d00:	2e14      	cmp	r6, #20
 8006d02:	d103      	bne.n	8006d0c <floor+0xd4>
 8006d04:	3401      	adds	r4, #1
 8006d06:	ea25 0508 	bic.w	r5, r5, r8
 8006d0a:	e7b6      	b.n	8006c7a <floor+0x42>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006d12:	fa03 f606 	lsl.w	r6, r3, r6
 8006d16:	4435      	add	r5, r6
 8006d18:	42bd      	cmp	r5, r7
 8006d1a:	bf38      	it	cc
 8006d1c:	18e4      	addcc	r4, r4, r3
 8006d1e:	e7f2      	b.n	8006d06 <floor+0xce>
 8006d20:	2500      	movs	r5, #0
 8006d22:	462c      	mov	r4, r5
 8006d24:	e7a9      	b.n	8006c7a <floor+0x42>
 8006d26:	bf00      	nop
 8006d28:	8800759c 	.word	0x8800759c
 8006d2c:	7e37e43c 	.word	0x7e37e43c
 8006d30:	bff00000 	.word	0xbff00000
 8006d34:	000fffff 	.word	0x000fffff

08006d38 <scalbn>:
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006d3e:	4604      	mov	r4, r0
 8006d40:	460d      	mov	r5, r1
 8006d42:	4617      	mov	r7, r2
 8006d44:	460b      	mov	r3, r1
 8006d46:	b996      	cbnz	r6, 8006d6e <scalbn+0x36>
 8006d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d4c:	4303      	orrs	r3, r0
 8006d4e:	d039      	beq.n	8006dc4 <scalbn+0x8c>
 8006d50:	4b33      	ldr	r3, [pc, #204]	; (8006e20 <scalbn+0xe8>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	f7f9 fbc0 	bl	80004d8 <__aeabi_dmul>
 8006d58:	4b32      	ldr	r3, [pc, #200]	; (8006e24 <scalbn+0xec>)
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	429f      	cmp	r7, r3
 8006d5e:	460d      	mov	r5, r1
 8006d60:	da0f      	bge.n	8006d82 <scalbn+0x4a>
 8006d62:	a32b      	add	r3, pc, #172	; (adr r3, 8006e10 <scalbn+0xd8>)
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f7f9 fbb6 	bl	80004d8 <__aeabi_dmul>
 8006d6c:	e006      	b.n	8006d7c <scalbn+0x44>
 8006d6e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006d72:	4296      	cmp	r6, r2
 8006d74:	d10a      	bne.n	8006d8c <scalbn+0x54>
 8006d76:	4602      	mov	r2, r0
 8006d78:	f7f9 f9f8 	bl	800016c <__adddf3>
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	460d      	mov	r5, r1
 8006d80:	e020      	b.n	8006dc4 <scalbn+0x8c>
 8006d82:	460b      	mov	r3, r1
 8006d84:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006d88:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006d8c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006d90:	19b9      	adds	r1, r7, r6
 8006d92:	4291      	cmp	r1, r2
 8006d94:	dd0e      	ble.n	8006db4 <scalbn+0x7c>
 8006d96:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006d9a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006d9e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006da2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006da6:	4820      	ldr	r0, [pc, #128]	; (8006e28 <scalbn+0xf0>)
 8006da8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006dac:	a31a      	add	r3, pc, #104	; (adr r3, 8006e18 <scalbn+0xe0>)
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	e7d9      	b.n	8006d68 <scalbn+0x30>
 8006db4:	2900      	cmp	r1, #0
 8006db6:	dd08      	ble.n	8006dca <scalbn+0x92>
 8006db8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006dbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006dc0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006dce:	da12      	bge.n	8006df6 <scalbn+0xbe>
 8006dd0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006dd4:	429f      	cmp	r7, r3
 8006dd6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006dda:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006dde:	dcdc      	bgt.n	8006d9a <scalbn+0x62>
 8006de0:	a30b      	add	r3, pc, #44	; (adr r3, 8006e10 <scalbn+0xd8>)
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006dea:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006dee:	480f      	ldr	r0, [pc, #60]	; (8006e2c <scalbn+0xf4>)
 8006df0:	f041 011f 	orr.w	r1, r1, #31
 8006df4:	e7b8      	b.n	8006d68 <scalbn+0x30>
 8006df6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006dfa:	3136      	adds	r1, #54	; 0x36
 8006dfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e00:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006e04:	4620      	mov	r0, r4
 8006e06:	4629      	mov	r1, r5
 8006e08:	2200      	movs	r2, #0
 8006e0a:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <scalbn+0xf8>)
 8006e0c:	e7ac      	b.n	8006d68 <scalbn+0x30>
 8006e0e:	bf00      	nop
 8006e10:	c2f8f359 	.word	0xc2f8f359
 8006e14:	01a56e1f 	.word	0x01a56e1f
 8006e18:	8800759c 	.word	0x8800759c
 8006e1c:	7e37e43c 	.word	0x7e37e43c
 8006e20:	43500000 	.word	0x43500000
 8006e24:	ffff3cb0 	.word	0xffff3cb0
 8006e28:	8800759c 	.word	0x8800759c
 8006e2c:	c2f8f359 	.word	0xc2f8f359
 8006e30:	3c900000 	.word	0x3c900000

08006e34 <_init>:
 8006e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e36:	bf00      	nop
 8006e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3a:	bc08      	pop	{r3}
 8006e3c:	469e      	mov	lr, r3
 8006e3e:	4770      	bx	lr

08006e40 <_fini>:
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e42:	bf00      	nop
 8006e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e46:	bc08      	pop	{r3}
 8006e48:	469e      	mov	lr, r3
 8006e4a:	4770      	bx	lr
